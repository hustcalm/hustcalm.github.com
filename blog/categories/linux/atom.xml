<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Welcome to Pandora's Box]]></title>
  <link href="http://hustcalm.me/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://hustcalm.me/"/>
  <updated>2014-04-17T20:31:31+08:00</updated>
  <id>http://hustcalm.me/</id>
  <author>
    <name><![CDATA[Lihang Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build PTAM on Fedora 20 the easy way - 10 Minutes Tutorial]]></title>
    <link href="http://hustcalm.me/blog/2014/04/17/build-ptam-on-fedora-20-the-easy-way-10-minutes-tutorial/"/>
    <updated>2014-04-17T19:21:41+08:00</updated>
    <id>http://hustcalm.me/blog/2014/04/17/build-ptam-on-fedora-20-the-easy-way-10-minutes-tutorial</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since the last post <a href="http://hustcalm.me/blog/2013/09/27/ptam-compilation-on-linux-howto/">PTAM Compilation on Linux-HowTo</a> about playing with PTAM. And now Isis Innovation has released the source code under GPLv3 and put it on <a href="https://github.com/Oxford-PTAM/PTAM-GPL">Github</a>.</p>

<p>Last time, we demostrate detailed instructions on how to get PTAM running on Debian derived systems(Linux Mint 15 and Ubuntu 12.04), now I want talk about building the source code on Fedora 20. It won&rsquo;t be long, since I just want to talk about the key components, thus the mandatory dependencies(<strong>TooN, libCVD, Gvars3, OpenGL, libjpeg, libpng, libtiff</strong>, etc).</p>

<!--more-->


<p>As the PTAM source code use the GNU autoconf tools, so the typical way to install is <code>./configure &amp;&amp; make &amp;&amp; sudo make install</code>, however, to make sure that certain third libs are correctly configured and can found when running <code>configure</code>, you may want to have a look at the output after <code>configure</code> and install any key dependency which is missed.</p>

<p>Whenever you are not sure, see the <strong>Official Website</strong> for sure!!!</p>

<h2>Install Dependencies</h2>

<h3>TooN</h3>

<p><a href="http://www.edwardrosten.com/cvd/toon.html">TooN</a> is a numerics library used by libCVD. Since they are just a bundle of header files, installation is trivial.</p>

<pre><code>sudo yum install liblapack-devel
sudo yum install libblas-devel

./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>

<h3>libCVD</h3>

<p><a href="http://www.edwardrosten.com/cvd/">libCVD</a> is a very portable and high performance C++ library for computer vision, image, and video processing.</p>

<p>This is the key component for building PTAM, thus should be careful. Make sure you installed OpenGL correctly, also for the video source, if you are using a UVC webcam, check if <code>v4l2</code> is working. Or if you are using a IEEE1394 camera, get libxx1394 series libs installed which can drive your camera. For Image I/O, always have libjpeg, libpng and libtiff.</p>

<p>See the output after running <code>configure</code> and ensure all the options related are OK.</p>

<pre><code>sudo yum install freeglut-devel

./configure

make

sudo make install
</code></pre>

<h3>GVars3</h3>

<p><a href="http://www.edwardrosten.com/cvd/gvars3.html">GVars3</a> is a configuration library which integrates well with TooN. Not much to worry when buiding.</p>

<pre><code>./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>

<h2>Build PTAM</h2>

<h3>Run ldconfig</h3>

<p>The libs built above may reside in <code>/usr/local/lib</code> when using the default directorys in their Makefiles, to make the system aware of the newly installed libs.</p>

<pre><code>sudo vi /etc/ld.so.conf
add /usr/local/lib to the file
sudo ldconfig
</code></pre>

<h3>Prepare for Makefile</h3>

<pre><code>cd the_PTAM_Directory
cp Build/Linux/* .
vi Makefile
add -lGLU -lGL -llapack to the linker commands
</code></pre>

<h3>Fix usleep declaration</h3>

<pre><code>vi Tracker.cc
add #include &lt;unistd.h&gt; to the first line
</code></pre>

<h3>Build</h3>

<pre><code>make
</code></pre>

<p>If nothing wrong, you are done!</p>

<h2>Run PTAM</h2>

<p>Simply invoke <code>CameraCalibrator</code> to calibrate your camera. Then invoke <code>PTAM</code> for real fun.</p>

<p>If you use UVC webcam using <code>v4l2</code>, you may want to install:</p>

<pre><code>sudo yum install v4l-utils
</code></pre>

<p>Use <code>v4l2-ctl</code> to play with your camera.</p>

<h2>Trouble Shooting</h2>

<p>As the orinigal <a href="http://www.robots.ox.ac.uk/~gk/PTAM/README.txt">README.txt</a> says, PTAM works well with Nvidia display card, I got <code>Segmentation Fault as soon as ... got video source</code> as I&rsquo;m using a display card shipped with an Intel motherboard.</p>

<p>However, I think the root cause is that the display card driver does not know how to handle the color space coming from the webcam, so I&rsquo;m planning to deep into the mechanism and try to find out why. <a href="http://ewokrampage.wordpress.com/troubleshooting-faq/">George Klein</a> says that a nvidia display card and driver combo works fine after all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Getting Started - Methodologies and Practices]]></title>
    <link href="http://hustcalm.me/blog/2014/01/06/linux-getting-started-methodologies-and-practices/"/>
    <updated>2014-01-06T22:22:00+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/06/linux-getting-started-methodologies-and-practices</id>
    <content type="html"><![CDATA[<p>This is basically a topic that I gave to <a href="http://blog-ossclub.rhcloud.com/">Open-CAS</a> group members as a technique share. Since I have known Linux for over 4 years and heavily used it for 2 years more or less, I find myself realy attracted by it.</p>

<p>Also I want others to have the chance to live with a better OS(Unix and Linux, also Mac OS of course), so it&rsquo;s a good time to take the good points out of my mind and let more people know.</p>

<p>It&rsquo;s good to learn from each other especially when there are problems to solve. So I put my mind at a <code>github</code> repo called <a href="https://github.com/hustcalm/linux-getting-started">linux-getting-started</a> and hope that others would join me to make this repo more useful.</p>

<!--more-->


<h3>What&rsquo;s in this repo</h3>

<p>Currently, I&rsquo;m addressing two aspects for <code>Linux Getting Started</code>, namely <code>Methodologies</code> and <code>Practices</code>. I know these are really big words, but they just fit here since I want to tell people <code>how to learn</code> not just <code>what to learn</code>.</p>

<h4>Methodologies</h4>

<p>Know what you are gonna do before you step out. Basically, for Linux beginners, the first step that I recommend is <code>install a Linux distro that you like</code>. Then just <code>use it</code> before you want to know everything about it(seems that no one will never ever). It&rsquo;s an OS after all, you use it for your daily job and solve your problems, not a magic software that just plays magic.</p>

<p>A good book would give you a real quick start, I have divided the books into three levels:</p>

<ul>
<li>[Beginner]</li>
</ul>


<p>Newbies who just get to know Linux &ndash; Learn how to live with shell</p>

<ul>
<li>[Developer]</li>
</ul>


<p>Experienced programmers especially for C/C++ guys &ndash; get used to Linux Platform</p>

<ul>
<li>[Next]</li>
</ul>


<p>Ones who will dive deeper into the most complicated but fun part &ndash; Kernel and Driver</p>

<p><strong>In one word, use it, learn it, dive into it!</strong></p>

<h4>Practices</h4>

<p>Using and Reading will give a quite well understanding for Linux, but not enough for mastering it. To become <code>real Linux users or developers</code>, remember <code>never leave your eyes off the screen and your fingers off your keyboard</code>, practice will just make perfect things and a great Linuxer, believe me:&ndash;)</p>

<p>I address two technical parts currently in this repo, <code>Shell Scripting</code> and <code>Makefile</code>. Other parts will definitely added as long as I maintain this repo.</p>

<h5>Shell Scripting</h5>

<p>Before beginning with <code>Shell Scripting</code>, I suppose you have already been familiar with varies of commands or utilities in shell.</p>

<p>To be straight, <code>shell</code> itself is a program which will interpret user&rsquo;s commands or instructions, convert them to <code>system calls</code> or other things that OS can understand. So basically speaking, <code>shell</code> is the interface between <code>user</code> and <code>OS Kernel</code>.</p>

<p>As a script language, it has its own variables, functions and flow control statements, also it features many other stuff which will ease much pain for system administration but maybe worse if not used properly. When we are writing shell scripts, we are actually dealing with processes and interprocess communication, each process would do its job and we can use <code>pipe</code>, <code>socket</code>, <code>named-pipes</code> or <code>file</code> to let them talk to each other.</p>

<p>You can definitely play some magic with shell scripting by choosing your favorite shell, like <code>Bash</code>, <code>Ksh</code>, <code>Zsh</code>, etc.</p>

<h5>Makefile</h5>

<p>As you get to know <code>shell</code>, you are ready to know something about <code>makefile</code>. Before that, I will talk about <code>make</code>, <code>autotools</code> first.</p>

<p>When we are trying to build a big project, no one want to invoke every single compiling commands by hand which is annoying but also error prone. Here comes <code>make</code> to figure out this problem. So when you download a package with source code, to build it, simply type:</p>

<pre><code>make
sudo make install
</code></pre>

<p>Then you are done!</p>

<p>Is this that easy? Reality will really disappoint us, because the user&rsquo;s OS or environment always will not be consistent with the developer&rsquo;s. So <code>make</code> does not easy the pain for buiding a package or software from scratch, but making it easier to manage a big project.</p>

<p>So what&rsquo;s the solution? Here comes the <code>Autotools</code>, which will generate <code>makefiles</code> automatically according to the configuration of your system. Like you got a third party library A, and one package needs the library for one feature, <code>Autotools</code> will take care of whether you got the library installed, if yes, then build the package with the feature enabled, or just disable it otherwise.</p>

<p>Cool, isn&rsquo;t it? Yes for the users, but maybe no for the developers, I mean all the pain will be transfered to the developers since they got to write <code>Autotools</code> scripts to make things right. Just another wrapper to give a good, cross-platform and generic solution? Some people would quite agree with this opinion.</p>

<p>Thanks to the <code>Autotools</code>, people are getting used to:</p>

<pre><code>./configure
make
sudo make install
</code></pre>

<p>There are many others excellent build systems or tools out there, like <code>CMake</code>, <code>QMake</code>, <code>Scons</code>, <code>Ninja</code> ,etc. Go and try them out!</p>

<hr />

<h3>Where is the slide</h3>

<p>Honestly speaking, the slide is just a chain which helps me to make a clear topic. So you will not find it big, just about 15 pages, however to spread all the sparking mind, you will find it&rsquo;s really a <code>big one</code> again.</p>

<p>If you want, download the slide at <a href="https://github.com/hustcalm/linux-getting-started/blob/master/linux-getting-started-%40hustcalm.pdf">here</a>.</p>

<hr />

<h3>What if I want to see something else</h3>

<p>Cool, buddy, I do hope that we can maintain this repo together and help more people to get started with Linux. So you are welcome to add interesting topics or useful links or good references or books to this repo.</p>

<p>You may either <code>fork</code> this <a href="https://github.com/hustcalm/linux-getting-started">repo</a>, add something interesting, then <code>pull request</code> to me.</p>

<p>Or you can just add what you want to know to the <code>wishList</code> file after <code>fork</code>, maybe shortly I will add stuff about the topic that you care about.</p>

<p>Help others, help yourself:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install CentOS 6.4 minial with Grub2 and a USB Stick - The Simple Way]]></title>
    <link href="http://hustcalm.me/blog/2013/11/04/install-centos-6-dot-4-minial-with-grub2-and-a-usb-stick-the-simple-way/"/>
    <updated>2013-11-04T17:08:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/11/04/install-centos-6-dot-4-minial-with-grub2-and-a-usb-stick-the-simple-way</id>
    <content type="html"><![CDATA[<p>What a shame that I failed over and over to just install CentOS 6.4 minimal to my Desktop PC!!!</p>

<p>I got a broken Ubuntu 12.04 on my hand with a working Grub2, cheers:&ndash;) Also, I luckily have a 4 GB USB stick(who esle dosen&rsquo;t,kidding).</p>

<h2>The Goal</h2>

<p>Install CentOS 6.4 minial with Grub2 and a single USB stick, making no bootable USB stick, but do some tricks with the ISO file instead.</p>

<!--more-->


<h2>Preparation</h2>

<p>In a nutshell, we need a working Grub(or other bootloaders, I use Grub2), a USB Stick with a vfat or ext2 partition and CentOS ISO file.</p>

<h3>Bootloader</h3>

<p>As I have a broken Ubuntu 12.04 and a already working Grub2, I would just go on.</p>

<p>However, you have many choices due to your OS. Such as:</p>

<ul>
<li>Grub Legacy</li>
<li>Grub4dos</li>
<li>EasyBCD</li>
</ul>


<h3>ISO</h3>

<p>Download it from a mirror that&rsquo;s close enough to you. Check out the <a href="http://isoredirect.centos.org/centos/6/isos/x86_64/">Mirror List</a> and I choose <a href="http://mirrors.163.com/centos/6.4/isos/x86_64/">mirrors.163.com</a>.</p>

<p>Save the <code>CentOS-6.4-x86_64-minimal.iso</code> to your hard drive.</p>

<h3>USB Stick</h3>

<p>According to the CentOS wiki, the installer will recognize ext2 or vfat. I choose vfat in my case.</p>

<p>My device on my Linuxmint shows /dev/sdb and the partition shows /dev/sdb1. Just ensure that you have a VFAT partition, other things don&rsquo;t matter too much really.</p>

<p>To play with device and partitions, you can use <code>fdisk</code> and <code>mkfs.*</code> or other tools that you favor.</p>

<h3>Extract Files</h3>

<p>I put the ISO file under <code>~/Downloads</code>. And I follow the instructions below:</p>

<pre><code>mkdir /mnt/centos
sudo mount -o loop -t iso9660 ~/Downloads/CentOS-6.4-x86_64-minimal.iso /mnt/centos
mkdir /mnt/usbdisk
mount /dev/sdb1 /mnt/usbdisk
cp -r /mnt/centos/isolinux /mnt/centos/images /mnt/usbdisk
sudo umount /mnt/centos
cp ~/Downloads/CentOS-6.4-x86_64-minimal.iso /mnt/usbdisk
sudo umount /mnt/usbdisk
</code></pre>

<p>After this, we have <code>CentOS-6.4-x86_64-minimal.iso</code>,<code>isolinux</code> and <code>images</code> on our USB Stick.</p>

<h2>Installation</h2>

<p>Now use Grub2 to boot into CentOS installation environment and complete the installation. I have a SATA hard disk locally and do remember <strong>CentOS installer will make your local hard disk to sdb or sdc, but not sda. The USB Stick will be sda during the installation.</strong></p>

<p>To enter Grub2 command line, press <code>SHIFT</code> when your PC boots, or you may miss the menu entry due to <strong>HIDDEN_TIMEOUT</strong> configruration. Then press <code>c</code> to get a command line.</p>

<p>Then follow the instructions below, you may adjust a little to suit your own PC.</p>

<pre><code>linux (hd1,msdos1)/isolinux/vmlinuz
initrd (hd1,msdos1)/isolinux/initrd.img
boot
</code></pre>

<p>When you prompt to select <code>Installation Method</code>, use <code>Hard Drive</code> and select <code>sda1</code>, follow the routine procedures and you are done:&ndash;)</p>

<p><strong>I tried <code>URL Method</code> but failed, either <code>mirrors.163.com</code> nor <code>mirrors.sohu.com</code> would work:&ndash;(</strong></p>

<h2>Summary</h2>

<p>All the essentials reside in Grub2 and isolinux or you may say bootloader and ISO stuff. Check them out and deep it for deep is the best way to solve varies of problems related to boot, installation and rescue.</p>

<p>You may install by other methods, CD-ROW, bootable USB Stick or whatever you like.</p>

<p>Enjoy the struggling and enjoy the gain!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Xen under Centos6.4 to build your own VPS]]></title>
    <link href="http://hustcalm.me/blog/2013/10/14/playing-with-xen-under-centos6-dot-4-to-build-your-own-vps/"/>
    <updated>2013-10-14T10:28:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/10/14/playing-with-xen-under-centos6-dot-4-to-build-your-own-vps</id>
    <content type="html"><![CDATA[<p>Believe it or not, we are under an age called Cloud Computing.</p>

<p>I used to be curious about VPS(Virtual Private Server), how they work, how to build them, etc. As far as I know, AWS, GCE or whatever else solutions depend heavily on Virtualization Technologies and AWS is definitly playing with Xen currently.</p>

<p>I would like very much to have a trial for building my own VPS and blow are my steps doing it. You may need to read some basic wikis about Xen, <a href="http://wiki.xen.org/wiki/Xen_Overview">Xen Overview</a> and <a href="http://wiki.xen.org/wiki/Xen_Beginners_Guide">Xen Beginners Guide</a> should do some help:&ndash;)</p>

<!--more-->


<h2>Getting a working Dom0 on Centos6.4</h2>

<h3>Install Centos</h3>

<p>Use whatever way you like, remember a <strong>minimal install</strong> is recommended.</p>

<h3>Install Xen</h3>

<p>Thanks to <strong>Xen4Centos</strong> Project, we can get Xen installed in several simple commands(log in as root).</p>

<pre><code>yum -y update
yum install centos-release-xen
yum install xen
/usr/bin/grub-bootxen.sh
reboot
</code></pre>

<p>After your machine comes to alive, simply type:</p>

<pre><code>uname -r
xl list
</code></pre>

<p>to verify that Xen Dom0 is running.</p>

<h3>Config network</h3>

<p>I use DHCP to get a valid IP for my box and there is a trick if you can&rsquo;t ping each other when two machinea are in the same LAN(probably the routing table is not working for you and just delete the record from your routing table).</p>

<p>As me, for example, my laptop got a IP, say 192.168.0.10 and my VPS got 192.168.0.11, but they can&rsquo;t talk to each:&ndash;(</p>

<p>First, check your routing table,</p>

<pre><code>route
</code></pre>

<p>Then, delete the record that is evil,</p>

<pre><code>route del -net 192.168.0.0 netmask 255.255.255.0
</code></pre>

<p><strong>Please substitute the parameters to suite your own networking</strong>.</p>

<p>After that, ping each other,</p>

<pre><code>ping 192.168.0.11
</code></pre>

<p>to verify the networking is good to go.</p>

<p>In order to give our DomUs valid IPs, we may use a network bridge, do as follows:</p>

<pre><code>yum -y install bridge-utils
cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-xenbr0
</code></pre>

<p>My modified and working scripts look like this, for ifcfg-xenbr0:</p>

<pre><code>DEVICE=xenbr0
#HWADDR=00:24:E8:46:CC:C9
TYPE=bridge
#UUID=ff0ab497-0303-4dc3-b6f3-4a6cbd90466b
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=dhcp
</code></pre>

<p>And for ifcfg-eth0:</p>

<pre><code>DEVICE=eth0
HWADDR=00:24:E8:46:CC:C9
TYPE=Ethernet
UUID=ff0ab497-0303-4dc3-b6f3-4a6cbd90466b
ONBOOT=yes
NM_CONTROLLED=no
#BOOTPROTO=dhcp
BRIDGE=xenbr0
</code></pre>

<p><strong>For static IP configuration, please refer to Xen wiki page!</strong></p>

<p>Then, make the configuration work:</p>

<pre><code>service network restart
</code></pre>

<p>If you got errors such as <code>error:check cable</code>, do this manualy:</p>

<pre><code>ifup xenbr0
</code></pre>

<p>Verify it works by issuing:</p>

<pre><code>ifconfig xenbr0
</code></pre>

<h3>Diable SELinux</h3>

<p>Honestly speaking, I don&rsquo;t know WTF the real reason to do this, but people say <code>SELinux can really interfere with Xen</code>.</p>

<pre><code>sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
setenforce 0
</code></pre>

<p>You are good to go with a damn working Dom0 and congratulations!</p>

<h2>Bringing Your DomUs Up</h2>

<p>It&rsquo;s up to you to use PV or HVM, personally, I prefer to PV due to higher performance. But if you want a Windows(and other OS whose kernel can&rsquo;t be modified), HVM is your only choice.</p>

<p>As for me, I want 3 DomUs, namely Debian, Fedora and Arch Linux.</p>

<h3>Xen4Cli or Xen4Libvirt</h3>

<p>Xen4Cli(xm and xl, currently xm deprecated) are intended for advanced users looking to hand setup the network, the backing filestore and the xen environment. While Xen4Libvirt are for newbies looking for the easiest install path.</p>

<p>I prefer <code>xl</code> since I want to know what exactly is happening, and <code>xl</code> works for Debian and Arch Linux. However for Fedora, <code>Libvert</code> seems to be the right way(using <code>virt-install</code>).</p>

<p>To install Libvirt,</p>

<pre><code>yum install libvirt python-virtinst libvirt-daemon-xen
</code></pre>

<p>After the install, restart your Dom0 machine.</p>

<h3>File or LVM based backend</h3>

<p>Since Centos6.4 is shipped perfectly with LVM and also the default partition schema using LVM during OS Installation, I prefer <code>LVM</code>.</p>

<p>As for me, I do the following:</p>

<pre><code>lvresize -L -200G vg_centos6/lv_home -r
lvcreate -L 30G -n fedora vg_centos6
lvcreate -L 30G -n debian vg_centos6
lvcreate -L 30G -n archlinux vg_centos6
</code></pre>

<p>Then verify the Logical Volumes using:</p>

<pre><code>lvdisplay
</code></pre>

<p>Or</p>

<pre><code>lvs
</code></pre>

<p>If you are not familiar with LVM, search Google for a good tutorial first.</p>

<h3>Bridge, Routing or NAT</h3>

<p>Three networking modes are provided and choose one according to your own networking environment.</p>

<p>I got bridge working for me as described in above section.</p>

<p>For choosing other modes, you can modify <code>/etc/xen/xend-config.sxp</code> or explicitly passing as parameters when creating DomUs.</p>

<h3>Let DomUs fly</h3>

<h4>Debian</h4>

<p>I choose debian7.1 netinst.iso due to my poor bandwidth,</p>

<pre><code>wget -c http://mirrors.sohu.com/debian-cd/7.1.0/amd64/iso-cd/debian-7.1.0-amd64-netinst.iso
mount -o loop /path/to/debian-7.1.0-amd64-netinst.iso /mnt/debian
cp /mnt/debian/install.amd/xen/debian.cfg /etc/xen/
cd /etc/xen/
vi debian.cfg  ## Make modifications according to the comments
xl create -c debian.cfg
</code></pre>

<p>Then install Debian as a very normal one.</p>

<h4>Arch Linux</h4>

<p>I download archlinux-2013.10.01-dual.iso by issuing:</p>

<pre><code>wget http://mirrors.sohu.com/archlinux/iso/latest/archlinux-2013.10.01-dual.iso
</code></pre>

<p>Then create a arch.cfg file in <code>/etc/xen/</code> similar like:</p>

<pre><code># Refer to https://wiki.archlinux.org/index.php/Xen#Configuring_a_paravirtualized_.28PV.29_Arch_domU

name = "arch"
kernel = "/mnt/arch/arch/boot/x86_64/vmlinuz"
ramdisk = "/mnt/arch/arch/boot/x86_64/archiso.img"
extra = "archisobasedir=arch archisolabel=ARCH_201310"
memory = 512
disk = [ "phy:/dev/vg_centos6/archlinux,sda1,w", "file:/root/isos/arch/archlinux-2013.10.01-dual.iso,sdb,r" ]
vif = [ '' ]
</code></pre>

<p>After that, bring the DomU up by:</p>

<pre><code>mount /path/to/archlinux-2013.10.01-dual.iso /mnt/arch
cd /etc/xen/
xl create -c arch.cfg
</code></pre>

<p>Install your Arch Linux as you like since it&rsquo;s really a highly customized distro.</p>

<h4>Fedora</h4>

<p>Again I got Fedora-20-Alpha-x86_64-netinst.iso by issuing:</p>

<pre><code>wget http://download.fedoraproject.org/pub/fedora/linux/releases/test/20-Alpha/Fedora/x86_64/iso/Fedora-20-Alpha-x86_64-netinst.iso
</code></pre>

<p>However, nightmares begin since I want to install it using the Debian way. <code>xl</code> just fails to boot normally but <code>virt-install</code> does the job.</p>

<p>Using the <code>virt-install</code> method:</p>

<pre><code>virt-install --virt-type xen -n fedora19 -r 512 --vcpus=2 -f /dev/vg_centos6/fedora19 --location http://mirrors.163.com/fedora/releases/19/Fedora/x86_64/os/ --os-type linux --accelerate --nographics --network=bridge:xenbr0
</code></pre>

<p>Or you can download the ISO file first, then issuing your own httpd locally, thus making it:</p>

<pre><code>mount -o loop /path/to/fedora.iso /mnt/fedora
yum -y install httpd
service httpd start
ln -s /mnt/fedora /var/www/html
service iptables stop
virt-install --virt-type xen -n fedora19 -r 512 --vcpus=2 -f /dev/vg_centos6/fedora19 --location http://your.http.server.ip.address.here/ --os-type linux --accelerate --nographics --network=bridge:xenbr0
</code></pre>

<p>Remember this is for full Fedora installation, if you are using a netinst, you need to copy all the files to /var/www/html instead of creating a symbolic link and modify the .treeinfo file. No warrants here, since I did&rsquo;t try it myself.</p>

<h2>References</h2>

<ul>
<li><a href="http://wiki.centos.org/HowTos/Xen/Xen4QuickStart">Xen4 CentOS6 QuickStart</a></li>
<li><a href="http://wiki.centos.org/HowTos/Xen/Xen4QuickStart/Xen4Libvirt">Xen4 Libvirt for CentOS 6</a></li>
<li><a href="http://drewsymo.com/cloud-computing/install-xen-on-centos-and-create-a-fedora-debian-vm/">Install Xen 4 with Libvirt / XL on CentOS 6 (2013)</a></li>
<li><a href="http://www.howtoforge.com/virtualization-with-xen-on-centos-6.2-x86_64-paravirtualization-and-hardware-virtualization">Virtualization With Xen On CentOS 6.2 (x86_64) (Paravirtualization &amp; Hardware Virtualization)</a></li>
<li><a href="http://wiki.xen.org/wiki/Xen_Configuration_File_Options">Xen Configuration File Options</a></li>
<li><a href="http://xenbits.xen.org/docs/unstable/man/xl.cfg.5.html">XL Domain Configuration File Syntax</a></li>
<li><a href="http://wiki.xen.org/wiki/Network_Configuration_Examples_(Xen_4.1%2B">Network Configuration Examples (Xen 4.1+)</a>)</li>
<li><a href="http://wiki.xen.org/wiki/Debian_Guest_Installation_Using_Debian_Installer">Debian Guest Installation Using Debian Installer</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Xen">Xen For Arch Linux Wiki page</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Installation_Guide">Arch Linux Installation Guide</a></li>
<li><a href="http://bderzhavets.wordpress.com/2009/01/10/install-fedora-10-pv-domu-at-xen-331-centos-52-dom0-xen-330-intrepid-server-dom0-novells-xen-inified-kernel-via-local-apache-mirror/">Install Fedora 10 PV DomU at Xen 3.3.1 CentOS 5.2 Dom0 &amp; Xen 3.3.0 Intrepid Server Dom0 (Novell’s Xen-ified Kernel) via local Apache Mirror</a></li>
<li><a href="https://lists.fedoraproject.org/pipermail/xen/2012-November/005938.html">Installing a domU without virt-install Fedora-xen</a></li>
<li><a href="http://www.centos.bz/2012/03/centos-6-install-deploy-xen/">CentOS 6安装配置Xen</a></li>
<li><a href="http://www.cnblogs.com/hseagle/p/3299713.html">Archlinux 简明安装指南</a></li>
<li><a href="http://blog.csdn.net/holdsky/article/details/8497764">archlinux （2012.12.01-dual） i686 硬盘安装</a></li>
<li><a href="http://en.wikipedia.org/wiki/Xen">Xen</a></li>
<li><a href="http://wiki.xen.org/wiki/Choice_of_Toolstacks">Choice of Toolstacks</a>

<ul>
<li><a href="http://wiki.xen.org/wiki/XL_vs_Xend_Feature_Comparison">XL vs Xend Feature Comparison</a></li>
</ul>
</li>
</ul>


<hr />

<p>I do believe you will get lots of annoying problems while playing with Xen. Enjoy the problems and enjoy Xen:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小记Fedora 19 Release Party和Barcamp Beijing August]]></title>
    <link href="http://hustcalm.me/blog/2013/08/24/xiao-ji-fedora-19-release-partyhe-barcamp-beijing-august/"/>
    <updated>2013-08-24T09:47:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/08/24/xiao-ji-fedora-19-release-partyhe-barcamp-beijing-august</id>
    <content type="html"><![CDATA[<p>离这两个活动已经过去一周的时间了，总觉得应该写点什么，那就以这篇“小记”来叙述吧。</p>

<p>Fedora一直以来被冠以edge bleeding的称号，尝鲜者的最爱，自己从Ubuntu 9.04开始使用Linux，便一直与其无缘，现在想想，确是有一些遗憾的（具体说不上来为啥，也许自己总是希望小众一些，Fedora在国内的用户确实不是太多，至少相比于Ubuntu来说是这样的，有限的CentOS使用经历告诉我，这是一款值得使用的Linux发行版）。Fedora 19,代号“薛定谔的猫”，作为第一款“原生”支持3D打印的操作系统，让人眼前一亮。</p>

<p>Barcamp对我来说则陌生很多，在活动的前两天才得知消息，告诉我的人说是“一个充满各种创意制作的聚会”，而实际上“这里是一个充满各种创意演讲的地方”。具体的信息，大家移步<a href="http://www.barcamp-beijing.com/">Barcamp官方网站</a>吧。</p>

<!--more-->


<h2>Fedora 19 Release Party</h2>

<p>这次RP，主要有三个议题，涉及Cloud Computing，System Trace，3D Printing。</p>

<h3>OpenShift &amp; Cloud</h3>

<p>演讲人Gerard Braad（@gbraad），Fedora 大使委员会成员，亚太地区区域导师，Fedora社区和开源社区的活跃演讲者，致力于Fedora品牌的推广。</p>

<p>OpenShift算是一种PaaS，演讲者先是就虚拟化的一些基本概念进行阐述（虚拟化的分类，典型的技术，比如KVM，LXC等），再谈到OpenStack的基本架构，之后涉及OpenShift的架构。新的概念不多，而且讲解非常深入浅出，非常适合云计算入门。</p>

<h3>SystemTap Introduction</h3>

<p>演讲人Robin Lee（李瑞彬），供职于北京蓝汛 (ChinaCache)。在 Fedora 项目中是 packager 的角色，致力于提高自由软件的质量和整合度。</p>

<p>SystemTap 是 Linux 下的可编程的通用系统跟踪工具，可进行侵入式跟踪，可用于内核态和用户态跟踪及代码注入。在 Linux 实现了大致相当于 DTrace 的功能。其语法由 AWK 语言发展出来。本次分享主要介绍了SystemTap 的基本语法和一些使用举例，最后生成火焰图（Flame Graph）的例子还是很酷的。</p>

<p>这是个纯技术话题，不多说了，我比较好奇的是Trace实现的底层原理，在网上查了下，以下两篇文章很不错：</p>

<ul>
<li><a href="http://blog.csdn.net/wudongxu/article/details/6345481">systemtap原理及使用</a></li>
<li><a href="http://xuclv.blog.51cto.com/5503169/1184517"> linux系统分析工具续-SystemTap和火焰图（Flame Graph）</a></li>
</ul>


<h3>3D Printing at Fedora 19</h3>

<p>演讲人Tong Hui（@tonghuix），开源软件与开源硬件的布道者，开源嵌入式培训导师，GNOME 基金会成员，北京GNOME用户组成员。</p>

<p>这个演讲的信息量比较大，演讲者从3D打印机的历史开始说起，谈到了3D打印的现状以及常用技术，并且简单分析了技术实现，最后结合Fedora进行了真机演示（DFRobot公司的3D打印机）。</p>

<p>我的理解是，3D打印机是嵌入式技术，3维建模技术，材料学的完美结合！</p>

<h2>Barcamp Beijing August</h2>

<p>聚会地点在Microsoft Research Asia一层，主要参与人员是国际友人，国际友人的友人，还有众多的ABC。God，谁让他们的英语都那么native呢！</p>

<p>这一天比较大的收获是，体验了Barcamp的活动形式（Speech &amp; QA），见识了演讲者的无限魅力（I really mean it!），获取了一些“创新”思维。其它的觉得表达不出来了（因为在会上，有一种略微的不适感，难以融入到老外的圈子里面去），大家等下次Barcamp的时候自己去体会吧！</p>

<p>会不会有一天也在Barcamp上演讲？（Who TM knows，可能性不大，看自己了！）。</p>
]]></content>
  </entry>
  
</feed>
