<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SNS | Welcome to Pandora's Box]]></title>
  <link href="http://hustcalm.me/blog/categories/sns/atom.xml" rel="self"/>
  <link href="http://hustcalm.me/"/>
  <updated>2014-01-23T16:01:04+08:00</updated>
  <id>http://hustcalm.me/</id>
  <author>
    <name><![CDATA[Lihang Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[再谈OpenAPI，从WebService说起]]></title>
    <link href="http://hustcalm.me/blog/2013/07/22/zai-tan-openapi%2Ccong-webserviceshuo-qi/"/>
    <updated>2013-07-22T20:51:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/07/22/zai-tan-openapi,cong-webserviceshuo-qi</id>
    <content type="html"><![CDATA[<p>最近对<a href="https://github.com/hustcalm/SNS-Shim">SNS-Shim</a>做了更新，目前支持新浪微博，人人网，QQ互联（包括QQ，Qzone，腾讯微博），豆瓣，网易微博，使用相应的wrapper类可以方便地拿到用户的个人信息，以及发布新的状态。</p>

<p>在开发的过程中，自己对OpenAPI的工作原理有了进一步的理解，同时也激起了对服务提供商如何向开发者提供易用可靠的OpenAPI服务进行研究的好奇心。简单来说，开发者只需要关注如何“使用”，了解了基本的授权流程后，接下来只要按照API进行网络请求即可（使用服务提供商的SDK是最直接的，也可以自己根据相应的请求规范自己实现请求接口，因为本质上都是向某个URL发起HTTP请求）。</p>

<p>而作为服务提供商则要考虑开放平台的建设问题了，这里面涉及到各种关于集群，高并发，大数据，分布式处理的东西（这个时候再看OAuth什么的，只是其中的一个小实现细节）。</p>

<!--more-->


<p>从整个大的层面看开放平台，是服务提供商将自身的一部分业务和服务以Web Service的形式开放出去（比较早的貌似是Yahoo搜索，开发者可以利用其API进行搜索），比较典型的有Facebook，Twitter，Flickr，Google Map，Amazon，Youtube等等。而国内的开放平台的建设和发展也是最近几年的事情，目前几大SNS站点，腾讯，阿里巴巴旗下的淘宝等，豆瓣都顺应潮流推出了自己的平台。不管是跟风也好，炒作也罢，抑或是背后的业务需求，各位大佬们都要面临开放平台的建设问题，从技术角度来考虑，有REST和类RPC两种选择。</p>

<p>由于本身认识有限，就不泼墨了，简单说说Web Service常见的几个概念，然后给出几个好文的链接。</p>

<ul>
<li>Web Service：直观理解，通过Web向外部提供服务。</li>
<li>RPC：Remote Procedure Call，远程过程调用，客户端向服务器端发起一个请求（携带方法和参数），服务器处理后返回结果给客户端。</li>
<li>XML-RPC：基于XML的RPC，也就是客户端和服务器之间消息传递的格式是基于XML的，标准化的XML解析实现数据交换。</li>
<li>SOA：Service Oriented Architecture，面向服务架构，适应Web Service开发的一种架构，请自行Google。</li>
<li>SOAP：Simple Object Access Protocol，对XML-RPC的改进和拓展，却不尽人意。</li>
<li>REST：REpresentation State Transfer，Web Service的一种架构，设计理念和HTTP协议有异曲同工之妙。</li>
</ul>


<p>下面给出几个链接，供大家一起研究：</p>

<ul>
<li><a href="http://www.cnblogs.com/mindsbook/archive/2009/11/17/web_service_RESTvsRPC.html">Web Service实践之REST vs RPC</a></li>
<li><a href="http://oplatform.org/archives/23">OpenAPI出现、起源与现状（连载一）</a></li>
<li><a href="http://oplatform.org/archives/24">OpenAPI出现、起源与现状（连载二）</a></li>
<li><a href="http://www.cnblogs.com/liuxiaojun/archive/2010/08/30/openapi.html">OpenAPI系列文章-如何构建一个OpenAPI平台</a></li>
<li><a href="http://openapi.codeplex.com/">OpenAPI-Open API Platform 一个开源的OpenAPI平台</a></li>
<li><a href="http://www.infoq.com/cn/articles/open-api-practice">Open API分析、实践和思索-阿里 放翁</a></li>
</ul>


<p>感觉<a href="http://blog.csdn.net/cenwenchu79">放翁</a>的文章分析很透彻，他CSDN上也有很多关于开放平台的好文章，建议大家阅读！</p>

<p>刚才又发现一篇不错的post<a href="http://www.blogjava.net/BlueDavy/archive/2009/04/28/267970.html">网站架构相关PPT、文章整理（更新于2009-7-15）</a>，作者是放翁的同事。</p>

<p>感觉有好多东西需要学习，不过很喜欢这种感觉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[也谈SNS OpenAPI接入-OAuth 2.0和Java SDK]]></title>
    <link href="http://hustcalm.me/blog/2013/06/23/ye-tan-sns-openapijie-ru-oauth-2-dot-0he-java-sdk/"/>
    <updated>2013-06-23T21:10:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/06/23/ye-tan-sns-openapijie-ru-oauth-2-dot-0he-java-sdk</id>
    <content type="html"><![CDATA[<p>由于一个项目的需求，开始接触开放平台的API，已完成客户端的用户接入。参考了一些OpenAPI的相关文章后，开始动手封装国内的几大主流开放平台的Java SDK，下面谈一谈我在封装过程中的体会，也算是对自己工作的一个小结。</p>

<h2>OpenAPI是啥</h2>

<p>简单来讲，就是在UCG之外，服务提供商为了增强自身服务的可用性，为了鼓励开发者开发站内或者第三方应用，提供的应用程序接口（可以联想下Restful）。按照历史顺序来看，facebook和twitter仍然是开山鼻祖，一领OpenAPI的先河，尤其是twitter的t4j在国内被发扬光大了（看看网易微博Java
SDK就清楚了）。再稍微具体点，就是在用户授权的情况下，第三方应用可以操作用户的数据，当然服务提供商会对应用请求有所限制（比如每小时的API请求次数等等）。用户的授权，使用OAuth协议完成，而用户数据的操作通过服务提供商提供的API搞定。</p>

<h2>OAuth是啥</h2>

<!--more-->


<p>一种“时髦”的授权机制和协议，目前是2.0版本，核心目的是第三方应用在不必知道用户的用户名和密码的情况下，可以给用户提供服务。在用户将要使用第三方应用的时候，应用会引导用户到服务提供商的授权页面，待完成用户授权后，第三方应用会拿到一个许可证（Access Token），凭借这个许可证访问用户数据，下面引用一张图片说明具体的授权过程：
<img src="http://www.sinaimg.cn/blog/developer/wiki/oAuth2_01.gif" alt="OAuth授权流程说明" /></p>

<h2>如何接入</h2>

<p>针对各大开发平台，其核心都是授权流程，由于大多都是基于OAuth的，所以大同小异。作为开发者，一般的接入流程是：
*   1. 申请应用，得到appKey和appSecret（也可能是appID及其它，本质都是应用的UIUD）
*   2. 下载开放平台的SDK测试，针对自己开放将要使用的API，最好做一个充分的测试，保证其能工作
*   3. 将SDK封装成简洁的调用接口，供自己的应用调用</p>

<h2>更多信息</h2>

<p>我在github上托管了一个项目<a href="https://github.com/hustcalm/SNS-Shim">SNS-Shim</a>，封装了新浪微博，QQ互联，人人网，豆瓣，网易微博的Java SDK，而且给出了各大开发平台以及OAuth的相关链接，大家可以参考讨论！</p>
]]></content>
  </entry>
  
</feed>
