<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to Pandora's Box]]></title>
  <link href="http://hustcalm.me/atom.xml" rel="self"/>
  <link href="http://hustcalm.me/"/>
  <updated>2016-11-12T13:03:26+08:00</updated>
  <id>http://hustcalm.me/</id>
  <author>
    <name><![CDATA[Lihang Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[工作后的一点感悟]]></title>
    <link href="http://hustcalm.me/blog/2016/07/23/gong-zuo-hou-de-yi-dian-gan-wu/"/>
    <updated>2016-07-23T00:19:26+08:00</updated>
    <id>http://hustcalm.me/blog/2016/07/23/gong-zuo-hou-de-yi-dian-gan-wu</id>
    <content type="html"><![CDATA[<p>转眼参加工作已经整一年了。这一年渐渐感受到作为一个社会人与学生时代的不同，离开象牙塔才逐渐有了心慌的感觉，以前很多下不定决心做的事情，在压力和自我追求的权衡中慢慢变得很容易坚定去做了。做了18年的学生（真是应了18年寒穿苦读的老话），走上工作岗位，踏上社会，心里是有莫名的解脱感的，可能自己确实想去探寻一下科技公司究竟都在做什么，且是近距离的观察➕亲身体会。一年的时间不长不短，略微有一点思考和感悟。</p>

<!--more-->


<h2>学生思维</h2>

<p>从学生时代走向工作岗位，思维方式需要有一个转变，这是大多数应届毕业生都会面对的（尤其是在正式参加工作前没有实习经历的同学们）。学生思维具体体现在：产品意识不够强烈，如何站在老板的角度思考问题，动态的眼光看待外界环境。</p>

<p>大家都知道，学生做项目基本是“可用，可运行”为主，受众也通常是自己或者实验室的同门，如果对自己比较自信又富有分享精神，开源社区的可能也是受众。质量保证是“学生项目”和“公司项目”根本的不同之一（我目前是这么认为的），一次产品的发布需要从需求分析开始，到需求明确，时间表制定，开发，peer review，测试（这是学生比较容易忽略的，测试用例的设计以及测试的执行是很重要的能力），dog food（相当于内部beta一下），bug
fix，测试报告等文档，最后到release review（一些你之前根本不会考虑的问题，虽然不难，但做的时候多少会让你明白，原来发布一个小的算法都要做如此繁琐的review工作啊），才“有可能”顺利发布。发布后还没有大功告成，维护，更新，修bug，都是分内之事。</p>

<p>本科阶段“混”毕业，研究生阶段“求”毕业。相信读研的同学们多少有点跟老板“斗争”的经历，毕业如一座大山，你想出去实习，老板想你做实验室的工作，不一致的目标导致冲突。作为过来人，反思一下，谁都没有错，站在不同的角度思考问题，老板是很有道理的，这个时候只能看如何跟老板沟通。进了公司，类似的情况肯定也会时有发生，和老板就一些问题意见不一致。不过退一万步讲，如果没有到那种你做的工作一点都不敢兴趣的地步（否则你早就离开了），我的体会是尽可能多地从老板的角度想一下问题。为什么？老板带领团队肯定是想做出东西来，整个团队的大目标是一致的，老板肯定希望团队能够健康快速平稳地发展，每个人都能够有所收获（个人能力以及福利待遇），他看问题和我们看问题的角度肯定不一样，他的很多做法我相信肯定有他的道理和相应的支撑。所以，出现了不一致怎么办？找老板沟通，就一些具体的问题讨论，有效地把一些看法讲清楚，本着大目标一致的原则，寻找共赢。（第一年，我的体会是少一些个性发挥，多一些踏实出活，多观察多干活，少说话，该说的一定说，没把握的或者太天马行空的再酝酿一下）。</p>

<p>让我们回想一下，学生时代每个人都属于一个班级，然后在求学的某一个阶段，同学关系相对稳定（很少有同学随意到别的班级去了，当然有转校的，但是这种情况非常少），也就是说，你的外界环境相对少变化。工作之后，情况会变得完全不同，每个人都会有自己的职业发展轨迹和想法，你入职的第一天就可能会看到身边即将成为同事的哥们正在收拾东西准备下一段旅程了。时不时地，你会收到一些邮件说“Today is my last working at&hellip;” 或者“Friday will be my last working day&hellip; let&rsquo;s have lunch
together”，一开始你可能会觉得不理解甚至惊愕，咋回事？在这工作不是挺好的吗？昨天还跟大家谈笑风生的同事，也许今天就是共事的最后一天，学生时代毕业的日期可以预期，身边的同事谁会下一个离开没有预期。接受它，这就是工作和市场，人才流动是行业发展和个人发展的必然。</p>

<h2>想做的和该做的</h2>

<p>这个其实是想说如何把自己的目标和兴趣，跟团队和老板的整体目标尽量地align起来。Work what you like, like what you
work！需要搞明白的是，来公司工作是为了创造价值的，虽然说成“给老板打工“有些欠妥当，但试想一下，如果你是老板，你喜欢什么样的员工？我的答案是，主动努力地去解决老板的问题，为什么？老板的问题通常就是项目如何往前推进，如何解决项目里面的一些难题，解决这些问题就是在帮老板解决问题，就是这么简单。我觉得，这是该做的。扩展一点，不满足于完成自己被分配的工作，主动去承担问题解决的责任，从项目大的scope多一些思考并时常跟老板沟通（随时去办公室或者利用1:1 meeting的机会），这是一个良性的互动，你会收获很多。</p>

<p>有时候很多工作的人会抱怨，“唉，我做的工作很没意思，我其实想去做&hellip;”，这是想做的。这里可以分两方面解读这个想法。一，确实对某一个技术领域感兴趣，想去探索。没问题，做好本职工作，你会有时间的。或者，尽可能去把自己的兴趣和做的项目align起来，这个要看机会，如果工作上暂时没有好的机会，去开源社区发挥自己的光和热也是很好的选择嘛。没有人能抑制你的兴趣，所以这个方面问题不大。二，好高骛远型的，一边说着手头的工作无趣，却不能把工作做到得心应手，这就是一个非常危险的想法了，这只会导致消极的工作态度，随之而来的是差的工作绩效（然后，你可以再发挥想象力了&hellip;）。我的观点，任何工作，当你做出成绩的时候，成就感本身就是乐趣。So,
do it, do it greatly!</p>

<h2>丛林法则和市场决定价值</h2>

<p>在工作岗位上，合作和竞争是并存的（学生时代不也是如此吗），且比学生时代来的强烈不少。不管愿不愿意承认，职场犹如一个丛林，优胜劣汰无时无刻不在上演。初入职场，没啥体会，随着对职业发展路线的了解以及对所在工作环境的分析，丛林法则的想法会自己钻到你的脑子里。Be nice to everybody is not important, the most important thing is, get your job done, greatly and gracefully. Never be afraid to fail, always try to solve problems. Run, with the sense of crisis.
你必须向前跑，且快速地跑，竞争是无情的（说的略夸张，可这就是事实不是吗）。</p>

<p>市场不尊重传统，它只尊重创新。职场丛林里面的人展开残酷的市场竞争，用创新去颠覆，去开拓，去“屠杀”。当你按部就班的工作没什么波澜的时候，思考一下，你正在平庸的路上越走越远（享受生活不代表平庸，不代表就可以安于现状不努力）。反思一下，我的价值在哪里？几何？市场需要的价值是什么？相信我，你的生活不会因此变得无趣，充满了工作而丧失了生活情趣。你的市场价值的提升会带给你也许任何都给不了你的进步感和成就感，然后你的世界会更加开阔:&ndash;)</p>

<p>（决没有任何强推价值观的想法，看到本文的人权当看看热闹就好：）发现自己工作后变懒了，博客过了一年没更新了，罪恶感上升啊，这一篇文章也给我拖了一个季度了，hustcalm于2016-11-12 12:52:24)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something About SSE and Beyond]]></title>
    <link href="http://hustcalm.me/blog/2015/12/12/something-about-sse-and-beyond/"/>
    <updated>2015-12-12T11:15:30+08:00</updated>
    <id>http://hustcalm.me/blog/2015/12/12/something-about-sse-and-beyond</id>
    <content type="html"><![CDATA[<p>We happen to know CPU is the core worker of every single computer, however, not everybody cares much about the instruction set architecture. I&rsquo;m quite interested messing up with all these stuff and by taking the brownbag chance of my group, I give a somehow preliminary talk on SSE.</p>

<!--more-->


<p>Everything starts with SIMD (Single Instruction Multiple Data) before we talk about SSE (Streaming SIMD Extensions). It&rsquo;s kind of parallezation technique on data level utilized by hareware (here processor). Dedicated to boost multimedia applications, like image processing, specch related algorithm, etc. SSE on Intel CPUs, as it evloves, we have AVX (Advanded Vector Extensions) now. Also, we have NEON on ARM.</p>

<p>If you happen also have interest, you may refer to my slides <a href="http://www.slideshare.net/calmli/something-about-sse-and-beyond">Something about SSE and beyond</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[找工作的一点经验和教训]]></title>
    <link href="http://hustcalm.me/blog/2015/12/12/zhao-gong-zuo-de-yi-dian-jing-yan-he-jiao-xun/"/>
    <updated>2015-12-12T11:14:31+08:00</updated>
    <id>http://hustcalm.me/blog/2015/12/12/zhao-gong-zuo-de-yi-dian-jing-yan-he-jiao-xun</id>
    <content type="html"><![CDATA[<p>转眼参加工作已经四个月又半了，虽然也还算是初入茅庐的小菜，不过也有自己的一些思考，结合之前找工作的经历，在这里简单谈一些“经验和教训”吧。</p>

<p>找工作还是得突出在“找”上，且大多数情况下是人“找”工作，极少数的情况下会出现工作“找”你（这里我们不考虑猎头社招之类的，特指校招）。首先可以明确的，找工作的时候其实就是匹配你的skill和工作内容的匹配程度，以及你的品性和未来同事的匹配程度，明确了这一点其实准备起来还是可以非常有针对性的。不要太考虑自己的专业背景，专业院校，“英雄不问出处”，问一下自己，想做什么样的工作，哪些公司自己想去，他们需要什么样的人，需要具备怎么样的技能，我目前水平怎么样，匹配程度如何，如果想顺利去这些地方工作，应该怎么做，是不是需要有一个计划，具体又如何实施，如果这一系列的问题你都可以回答自己，或者通过跟他人讨论得出相对明确的答案，那么恭喜你！找工作你已经成功了一半了！</p>

<!--more-->


<p>拿我个人举例，本科读的是机械工程，无奈真的对这个学科提不起兴趣，个人觉得计算机科学真的很有魔力！在ACM集训队经过半年不成功的尝试后，加入学生团队向周围相关专业的人学习，通过实际的项目学习。兴趣导向，基本上确定了未来一定是进入IT行业了。不管是进公司也好，还是创业也好，甚至读个PhD出来，我几乎从来没有对未来想要进入的行业怀疑过。这里的IT，我想说是“信息行业”，不特指软件行业。根据个人经历，可以印证“功夫不负有心人”这句话，中间有大量的迷茫，彷徨，不知所措，痛苦，可正是在这些阶段，是自己飞速成长的时候。真正进入研究生阶段后，才算是转来了一个“跟计算机严重相关”的专业，也是从研究生阶段开始，通过对开源的学习和交流，自己的计算机水平才开始真正走上正轨。说实话，一开始面临找工作的问题，自己心里也不是那么有底的，非CS科班出身，一些知识点很散，不太成体系，导致知识面也许够宽，但蜻蜓点水的情况偏多。这也是非CS专业的人找工作的时候表现出来的一个通病。</p>

<p>俗话说，“预则立，不预则废”，硕士阶段两个大目标其实也挺清晰的-毕业&amp;找工作。这两条主线贯穿始终，借用一位同学的话，你需要花两年的时间，认认真真地去“填”你的简历。所以，找工作真的不是那么一两个月的事情（水平很高的人请忽略），更多地把它当成一个系统的项目来做，往往最后会得到自己满意的结果。接下来简单从几个方面谈一谈如何去做准备工作（特指IT行业），希望能给大家一些启发(更多内容请参考我的slides &ndash; <a href="http://www.slideshare.net/calmli/some-experiences-and-lessons-learnt-from-hunting-a-job">找工作的一点经验和教训</a>)。</p>

<h2>时间表</h2>

<p>这里给出我个人认为比较合理的一个时间安排。研二的寒假开始梳理找工作事宜，推荐《程序员面试金典》的前面几章，思路很清晰。开始制定技术准备的计划，要看的书，要刷的题。基本上3-5月份默默修炼就好，6-7月可以寻找一些实习面试的机会，一来检验自己，二来找面试感觉。8月差不多开始正式战场（有的在7月份，比如去年的FB，这个大家注意留意就好），这时候基本就是笔试面试，总结，准备，再笔试面试，这一阶段有的时候挺微妙的，你可以发现自己前所未有的可以看清楚自己的内心活动，不管是喜悦还是沮丧。这个阶段，你的情绪也会变得更加敏感，突然的一个Offer，冷不丁的一个拒绝，都会在你内心荡起波澜。我是比较好的开局，之后陷入泥潭，后来又慢慢爬出来。虽然面试的进行，心态也会慢慢发生变化，长时间找工作的一大好处就是这个体验了，有很多认真深入思考的机会（有的时候是不得不思考了）。基本上10月的时候高峰期就过去了，这个时候，主战场基本结束了，但是不要过早地撤离，经过浴血奋战，你已经很有战斗的感觉了，所以可以权衡下手里的Offer，学习并体验一下“谈判技巧”，然后再看看有没有更好的机会。顺利的情况下，这是一个丰收的时刻，但难免很多纠结，这个时候注意不要跟身边的人做太多比较，追求自己想要的就好。</p>

<h2>技术储备</h2>

<p>基础的《数据结构》和《算法》个人认为最重要，值得花大时间，因此校招考查很难逃出这个范围（《算法导论》足矣）。我之前没上过这方面的课程（其实有相关课程，但跟没上过基本等效了，有点后悔当时没有认真跟着课堂走，否则可以省不少时间），所以花时间过了一遍《数据结构C语言版），后来花时间看了一部分《算法导论》，感觉十分有用！《操作系统》一定要有基本的了解吧，至少对“线程/进程”有个清醒的认识，《计算机网络》至少了解TCP/IP的基本概念，三次握手，etc。语言层面如果不是特别偏Java，建议用C/C++练习写算法，现在考察的时候这个比较主流的样子（当然这可能是我的主观感受）。C++的《深入理解对象模型》，《STL源码剖析》强烈推荐。其他的书籍参考<a href="http://www.slideshare.net/calmli/some-experiences-and-lessnons-learnt-from-hunting-a-job">slides</a>吧。</p>

<p>如果面“机器学习”，“数据挖掘”的岗位，那要把相关课程过一下，然后基本概念一定要清楚。这里经验不太多，不过多讨论了。总结来说就是，根据你想找的工作岗位，除了基础知识（数据结构和算法），针对性地准备，不要觉得这样功利，遵守游戏规则而已。</p>

<h2>临场表现</h2>

<p>心态第一，笔试面试第二。注意沟通，随机应变。跟人感觉的话，首先是自信，然后是态度端正，绝对谦虚，给面试官足够的尊重。不要过于沉默寡言，该问的要问，该表达的想法要适当表达，但也切忌话太多，言多必失，且太多话真的容易招人反感（个人观点）。</p>

<p>好好做题目，做到自己能够做到的最好程度。面试的过程就是表现自己的过程，把你的思维，思考方式都给面试官看，最好把你好学的一面也表现出来（真切的，不要装）。对于你来说，你是在争取一个Offer。而对于面试官来说，他在寻找一位同事，一位他愿意一起共事的人，知道了这一点，该如何表现其实变得容易了，不是吗？</p>

<h2>知己知彼</h2>

<p>这里特指谈Offer阶段吧，每年都有special啊，白菜价之类的，其实在找工作的过程中，少不了和周围同学的讨论，每年的行业也相对明朗。你自己的水平如何，面试表现如何，开了什么价位，是否匹配，自己完全可以判断的。这里的核心还是手里要有过硬的Offer吧，否则谈起来也不太容易。</p>

<h2>继续跑</h2>

<p>以为找完工作就结束了？Totally wrong！找完工作之后，即使拿到了还算不错的Offer，也真的觉得自己有太多的东西可以加强！So，努力提高自己的市场价值吧，努力的你会拿到自己应得的价的:&ndash;)</p>

<p>No pain, No gain. Good luck, a great job is awaiting:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014这一年]]></title>
    <link href="http://hustcalm.me/blog/2015/01/05/2014-zhe-yi-nian/"/>
    <updated>2015-01-05T11:37:09+08:00</updated>
    <id>http://hustcalm.me/blog/2015/01/05/2014-zhe-yi-nian</id>
    <content type="html"><![CDATA[<p>想一想，总还是要说些什么，书写是为了更好地思考，总结是为了更好地前进。2014年总感觉从没有开始过，也还没有结束，其实一直觉得读研以来总是在连续地往前走，不曾中断似的。不过既然思绪还热乎，先总结一下自己2014的得与失，在另外一篇文章<a href="">13-14一起过</a>中再讨论这“持续”的研究生生涯。</p>

<p>总的来讲，2014有三条主线：</p>

<ul>
<li>做产品</li>
<li>找工作</li>
<li>搞科研</li>
</ul>


<!--more-->


<p>其中第一件事是一个团队在战斗，也证明了团队的确是有战斗力和凝聚力的，嗯，NG继续加油！后两件事情，虽也有他人的沟通交流，比如同学，导师，但更多是一个人在探索，诉求，挣扎，奋斗！下面先按照这三条主线展开，之后再简单谈谈2014的得与失，扯扯生活的其他方面方面。</p>

<h3>做产品</h3>

<p>缘分让五人聚在一起，开始琢磨一款对社会有价值的产品，最终定位在大学生市场，找实习和找工作。找工作这里，有了各种招聘网站，不太好下手。所以，从找实习入手，我们希望打通大学生和企业之间实习生招聘的桥梁。</p>

<p>找实习的流程，看招聘信息->投简历->笔试面试->录用or拒掉->看招聘信息->&hellip;。所以这里有很多的事情可以做，我们基本上只做了第一个环节，那就是把全而优质的实习生招聘信息呈现给大家。做了一款App，叫做《蛙实习》，聚合北邮人论坛，水木清华BBS以及毕业生就业信息网的实习生招聘信息，支持基本的搜索，收藏，分享，etc。</p>

<p>后台服务器买了美团云（一个月254左右），GitHub上付费托管了，买了俩域名，五个人都是兼职工作。每个周日上午聚在一起讨论，嗯，那段时间想想还真有一种幸福的感觉呢。前后三个月，产品就这样上线了，只是在北邮人论坛简单推广了一下，每天大概1000+访问吧，至少我们自己也要找实习，找工作，使用起来还算舒心。技术上倒没有啥难点，不过一个完整的产品开发流程以及运作流程，多少让我们获得了不少一手的经验。</p>

<p>如今团队的成员各自在自己的前线战斗，开发和维护停滞了，产品算是暂时“死掉了”。However，we will make something amazing one day!</p>

<h3>找工作</h3>

<p>也许之后会专门写一个找工作的总结帖，毕竟前后不少时间都在为找工作花心思，这里简单记录一下应聘经历和心里路程。</p>

<p>研二的寒假有了找工作的意识，简单翻了翻《程序员面试金典》，这本书和《剑指offer》和《编程之美》被我自己称为三剑客。开学后，各大实习招聘如潮涌来，阿里巴巴，腾讯，微软，网易游戏，etc。我比较保守，只面了阿里，当时说实话有一丝紧张，因为《数据结构》才走马观花过一遍，只能是抱着找经历的心态。第一面阿里妈妈的人，第二面阿里云的人，我自心底是希望去阿里云的，因为当时还把技术排在最高优先级，尤其是云计算的各种技术。这里的插曲是，阿里发offer的纠结，第一批，第二批神马的。最后发了，竟有一丝欣喜，想想真是没见过世面啊。之后是Works
Applications，一家做ERP的日企，薪水很诱人，抱着试一试的心态很努力地准备，成功了！之后去东京参加Tokyo Event，为找工作奠定了一步好棋！回来后，在阿里云短暂实习混经历，这个时候同时做几件事情，阿里实习，实验室的工作，刷leetcode并看书，参加CSDN的开源夏令营（跟着teawater大哥学习），参加面试，etc。</p>

<p>然后是百度，拿到了NLP部门的special，被商搜拒掉。中间心理上有不少起伏，旗开得胜有些自信满满，连续有道，雅虎北研悲剧，又有些生畏。不过，这个时候是对一个考验和成长的最好时刻了，调整下继续战斗，心态多少也更加平和了。总结一条，多大的实力，拿什么样的offer。面Google第一轮，还好，到了第二轮，没抓住第三面的机会（跟面试官多少有些关系，不过最终是自己没把握好），第四面就没啥大感觉了。体会是，Google的面试没有那么困难，一定要自信，展现自己的实力即可！</p>

<p>中间各种纠结，对吧，我想每个人都会有类似的体会，户口啊，待遇啊，未来的发展啊，etc。不多说了，找工作的人都有体会。最后过了六面的微软面试，进入了MSRA，职位是RSDE。自己对这个结局还算满意，最重要的是，自己的努力是值得的！</p>

<h3>搞科研</h3>

<p>从来不觉得科研有什么好搞的，那是之前的想法啦。踏实想做好一个算法，写一篇自己满意的论文，说实话，还是挺费心思的。</p>

<p>研一的课程开了下视野，知道了研究生都在学习些什么，然而到了实验室发现，课本中的东西真的只是基础，是你想把paper读懂的前提知识。研二上学期和一个老师合作一个项目，自己做了绝大部分的工程，最终出差一次，项目顺利结题。之后，开题，自己给自己挖了个大坑。这个坑，就是自己的小论文了。项目结束后，就应该写一篇，锻炼自己的写作能力的。然后很长一段时间，实现一篇论文中的系统，发现自己有太多需要提高。中期的时候，心里略不踏实。</p>

<p>现在投稿了一篇英文文章，跟研二上学期的项目相关的，实验室的老师从idea到最后文章的锐色帮了太多的忙。接下来，希望自己能够认真独立完成一篇文章，体验一下科研的感觉。未来，努力成为一名快乐的科研工作者，也是一条很愿意走的路:&ndash;)</p>

<h3>杂谈</h3>

<p>还有一件事情值得提一下，那就是轮滑，这一年，确定了轮滑成为自己的两大体育项目之一，另外一个是篮球。北京到天津的轮滑之旅，让我认识到自己可以很有毅力，很能坚持。之后的周五晚上，也成为自己的一大放松方式，最重要的是收获的一批朋友。中科院的刷刷们，感谢你们！</p>

<p>2014年，有泪水有欢笑，有成绩有遗憾，2015，看我披荆斩棘，乘风破浪！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Kinect for Windows Using OpenNI and SensorKinect Under Ubuntu 12.04 LTS]]></title>
    <link href="http://hustcalm.me/blog/2014/12/31/playing-with-kinect-for-windows-using-openni-and-sensorkinect-under-ubuntu-12-dot-04-lts/"/>
    <updated>2014-12-31T16:19:56+08:00</updated>
    <id>http://hustcalm.me/blog/2014/12/31/playing-with-kinect-for-windows-using-openni-and-sensorkinect-under-ubuntu-12-dot-04-lts</id>
    <content type="html"><![CDATA[<p>Just a quick recap to make myself feel better after such a struggle for 1 day and hopes it does some help to those who tries to bring <strong>Kinect For Windows</strong> work under Linux, here Ubuntu especially.</p>

<h3>Hardware Device</h3>

<p>Kinect for Windows, not Kinect for XBox, so this post is kind of limited to some senarios. And I&rsquo;m currently using Kinect For Windows Version 1, not the fasion V2.</p>

<!--more-->


<h3>Some Concepts</h3>

<ul>
<li>gspca_kinect</li>
</ul>


<p>A simple Kinect kernel driver which has been integrated in the driver, and works by default on my Ubuntu. Think <strong>V4L</strong> or <strong>UCV</strong>, this driver allows you to access the RGB and depth frames from Kinect. See <a href="http://blog.jozilla.net/2012/03/29/getting-up-and-running-with-the-kinect-in-ubuntu-12-04/">Getting up and running with the Kinect in Ubuntu 12.04</a>. Note however the author is using a Kinct for XBox.</p>

<ul>
<li>OpenNI</li>
</ul>


<p>While, open source Kinect SDK supported by PrimeSense?</p>

<h3>Verify &amp; Install</h3>

<p>Follow <a href="http://choorucode.com/2013/07/23/how-to-get-started-with-kinect-for-windows-on-ubuntu-using-openni/">this</a>, if got compilition error, maybe you are lucky with <a href="https://github.com/avin2/SensorKinect/pull/5">this patch</a>.</p>

<h3>Try Something Cool</h3>

<p>Why not play with <a href="https://github.com/felixendres/rgbdslam_v2">RGBDSLAM</a>?</p>

<h3>Links That Matter</h3>

<ul>
<li><a href="http://choorucode.com/2013/07/23/how-to-get-started-with-kinect-for-windows-on-ubuntu-using-openni/">How to get started with Kinect for Windows on Ubuntu using OpenNI</a></li>
<li><a href="http://blog.jozilla.net/2012/03/29/getting-up-and-running-with-the-kinect-in-ubuntu-12-04/">Getting up and running with the Kinect in Ubuntu 12.04</a></li>
<li><a href="http://pointclouds.org/documentation/tutorials/openni_grabber.php">The OpenNI Grabber Framework in PCL</a></li>
<li><a href="http://mitchtech.net/ubuntu-kinect-openni-primesense/">Ubuntu + Kinect + OpenNI + PrimeSense</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[成长就是蜕变]]></title>
    <link href="http://hustcalm.me/blog/2014/12/26/cheng-chang-jiu-shi-shui-bian/"/>
    <updated>2014-12-26T08:57:39+08:00</updated>
    <id>http://hustcalm.me/blog/2014/12/26/cheng-chang-jiu-shi-shui-bian</id>
    <content type="html"><![CDATA[<p>好几个月没来这块自留地了，觉得甚是不妥，心里也不那么踏实。最近，脑海里常浮现两个字，那就是“成长”；成长在每一个人看来也许含义都大不相同，我理解的成长“就是蜕变”。</p>

<p>我想说什么呢？蜕变是一个过程，最直观的比喻便是“破茧成蝶”，经历了磨砺和长时间的积累，才终有之后绚丽的身姿；蜕变也是一种选择，最近老在想，通过观察，也察觉到，这个世界和社会真的是缤纷多彩（乱七八槽），每一个独立的个体都面临着各种各样的选择，把选择简化一下，用几对词来描述，可以有好几个方面的分析，积极 V.S. 消极，向上 V.S. 退后，大局 V.S. 个人，克服 V.S. 退缩，责任 V.S. 散漫，蜕变 V.S. 自缚！</p>

<!--more-->


<p>人终究是复杂的，也有各种纠结，这个时候仿佛“简单一点”的人，都会受到他人的羡慕，为什么呢？纠结来源于选择，而终极原因则是欲望罢了，复杂就在这里了，为了得到太多的东西，终究是得推着自己“忙碌”，忙忙碌碌心情浮躁，也就很难做一个“简单一点”的人了。古人说，“无欲则刚”，想想还真是人间真理，四个人说透了人类痛苦的来源之一，可在这个“精彩”的世界，有着太多的诱惑，哪个“傻子”能抵制得住哩！因为，大家都是“正常人”嘛！没有读过“人性的缺点”之类的书，但是如果用“准许为人”这么高端积极的词汇为自己的“不作为，懒惰，自私”开脱，那可真是可笑哩！</p>

<p>写到这里，忽然想起了“鲁迅先生”，在林林总总的大文豪中，他老人家是我最喜欢的，为什么？读书少，《语文》课本上鲁迅的文章太多，又偏巧自己喜欢“鲁迅”的行文风格，什么“我家门前有两棵树，一颗是枣树，另一颗还是枣树”的幽默，抑或“这个世界上本没有路，走的人多了，也就有了路”的经典，都让人十分喜爱。小时候买的不多的“文学书”中，《鲁迅文集》是一本翻的最多了的，可那时候啥都不懂，根本不知道“鲁迅先生”笔下文字的重量和分量，这着实是“脱节严重”！说到这里，前段时间的电影《黄金时代》是我在课本之外，通过电影银幕，对鲁迅先生认识最深的一次再教育，《语文》课上的那个“思想家，革命家，教育家”如此虚无缥缈，因此当我在银幕上看到“先生”本人，心里还真是有点激动。所以，那部长达3小时的电影，我看得津津有味，因为“鲁迅先生”是主角嘛，二萧给人的触动倒没有那么大了。</p>

<p>蜕变是“质变”，但确是在无数“量变”之后自然发生的。天将降大任于斯人，必先苦其心志，劳其体肤，这个过程都是“量变”。当斯人能够接过“大任”，那必是“质变”发生之时！任何过于快速的“质变”都是不自然的，也是畸形的，也是无法担当大任的。拿技术圈子来说，最近团队的一位老师就“牛人的壁垒”展开讨论，提出“技术壁垒”，“时间壁垒”和“成果壁垒”，并总结出：（1）大家要建立自己的技术壁垒并保持下去；（2）技术壁垒需要持续的时间投入，要有耐心，这就是时间壁垒；（3）把技术壁垒转化为成功、更容易被人认可的产品，更有说服力。在这里面，我觉得“持续的时间投入”是核心点，对于一门技术，踏实积累一年，定能略窥门径！假以三年五载，则一技术专家成矣！为什么如此简单的道理，读了大学本科的人，极少数成为了大家眼中的“牛人”和“技术专家”呢？呵呵，自己悟！</p>

<p>距离起初写这篇文章到现在，不觉已有两个月的光阴了，真是后悔当时没有一气呵成，搞得现在竟不知自己想说些什么了。如此，那就再发散一下无妨。</p>

<p>成长是一个扩展视野的过程，是对一个人自身的升华！一句话说得好，只缘身在此山中。最近一直在想，其实世界上很多的人，很多的时间，都是带着错误的认知在生活的。很多时候，矛盾什么的，也许都来自于一个人的无知和夜郎自大。人们仿佛都喜欢活在自己的世界里，好比井底之蛙，它的世界其实很大，只要大到它认为世界是这个样子的就可以了。在历史的长河中，好像认知到世界视野级别的人，都能够或多或少留下一笔。那么如何增加一个人的认知呢？我觉得“读万卷书，行万里路”是一个很好的概括，再加上“思万家事”，慢慢地一个人会形成一套自己的人生观，价值观，而世界观则一定程度上取决于你是如何观世界的。</p>

<p>一个人在成长的过程中会扮演不同的角色，刚开始比如说是儿子，女儿，孙子，孙女，etc。然后是学生，学徒，同学，朋友，etc。之后也许还有战友。走上工作岗位，也就是大家说的进入社会吧，又有职工，同事，老板，各种工种，比如程序员，etc。喜欢有个家的，还会从男女朋友进化到婚姻阶段，成为丈夫和妻子，之后成为父亲和母亲，一大家子，七大姨八大姑，etc。还有很多其他的社会角色，这里就不啰嗦了。我想说什么呢？不同的角色的思考方式是会发生不小的变化，且这种变化也是自然的，一个人在成长的过程中需要试着去接受各种各样的变化，去适应并做好自己的角色。所以，肯定青春期会动荡一下，这里忽略很多其他的因素不提了，比如你想有个女朋友啊什么的，etc。在角色转换的过程中，现代社会貌似存在着很多的失控，比如说之前的包办婚姻，如今的相亲，结为夫妻的二人，对于发生的角色变化无所适从，自然就会滋生不少问题。失控大多来自于外界的压力，父母的压力，亲戚朋友的评论，etc。其实很多时候，我在想，学生这样一个角色，尤其是本科时期的时候，真的是全世界最自由的一批人啊，如果7年前，我有此觉悟，我的本科一定会更加折腾一些的！不过说到这里，便稍稍印证了，还是事后诸葛亮多，很多事情，很多阶段，回头看的时候，心里明白得很，而就在当时心里糊涂得很。没有关系，这就是成长的烦恼吧，在成长的过程中，不断进化自己，才能越走越安心。</p>

<p>小的时候，大家都拥有单纯的梦想或者理想，我想当一名科学家，我想做一个宇航员探索太空，我想做一个老师，医生，警察，飞行员，etc。可是又有多少人实现了自己的理想呢？随着年龄的增长，理想越来越丰满，现实却骨干地让人失望。拿好的成绩，考上好的大学，谈一个漂亮的女朋友，找一份好的工作，过上幸福生活之后，却早已发现，理想什么的，早已经和自己相距十万八千英尺了。我个人的分析，有两个方面导致“理想的流产”。第一个就是确定理想的时候，天马行空，只是心中一份美好的想象，当然小孩子的时候这个很正常。不过此时，父母就起了致关重要的作用了，如果做充分的沟通，对理想做一下修饰，也许会好很多。如此，很快，小孩子也许就会被淹没在作业和考试中，和理想说再见了。长大后，发现，哦，原来自己没啥理想，这可咋办？第二个就是，随着阅历的增长，渐渐认识到自己实力有限，或者说努力程度有限，无法支撑自己的理想。如果是前者，那么也许真的需要调整一下自己的抱负了，不要跟自己的IQ和EQ较劲，否则会头破血流。而对于后者，则取决于心态了，相应的努力会得来应有的回报。No pain, no gain！</p>

<p>不过，到了一定阶段，抛却理想不谈，每个人会慢慢认识到自己期望的生活方式。想周游世界？想老婆孩子热炕头？想大干一番，千万富翁？还是好好上班，好好锻炼，好好对待每一个人？一旦确定了生活方式，大家都会舒服不少，至少不会被太多的选择煎熬了。这个时候心态好像成为了关键，因为每个人的生活方式大大不同，你选择了自己的，那就最好尊重她，净重她，而不是各种不满意，嫉妒他人的“逍遥生活”。当然了，穷则变，生活方式肯定可以通过一个人的努力得到改变或者说改善。</p>

<p>吾日三省吾身，温故而知新，这都是对每一个人的金玉良言。大和小，真的只在一念之间。活在你小小的世界中，你的价值观会试图匹配你的世界。而活在大千世界，你的认知会不断适应你对这个世界的观察。这也是我发现人生很有意思的一点，之前你觉得很困难的事情，慢慢却变成了你擅长的东西。之前你认为是全世界第一定律的东西，却在某一个阶段被自己彻底推翻。嗯，这就是蜕变吧，变化是永恒的，拥抱变化才是我们的生存之道！</p>

<p>当你未对这个世界有足够的认识，那就继续保持一颗美好的好奇心，不灭的热情快乐地探索吧。吾生也有涯，蜕变也无涯！</p>

<p>When you change the way you think about the world, you can change the world you think about!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With ElasticSearch and Plugin Development]]></title>
    <link href="http://hustcalm.me/blog/2014/08/10/getting-started-with-elasticsearch-and-plugin-development/"/>
    <updated>2014-08-10T18:33:53+08:00</updated>
    <id>http://hustcalm.me/blog/2014/08/10/getting-started-with-elasticsearch-and-plugin-development</id>
    <content type="html"><![CDATA[<p>Coming across to <code>ElasticSearch</code> when preparing for the programming chanllege held by WorksApplications in Tokyo Event, and falling love with her after then. Well, with no much new techonoligies involved, <code>ElasticSearch</code> is definitely a beautiful piece of software and a successful product. Claimed that with the core search engine powered by <code>Lucene</code>, providing <code>RESTful interface</code> and born as a distributed and scheme-free search oriented product, <code>ElasticSearch</code> has boosted the huge
business of <strong>Github</strong> with billions of lines and <strong>Stackoverflow</strong> with billions of Q&amp;A.</p>

<p>After digging some 101 tutorials around, I found it easy to set up <code>ES</code>(abbreviated for ElasticSearch and will use afterwards) and begin to play in 10 minutes. However, to understand what is going on underhood and what is the most tricy and interesting part, also to those who try to develop plugins to enpower <code>ES</code>, I will share something which would be useful for newbies. There are already tons of tutorials online, to same your time, please see
<a href="https://github.com/hustcalm/elasticsearch-getting-started">elasticsearch-getting-started</a> hosted on my github for a good cheat sheet.</p>

<!--more-->


<h3>Basic Concepts of ES</h3>

<p>Someone got to do the dirty work when something happens so naturally and gracefully. <code>ES</code> is graceful enough to just give users <code>RESTful</code> interfaces and everything is done! You can just do <code>CRUD</code> operations as naturally as just sending some HTTP request to some urls according to some predefined rules. So, we know at this moment that, <code>RESTful</code> interfaces are a great method to bridge <code>ES</code> and <code>end users</code>. So, for the <code>CRUD</code>, what are mainly involved?</p>

<p>To start with familiar concepts, let&rsquo;s go with <code>Database</code>. OK, when you get a <code>Database</code>, it is basically a container for all your data. You can create varies of <code>Tables</code> in a <code>Database</code>, for a specified <code>Table</code>, you would firstly define a scheme for it, as the first column should be <strong>_id</strong> as integer numbers, the second should be <strong>_name</strong> as strings, etc. Then in a <code>Table</code>, you would have many <code>Rows</code>, each <code>Row</code> relates to a specified <code>record</code>. If you know this well, it&rsquo;s easy to catch up
with <code>ES</code>, after some adaptations to shift with the search engine background.</p>

<p>Forget about the storage engine for good, let&rsquo;s see what is included in a <code>RESTful</code> url.</p>

<h4>Index</h4>

<p>An <code>index</code> is basically a <code>Table</code> to contain varies of <code>Documents</code>, here <code>Document</code> again means <code>record</code>. So basically when you do a search, you are searching on an <code>index</code> or multiple <code>indexes</code> at the same time. No trick at all here, <code>ES</code> will maintain <code>inverted index</code> for each <code>field</code> of each <code>document</code> in an <code>index</code>, also some other <code>inverted index</code> will be generated for search, so an action of search is actually matching the <code>query</code> or user input keywords with the <code>inverted index</code>
records. For easy understanding, think it as a book, when you try to lookup a word, instead of searching for it from the very beginning page by page, just see the <code>Word Index</code> for a happy ending.</p>

<h4>Type</h4>

<p>Yes, <code>ES</code> can have different kinds of <code>Documents</code> in an <code>index</code>. What does that mean? In <code>MySQL</code>, can you have different kinds of <code>Records</code> in a single <code>Table</code>? Found it impossible, huh? <code>ES</code> can save you for free, here different kinds, we can also say different <code>Types</code>. Think it this way, you have many documents in an <code>index</code>, and not all the documents are the same kind, let&rsquo;s say, doc1 contains just a long text paragraph, doc2 contains another number indicating the number of
words of one paragraph besides a long text paragraph, doc3 maybe contain another field for storing some comments and doc 4, etc. Thus we can have many kinds of <code>Documents</code> in a single <code>Index</code>, maybe each document is one kind, or there are m tpyes for n documents(n >= m). Got any idea about this?</p>

<h4>Mapping</h4>

<p>Claimed as <code>scheme-free</code>, the magic is really played by <code>guess</code> or <code>a default scheme framework</code>. If you try to creat an <code>index</code> and put <code>documents</code> in it, <code>ES</code> will try to construct the index according to a default manner, for example, storing the field as <code>string</code> and <code>anylyzed</code> using the default anylyzer.(An anylyzer is used to splitted a sentence or phrase into independent words, in order to let people search partial keywords in a document.) If the dafault scheme is just working good,
you need not do anything. However, unfortunately this is not always the case, so we just mentioned that we have many <code>Types</code> of <code>Documents</code> in an <code>Index</code>, to change the way that <code>ES</code> is treating how each <code>Type</code> of <code>Document</code> is processed, we can specify a <code>Mapping</code> for each <code>Type</code>. Well, for <code>Mapping</code>, it is actually a <code>scheme</code> specified by user, isn&rsquo;t it?</p>

<h4>ID</h4>

<p>Well, well, finally we can put our <code>Documents</code> now. For each document, specify a <strong>ID</strong> when uploading to <code>ES</code>, such as <code>PUT /megacorp/employee/1</code> and <code>PUT /megacorp/employee/2</code>, here <code>1</code> and <code>2</code> are both <code>IDs</code>. Again for retrieving a specified document from <code>ES</code>, specify the <strong>ID</strong> also, as <code>GET /megacorp/employee/1</code>.</p>

<p>OK, I think you are ready to go after being familiar with the basic concepts. Let&rsquo;s talk about something about <code>search</code>.</p>

<h3>Search using ES</h3>

<p>Simple and beautiful, <code>ES</code> is smart enough for basic searcing, even real-time suggestions and near real-time search is supported. So you want to search?</p>

<pre><code>GET /megacorp/employee/_search
GET /megacorp/employee/_search?q=last_name:Smith
</code></pre>

<p>Try this!</p>

<p>For more sophiscated searches, try using <code>Query DSL</code>, like:</p>

<pre><code>GET /megacorp/employee/_search
{
    "query" : {
        "match" : {
            "last_name" : "Smith"
        }
    }
}
</code></pre>

<p>I won&rsquo;t talk too much about <code>Query DSL</code> here, go dig the <a href="http://www.elasticsearch.org/guide/en/elasticsearch/client/java-api/current/query-dsl-queries.html">ES Reference</a>.</p>

<h3>Client API</h3>

<p>As <code>Luncene</code> is born with <code>Java</code> blood, <code>Java</code> is the native client API for <code>ES</code>. Everything you can do with <code>RESTful</code> interfaces, you can get it done with <code>Java API</code> or other programming language bindings. However, comparing to the <code>RESTful</code> style, all the bindings suck a little especially when having to construct complicated searches or aggregations, using <code>Qeury DSL</code> is too much graceful than any <code>Client API</code>.</p>

<p>The <a href="http://www.elasticsearch.org/guide/en/elasticsearch/client/">ES Reference</a> has detailed documentation on each <code>Client API</code>, go and find your own one.</p>

<h3>Plugin Development</h3>

<p>Well, as the development of <code>ES</code> is evolving too rapidly, I guess, the APIs and even fundamental classes are not stable enough, so for plugin development, there are not good official tutorials to follow. However, some good guys who have the training maybe, give some useful references to getting people started. Or, maybe they just hack the source code to figure out how, admirable! For <code>ES</code> plugins, there are basically two types, one is <strong>site</strong> plugin, the other is <strong>non-site</strong> plugin.</p>

<h4>Site Plugin</h4>

<p>As we said, all the <strong>CRUD</strong> operations can be done through <strong>RESTful</strong> interfaces, so basically speaking, a <strong>site</strong> plugin is a wrapper or delegation for easier <code>RESTful</code>, mainly focusing on the <strong>front-end</strong>. Any programming language or tools which are capable of sending and receiving of HTTP requests can be used, however <code>JavaScript</code> seems to be the most chosen one since it is so flexible and repid prototyping.</p>

<p>For a great example, see <a href="http://mobz.github.io/elasticsearch-head/">ElasticSearch Head</a>.</p>

<h4>Non-Site Plugin</h4>

<p>As a <strong>site</strong> plugin, we are actually doing the user end work, as we are not playing with the <code>ES</code> source code or core component directly. For <strong>non-site</strong> plugin, we will write some <code>Java</code> code, inherate from some abstract classes relating to <code>Plugin</code> and <code>Module</code>.</p>

<p>A <code>Plugin</code> will be instanced when loaded by <code>Plugin Manager</code> of <code>ES</code>, then the related <code>Modules</code> will be loaded, and the real job will be done through <code>Module Handlers</code>.</p>

<h4>Good Example</h4>

<p>For a complete reference and vivid example for plugin development, see <a href="https://github.com/hustcalm/elasticsearch-getting-started">elasticsearch-hotsearch</a> developed by <strong>Cgroups</strong> during the <strong>Tokyo Event</strong>.</p>

<h3>Summary</h3>

<p>For good overview and other references after reading this blog, see my github repo <a href="https://github.com/hustcalm/elasticsearch-getting-started">elasticsearch-getting-started</a>.</p>

<p>We learn basic concepts of <code>ES</code> here, knowing <code>Client API</code> and <code>Plugin Development</code>, however, we don&rsquo;t cover <code>Distributed</code> and other interesting parts of <code>ES</code> here. By starting from here, I believe you are capable of digging deeper by yourself by referencing the official site and other guys&rsquo;s posts. Though the official documentation is under construction by the time when writing this post, people like you who read this post will find it no difficulty to move on:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGTP中增加对GDB命令“set Trace-buffer-size”的支持 - Week 4]]></title>
    <link href="http://hustcalm.me/blog/2014/08/10/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-4/"/>
    <updated>2014-08-10T18:33:09+08:00</updated>
    <id>http://hustcalm.me/blog/2014/08/10/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-4</id>
    <content type="html"><![CDATA[<h3>CSDN开源夏令营 &ndash; 第四周工作总结</h3>

<p>本周主要是在回顾“set trace-buffer-size”完成通信的基础上，对于指定参数size的处理，比如指定-1或者unlimited的时候，在KGTP端该如何做解析，以及该如何处理此时的buffer size。同时，根据“开题报告&#8221;的进度，中期检查的任务已经完成。对Trace Buffer的实现，做了初步的调研。</p>

<h4>1. GDB和KGTP通信实现的回顾</h4>

<p>利用GDBRSP，即GDB Remote Serial Protocol，GDB远程串行通信协议。简单来说，用于GDB远程调试发包，但是也支持File I/O和Console，而KGTP正是利用了GDBRSP对于File I/O的支持，完成GDB和KGTP的通信，在接受到GDB发送的Packet后，KGTP进行解析。而通信的介质则是通过debugfs或者其他kernel space和user space进行数据交换的接口进行的。
具体实现，可以参考上一篇博文[1]。</p>

<!--more-->


<h4>2. GDB的Packet格式</h4>

<p>GDB向target发送的Packet必须遵守提前设定的约定，才能被target按照相应的规则解析处理。关于GDB的Packet格式，可以参考[2]，这里详细列出了所有的预定义的指令和它们相应的响应数据。如果想进一步了解GDBRSP，可以阅读[3]。由于KGTP对Trace Point最感兴趣，因此我们也最关注Tracepoint Packets，只要有两种，分别以Q和q开头，其中Q表示设置命令，即set，而q表示查询命令，即query，具体看[4]。关于如何开始和停止Trace Experiments，看[5]。GDB对于用户输入的commands，会转换后封装成Packet，通过GDBRSP发给target，因此需要结合着[4]和[5]才能把对某一个命令如何进行包解析搞清楚，比如用户输入”tstart“，则会发送一个”QTStart“的包。</p>

<h4>3. KGTP对GDB的Packet的处理实现</h4>

<p>有了GDB和KGTP的通信的基础设施，比如DebugFS和GDBRSP，正常的文件读写即可完成GDB和KGTP的数据交换。而为了完成相应的任务，KGTP必须对接收到的GDB的Packet进行解析，而我们又知道了GDB得Packet格式，因此只需要对接收到的数据按照格式做相应的解析即可。</p>

<p>在<code>gtp.c</code>的<code>gtp_write</code>函数，针对接收到的GDB包做了具体的解析，具体代码如下：</p>

<pre><code>static ssize_t
gtp_write(struct file *file, const char __user *buf, size_t size,
      loff_t *ppos)
{
    char        *rsppkg = NULL;
    int     i, ret;
    unsigned char   csum;
    int     is_reverse;

    if (down_interruptible(&gt;p_rw_lock))
        return -EINTR;

    if (size == 0) {
#ifdef GTP_DEBUG
        printk(GTP_DEBUG "gtp_write: try write 0 size.\n");
#endif
        goto error_out;
    }

    size = min_t(size_t, size, GTP_RW_MAX);
    if (copy_from_user(gtp_rw_buf, buf, size)) {
        size = -EFAULT;
        goto error_out;
    }

    if (gtp_rw_buf[0] == '+' || gtp_rw_buf[0] == '-'
        || gtp_rw_buf[0] == '\3' || gtp_rw_buf[0] == '\n') {
        if (gtp_rw_buf[0] == '+')
            gtp_rw_size = 0;
        size = 1;
        goto out;
    }

    if (size &lt; 4) {
        size = -EINVAL;
        goto error_out;
    }
    /* Check format and get the rsppkg.  */
    for (i = 0; i &lt; size - 2; i++) {
        if (gtp_rw_buf[i] == '$')
            rsppkg = gtp_rw_buf + i + 1;
        else if (gtp_rw_buf[i] == '#')
            break;
    }
    if (rsppkg &amp;&amp; gtp_rw_buf[i] == '#') {
        /* Format is OK.  Check crc.  */
        if (gtp_noack_mode &lt; 1)
            gtp_read_ack = 1;
        size = i + 3;
        gtp_rw_buf[i] = '\0';
    } else {
        printk(KERN_WARNING "gtp_write: format error\n");
        size = -EINVAL;
        goto error_out;
    }

    wake_up_interruptible_nr(&gt;p_rw_wq, 1);

    up(&gt;p_rw_lock);
    if (down_interruptible(&gt;p_rw_lock))
        return -EINTR;

#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_write: %s\n", rsppkg);
#endif

    /* Handle rsppkg and put return to gtp_rw_buf.  */
    gtp_rw_buf[0] = '$';
    gtp_rw_bufp = gtp_rw_buf + 1;
    gtp_rw_size = 0;
    ret = 1;
    is_reverse = 0;
    switch (rsppkg[0]) {
    case '?':
        if (gtp_current_pid == 0)
            snprintf(gtp_rw_bufp, GTP_RW_BUFP_MAX, "S05");
        else
            snprintf(gtp_rw_bufp, GTP_RW_BUFP_MAX, "T05;thread:p%x.%x;",
                 gtp_current_pid, gtp_current_pid);
        gtp_rw_size += strlen(gtp_rw_bufp);
        gtp_rw_bufp += strlen(gtp_rw_bufp);
        break;
    case 'g':
        ret = gtp_gdbrsp_g();
        break;
    case 'm':
        ret = gtp_gdbrsp_m(rsppkg + 1);
        break;
    case 'Q':
#ifdef GTP_RB
        /* This check for "tfind -1" and let GDB into step replay.
           XXX: just test on X86_64.  */
        if (gtp_replay_step_id) {
            if (strcmp("QTFrame:ffffffff", rsppkg) == 0) {
                ret = 0;
                goto switch_done;
            } else
                gtp_replay_reset();
        }
#endif
        if (rsppkg[1] == 'T')
            ret = gtp_gdbrsp_QT(rsppkg + 2);
        else if (strncmp("QStartNoAckMode", rsppkg, 15) == 0) {
            ret = 0;
            gtp_noack_mode = -1;
        }
        break;
    case 'q':
        if (rsppkg[1] == 'T')
            ret = gtp_gdbrsp_qT(rsppkg + 2);
        else if (rsppkg[1] == 'C') {
            snprintf(gtp_rw_bufp, GTP_RW_BUFP_MAX, "QC%x",
                 gtp_current_pid);
            gtp_rw_size += strlen(gtp_rw_bufp);
            gtp_rw_bufp += strlen(gtp_rw_bufp);
            ret = 1;
        } else if (strncmp("qSupported", rsppkg, 10) == 0) {
#ifdef GTP_RB
            snprintf(gtp_rw_bufp, GTP_RW_BUFP_MAX,
                 "QStartNoAckMode+;ConditionalTracepoints+;"
                 "TracepointSource+;DisconnectedTracing+;"
                 "ReverseContinue+;ReverseStep+;"
#if (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,30))
                 "EnableDisableTracepoints+;"
#endif
                 "qXfer:traceframe-info:read+;");
#endif
#if defined(GTP_FRAME_SIMPLE) || defined(GTP_FTRACE_RING_BUFFER)
            snprintf(gtp_rw_bufp, GTP_RW_BUFP_MAX,
                 "QStartNoAckMode+;ConditionalTracepoints+;"
#if (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,30))
                 "EnableDisableTracepoints+;"
#endif
                 "TracepointSource+;DisconnectedTracing+;");
#endif
            gtp_rw_size += strlen(gtp_rw_bufp);
            gtp_rw_bufp += strlen(gtp_rw_bufp);
            ret = 1;
        }
#ifdef GTP_RB
        else if (strncmp("qXfer:traceframe-info:read::",
                   rsppkg, 28) == 0)
            ret = gtp_gdbrsp_qxfer_traceframe_info_read(rsppkg
                                    + 28);
#endif
        else if (strncmp("qRcmd,", rsppkg, 6) == 0)
            ret = gtp_gdbrsp_qRcmd(rsppkg + 6);
        else if (strncmp("qAttached", rsppkg, 9) == 0) {
            snprintf(gtp_rw_bufp, GTP_RW_BUFP_MAX, "1");
            gtp_rw_size += 1;
            gtp_rw_bufp += 1;
        }
        break;
    case 'S':
    case 'C':
        ret = -1;
        break;
    case 'b':
        rsppkg[0] = rsppkg[1];
        is_reverse = 1;
    case 's':
    case 'c':
        ret = gtp_gdbrsp_resume (rsppkg[0] == 's', is_reverse);
        break;
    case 'v':
        if (strncmp("vAttach;", rsppkg, 8) == 0) {
#ifdef GTP_RB
            if (gtp_replay_step_id)
                gtp_replay_reset();
#endif
            ret = gtp_gdbrsp_vAttach(rsppkg + 8);
        } else if (strncmp("vKill;", rsppkg, 7) == 0) {
#ifdef GTP_RB
            if (gtp_replay_step_id)
                gtp_replay_reset();
#endif
            /* XXX:  When we add more code to support trace
               user space program.  We need add more release
               code to this part.
               Release tracepoint for this tracepoint.  */
            ret = 0;
        }
        break;
    case 'D':
#ifdef GTP_RB
        if (gtp_replay_step_id)
            gtp_replay_reset();
#endif
        gtp_gdbrsp_D(rsppkg + 1);
        ret = 0;
        break;
    case 'H':
        ret = gtp_gdbrsp_H(rsppkg + 1);
        break;
    case 'Z':
    case 'z':
        if (rsppkg[1] == '0')
            ret = gtp_gdbrsp_breakpoint(rsppkg + 3,
                            (rsppkg[0] == 'Z'));
        break;
    }
switch_done:
    if (ret == 0) {
        snprintf(gtp_rw_bufp, GTP_RW_BUFP_MAX, "OK");
        gtp_rw_bufp += 2;
        gtp_rw_size += 2;
    } else if (ret &lt; 0) {
        snprintf(gtp_rw_bufp, GTP_RW_BUFP_MAX, "E%02x", -ret);
        gtp_rw_bufp += 3;
        gtp_rw_size += 3;
    }

    gtp_rw_bufp[0] = '#';
    csum = 0;
    for (i = 1; i &lt; gtp_rw_size + 1; i++)
        csum += gtp_rw_buf[i];
    gtp_rw_bufp[1] = INT2CHAR(csum &gt;&gt; 4);
    gtp_rw_bufp[2] = INT2CHAR(csum &amp; 0x0f);
    gtp_rw_bufp = gtp_rw_buf;
    gtp_rw_size += 4;

out:
    wake_up_interruptible_nr(&gt;p_rw_wq, 1);
error_out:
    up(&gt;p_rw_lock);
    return size;
}
</code></pre>

<p>我们可以看到根据接收到的Packet，分别调用了不同的handler来做处理，这里我们重点关注Tracepoint Packets，关于以QT开头的包，处理代码如下：</p>

<pre><code>static int
gtp_gdbrsp_QT(char *pkg)
{
    int ret = 1;

#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_gdbrsp_QT: %s\n", pkg);
#endif

    if (strcmp("init", pkg) == 0)
        ret = gtp_gdbrsp_qtinit();
    else if (strcmp("Stop", pkg) == 0)
        ret = gtp_gdbrsp_qtstop();
    else if (strcmp("Start", pkg) == 0)
        ret = gtp_gdbrsp_qtstart();
    else if (strncmp("DP:", pkg, 3) == 0)
        ret = gtp_gdbrsp_qtdp(pkg + 3);
    else if (strncmp("DPsrc:", pkg, 6) == 0)
        ret = gtp_gdbrsp_qtdpsrc(pkg + 6);
    else if (strncmp("Disconnected:", pkg, 13) == 0)
        ret = gtp_gdbrsp_qtdisconnected(pkg + 13);
    else if (strncmp("Buffer:", pkg, 7) == 0)
        ret = gtp_gdbrsp_qtbuffer(pkg + 7);
    else if (strncmp("Frame:", pkg, 6) == 0)
        ret = gtp_gdbrsp_qtframe(pkg + 6);
    else if (strncmp("ro:", pkg, 3) == 0)
        ret = gtp_gdbrsp_qtro(pkg + 3);
    else if (strncmp("DV:", pkg, 3) == 0)
        ret = gtp_gdbrsp_qtdv(pkg + 3);
#if (LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,30))
    else if (strncmp("Enable:", pkg, 7) == 0)
        ret = gtp_gdbrsp_qtenable_qtdisable(pkg + 7, 1);
    else if (strncmp("Disable:", pkg, 8) == 0)
        ret = gtp_gdbrsp_qtenable_qtdisable(pkg + 8, 0);
#endif

#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_gdbrsp_QT: return %d\n", ret);
#endif

    return ret;
}
</code></pre>

<p>而以qT打头的包，处理的接口如下：</p>

<pre><code>static int
gtp_gdbrsp_qT(char *pkg)
{
    int ret = 1;

#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_gdbrsp_qT: %s\n", pkg);
#endif

    if (strcmp("Status", pkg) == 0)
        ret = gtp_gdbrsp_qtstatus();
    else if (strcmp("fP", pkg) == 0)
        ret = gtp_gdbrsp_qtfp();
    else if (strcmp("sP", pkg) == 0)
        ret = gtp_gdbrsp_qtsp();
    else if (strcmp("fV", pkg) == 0)
        ret = gtp_gdbrsp_qtfsv(1);
    else if (strcmp("sV", pkg) == 0)
        ret = gtp_gdbrsp_qtfsv(0);
    else if (strncmp("V:", pkg, 2) == 0)
        ret = gtp_gdbrsp_qtv(pkg + 2);

    return ret;
</code></pre>

<p>从以上接口可以看到，是一个dispatch的过程，KGTP首先判断接收到的GDB包属于哪一类包，之后分发，而对于一个类型的包，又细分很多子包，最终分发给具体的接口实现，拿上面为例，有如下一个流程：
<strong>gtp_write &ndash;> gtp_gdbrsp_QT &ndash;> gtp_gdbrsp_qtbuffer</strong>。</p>

<p>通过以上分析，我们已经在Packet层面对GDB和KGTP的通信有了深入的理解。</p>

<h4>4. KGTP中set-buffer-size的处理逻辑</h4>

<p>有了以上分析，在用户输入了以下指令：</p>

<pre><code>set remote trace buffer-size on
set trace-buffer-size xxx
</code></pre>

<p>之后会发生什么呢？</p>

<p>让我们分别测试一下。</p>

<p>（1）set trace-buffer-size 100</p>

<pre><code>Aug 03 11:00:08 localhost.localdomain kernel: gtp_write: QTBuffer:size:64
Aug 03 11:00:08 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:64
Aug 03 11:00:08 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Aug 03 11:00:08 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer:setting buffer size to 100
Aug 03 11:00:08 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Aug 03 11:00:08 localhost.localdomain kernel: gtp_read
</code></pre>

<p>（2）set trace-buffer-size 1000000</p>

<pre><code>Aug 03 11:00:33 localhost.localdomain kernel: gtp_write: QTBuffer:size:f4240
Aug 03 11:00:33 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:f4240
Aug 03 11:00:33 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Aug 03 11:00:33 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer:setting buffer size to 1000000
Aug 03 11:00:33 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Aug 03 11:00:33 localhost.localdomain kernel: gtp_read
</code></pre>

<p>（3）set trace-buffer-size -1</p>

<pre><code>Aug 03 11:00:18 localhost.localdomain kernel: gtp_write: QTBuffer:size:-1
Aug 03 11:00:18 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:-1
Aug 03 11:00:18 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Aug 03 11:00:18 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer:setting buffer size to 0
Aug 03 11:00:18 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Aug 03 11:00:18 localhost.localdomain kernel: gtp_read
</code></pre>

<p>（4）set trace-buffer-size unlimited</p>

<pre><code>Aug 03 11:00:44 localhost.localdomain kernel: gtp_write: QTBuffer:size:-1
Aug 03 11:00:44 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:-1
Aug 03 11:00:44 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Aug 03 11:00:44 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer:setting buffer size to 0
Aug 03 11:00:44 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Aug 03 11:00:44 localhost.localdomain kernel: gtp_read
</code></pre>

<p>可以看到，<code>This packet directs the target to make the trace buffer be of size size if possible. A value of -1 tells the target to use whatever size it prefers</code>.</p>

<p>也就是说，-1和unlimited等价，GDB告诉target可以使用自己认为合适的size，而给一个合理范围的正整数n，则会要求target使用的buffer size为n，单位是byte。</p>

<p>因此，当我们接到GDB发来的size为-1的包时，可以直接忽略掉，而收到normal size的包时，需要跟当前使用的buffer size作对比，然后做相应处理。</p>

<h4>5. KGTP中set-buffer-size的具体实现</h4>

<p>目前KGTP的set-buffer-size分支，已经实现了对size处理的逻辑，参考[6]，具体代码如下：</p>

<pre><code>static int
gtp_gdbrsp_qtbuffer(char *pkg)
{
#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_gdbrsp_qtbuffer\n");
#endif

    // Handle QTBuffer:circular:value
    if (strncmp("circular:", pkg, 9) == 0) {
        ULONGEST setting;

        pkg += 9;
        if (pkg[0] == '\0')
            return -EINVAL;
        hex2ulongest(pkg, &amp;setting);

#ifdef GTP_FTRACE_RING_BUFFER
#if (LINUX_VERSION_CODE &gt; KERNEL_VERSION(2,6,38)) \
    || defined(GTP_SELF_RING_BUFFER)
        gtp_circular = (int)setting;
        if (gtp_frame)
            ring_buffer_change_overwrite(gtp_frame, (int)setting);
#else
        if (gtp_circular != (int)setting)
            gtp_circular_is_changed = 1;
#endif
#endif
        gtp_circular = (int)setting;

        return 0;
    }
    // Handle QTBuffer:size:size 
    else if (strncmp("size:", pkg, 5) == 0) {

        ULONGEST size;
        int unlimited_or_not;

        pkg += 5;

        if (pkg[0] == '\0')
            return -EINVAL;

        // The size may equal to -1, so compare the pkg with "-1"
        if((strncmp("-1", pkg, 2) == 0) &amp;&amp; (*(pkg + 2) == '\0')) {
            unlimited_or_not = 1;
        }

        if(unlimited_or_not == 1) {
            // The user wants KGTP to choose the right size
            // So we just ignore the request

#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_gdbrsp_qtbuffer:keep buffer size as the user tells KGTP to use unlimited size");
#endif

            return 0;
        }

        // User wants to change the buffer size
        hex2ulongest(pkg, &amp;size);

#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_gdbrsp_qtbuffer:setting buffer size to %ld\n", size);
#endif

        // Handle the new ringbuffer size blow
        // gtp_set_trace_buffer_size(size);

        return 0;
    }

    return 1;
}
</code></pre>

<p>让我们测试一下：</p>

<p>（1）set trace-buffer-size -1</p>

<pre><code>Aug 03 12:37:28 localhost.localdomain kernel: gtp_write: QTBuffer:size:-1
Aug 03 12:37:28 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:-1
Aug 03 12:37:28 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Aug 03 12:37:28 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer:keep buffer size as the user tells KGTP to use unlimited size
Aug 03 12:37:28 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Aug 03 12:37:28 localhost.localdomain kernel: gtp_read
</code></pre>

<p>（2）set trace-buffer-size unlimited</p>

<pre><code>Aug 03 12:37:57 localhost.localdomain kernel: gtp_write: QTBuffer:size:-1
Aug 03 12:37:57 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:-1
Aug 03 12:37:57 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Aug 03 12:37:57 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer:keep buffer size as the user tells KGTP to use unlimited size
Aug 03 12:37:57 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Aug 03 12:37:57 localhost.localdomain kernel: gtp_read
</code></pre>

<p>Bingo！目前已经正确地实现了对size的解析处理，接下来的工作是继续调研KGTP trace buffer的实现，并根据size大小做出调整。</p>

<h4>6. 参考链接</h4>

<ul>
<li>[1] <a href="http://blog.csdn.net/calmdownba/article/details/38174759">http://blog.csdn.net/calmdownba/article/details/38174759</a></li>
<li>[2] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Packets.html#Packets">https://sourceware.org/gdb/current/onlinedocs/gdb/Packets.html#Packets</a></li>
<li>[3] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Remote-Protocol.html#Remote-Protocol">https://sourceware.org/gdb/current/onlinedocs/gdb/Remote-Protocol.html#Remote-Protocol</a></li>
<li>[4] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html</a></li>
<li>[5] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html</a></li>
<li>[6] <a href="https://code.csdn.net/Calmdownba/kgtp/tree/set-buffer-size">https://code.csdn.net/Calmdownba/kgtp/tree/set-buffer-size</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGTP中增加对GDB命令“set Trace-buffer-size”的支持 - Week 3]]></title>
    <link href="http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-3/"/>
    <updated>2014-07-27T19:34:52+08:00</updated>
    <id>http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-3</id>
    <content type="html"><![CDATA[<h3>CSDN开源夏令营 &ndash; 第三周工作总结</h3>

<p>这一周主要实现了“set trace-buffer-size”实现的数据通信部分，即完成了GDB和KGTP的数据交互部分，下面简单分析一下实现。在说代码实现之前，还是简单地回顾一下，如何摸清KGTP的脉络。</p>

<h4>1. 如何跟踪KGTP</h4>

<p>我的平台是Fedora，步骤如下：</p>

<pre><code>make D=1
sudo insmod gtp.ko
sudo gdb /usr/lib/debug/lib/modules/3.14.8-200.fc20.x86_64/vmlinux -ex 'target remote /sys/kernel/debug/gtp'
</code></pre>

<!--more-->


<p>此时，进入了gdb的console，可以通过gdb的commands和KGTP通信了。观察KGTP的一个重要的手段则是看printk的信息，由于编译时使用了“make D=1”，因此对应KGTP的代码，比如：</p>

<pre><code> #ifdef GTP_DEBUG                                                                                            
     printk(GTP_DEBUG "gtp_gdbrsp_qtbuffer\n");                                                              
 #endif    
</code></pre>

<p>查看这些的方式则是使用“journalctl -k”，方便起见可以只查看末尾的部分信息，比如“journalctl -k -n 100”，在我的本地输出的部分信息如下：</p>

<pre><code>Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qAttached
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qOffsets
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: g
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: m0,1
Jul 27 06:07:29 localhost.localdomain kernel: gtp_gdbrsp_m: addr = 0x0 len = 1
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: m0,1
Jul 27 06:07:29 localhost.localdomain kernel: gtp_gdbrsp_m: addr = 0x0 len = 1
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qSymbol::
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qTStatus
Jul 27 06:07:29 localhost.localdomain kernel: gtp_gdbrsp_qT: Status
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qTfP
Jul 27 06:07:29 localhost.localdomain kernel: gtp_gdbrsp_qT: fP
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
</code></pre>

<p>根据以上信息，可以顺藤摸瓜找到相应被调用的函数，从而屡清楚程序的执行逻辑，这对于理解KGTP的工作原理是非常有帮助的。关于journalctl[1]的使用，请自行“man journalctl”。在非systemd[2]的系统下，可能还需要通过“less /var/log/”这样的方式查看内核的输出，根据你使用的Linux随机应变即可。</p>

<h4>2. GDB和KGTP的通信实现</h4>

<p>利用GDBRSP[3]，即GDB Remote Serial Protocol，GDB远程串行通信协议。关于Remote Serial Protocol，可以参考[4]。简单来说，用于GDB远程调试发包，但是也支持File I/O和Console[5]，而KGTP正是利用了GDBRSP对于File I/O的支持，完成GDB和KGTP的通信，在接受到GDB发送的Packet后，KGTP进行解析。而通信的介质则是通过debugfs或者其他kernel space和user space进行数据交换的接口进行的。</p>

<p>具体的实现，参考gtp.c的函数 <code>gtp_init</code>，部分代码如下：</p>

<pre><code> gtp_dir = debugfs_create_file("gtp", S_IRUSR | S_IWUSR, NULL,
                   NULL, &amp;gtp_operations);
 if (gtp_dir == NULL || gtp_dir == ERR_PTR(-ENODEV)) {
     gtp_dir = NULL;
     goto out;
 }
 gtpframe_dir = debugfs_create_file("gtpframe", S_IRUSR, NULL,
                    NULL, &amp;gtpframe_operations);
 if (gtpframe_dir == NULL || gtpframe_dir == ERR_PTR(-ENODEV)) {
     gtpframe_dir = NULL;
     goto out;
 }
</code></pre>

<p>可以看到，使用DebugFS，建立了相应的文件节点，比如gtp，gtpframe，并且注册了相应的file operations，比如<code>gtp_oprations</code>，<code>gtpframe_operations</code>。</p>

<p>拿前者为例，声明的代码如下：</p>

<pre><code>static const struct file_operations gtp_operations = {
     .owner      = THIS_MODULE,
     .open       = gtp_open,
     .release    = gtp_release,
 #if (LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,6,35))
     .ioctl      = gtp_ioctl,
 #else
     .unlocked_ioctl = gtp_ioctl,
     .compat_ioctl   = gtp_ioctl,
 #endif
     .read       = gtp_read,
     .write      = gtp_write,
     .poll       = gtp_poll,
 };
</code></pre>

<p>而这其中最核心的则是<code>gtp_read</code>和<code>gtp_write</code>，其中<code>gtp_read</code>，用于GDB从KGTP读取数据（<strong>copy_to_user</strong>），gtp_write，则是KGTP从GDB接收数据（<strong>copy_from_user</strong>）。具体的代码，这里就不贴了，大家可以自行分析。</p>

<p>GDB和KGTP通过GDBRSP关联，通过执行<code>target remote /sys/kernel/debug/gtp</code>实现。</p>

<h4>3. 添加“set-trace-buffer-size”的通信支持</h4>

<p>有了以上的理论分析和准备，我们就可以着手实现“set trace-buffer-size”命令的解析了。首先，我们需要知道这个命令对应的GDBRSP的Query Packet以及KGTP利用哪个函数对其进行解析。通过[6]和[7]，我们得知如下信息：</p>

<pre><code>set circular-trace-buffer on
set circular-trace-buffer off
Choose whether a tracing run should use a linear or circular buffer for trace data. A linear buffer will not lose any trace data, but may fill up prematurely, while a circular buffer will discard old trace data, but it will have always room for the latest tracepoint hits.

show circular-trace-buffer
Show the current choice for the trace buffer. Note that this may not match the agent’s current buffer handling, nor is it guaranteed to match the setting that might have been in effect during a past run, for instance if you are looking at frames from a trace file.

set trace-buffer-size n
set trace-buffer-size unlimited
Request that the target use a trace buffer of n bytes. Not all targets will honor the request; they may have a compiled-in size for the trace buffer, or some other limitation. Set to a value of unlimited or -1 to let the target use whatever size it likes. This is also the default.

show trace-buffer-size
Show the current requested size for the trace buffer. Note that this will only match the actual size if the target supports size-setting, and was able to handle the requested size. For instance, if the target can only change buffer size between runs, this variable will not reflect the change until the next run starts. Use tstatus to get a report of the actual buffer size.


‘QTBuffer:circular:value’
This packet directs the target to use a circular trace buffer if value is 1, or a linear buffer if the value is 0.

‘QTBuffer:size:size’
This packet directs the target to make the trace buffer be of size size if possible. A value of -1 tells the target to use whatever size it prefers.
</code></pre>

<p>嗯，有线索了，GDB执行相应地指令，则会通过GDBRSP向KGTP发送相应的Query Packet，注意到“circular-trace-buffer”和“trace-buffer-size”的Packet的格式相同。关于GDB的General Query Packet，参考[8]。<strong>Packets starting with ‘q’ are general query packets; packets starting with ‘Q’ are general set packets. General query and set packets are a semi-unified form for retrieving and sending information to and from the stub.</strong></p>

<p>因此，参考“circular-trace-buffer”的实现是一个很好的突破口，所幸的是，KGTP已经实现了对其的支持。</p>

<h4>4. 添加“set trace-buffer-size”的具体实现</h4>

<p>根据以上分析，我们很快找到了两个关键函数，“gtp_gdbrsp_QT  ”和“gtp_gdbrsp_qtbuffer”。OK，添加对“set trace-buffer-size”的解析，代码如下：</p>

<pre><code>static int
gtp_gdbrsp_qtbuffer(char *pkg)
{
#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_gdbrsp_qtbuffer\n");
#endif

    // Handle QTBuffer:circular:value
    if (strncmp("circular:", pkg, 9) == 0) {
        ULONGEST setting;

        pkg += 9;
        if (pkg[0] == '\0')
            return -EINVAL;
        hex2ulongest(pkg, &amp;setting);

#ifdef GTP_FTRACE_RING_BUFFER
#if (LINUX_VERSION_CODE &gt; KERNEL_VERSION(2,6,38)) \
    || defined(GTP_SELF_RING_BUFFER)
        gtp_circular = (int)setting;
        if (gtp_frame)
            ring_buffer_change_overwrite(gtp_frame, (int)setting);
#else
        if (gtp_circular != (int)setting)
            gtp_circular_is_changed = 1;
#endif
#endif
        gtp_circular = (int)setting;

        return 0;
    }
    // Handle QTBuffer:size:size 
    else if (strncmp("size:", pkg, 5) == 0) {

        ULONGEST size;

        pkg += 5;

        if (pkg[0] == '\0')
            return -EINVAL;
        hex2ulongest(pkg, &amp;size);

        // Handle the new ringbuffer size blow

        return 0;
    }

    return 1;
}
</code></pre>

<p>重新编译，安装模块，然后在GDB中输入“set trace-buffer-size 100”，注意这里的100是十进制的，看下“journalctl -k”的输出，啥也没有。怎么回事，上面分析的不是挺美好的吗？经过几次尝试未果，把问题定位在了GDB对于Remote Packet的处理，不会是没有enable吧？</p>

<p>查看文档[9]，果然，应该使用<code>set remote set-buffer-size on</code>先使能，否则应该是直接被gdbrsp丢掉了。OK，使用<code>set trace-buffer-size 100</code>，输出：</p>

<pre><code>Jul 27 07:18:45 localhost.localdomain kernel: gtp_write: QTBuffer:size:64
Jul 27 07:18:45 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:64
Jul 27 07:18:45 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Jul 27 07:18:45 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Jul 27 07:18:45 localhost.localdomain kernel: gtp_read
</code></pre>

<p>而使用<code>set trace-buffer-size unlimited</code>，输出：</p>

<pre><code>Jul 27 07:19:53 localhost.localdomain kernel: gtp_write: QTBuffer:size:-1
Jul 27 07:19:53 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:-1
Jul 27 07:19:53 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Jul 27 07:19:53 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Jul 27 07:19:53 localhost.localdomain kernel: gtp_read
</code></pre>

<p>OK，至此对于“set trace-buffer-size”的通信支持就完成了，接下来需要根据用户设置的size对trace buffer做出调整，接下来的文章会说到如何实现。</p>

<h4>5. 参考链接</h4>

<ul>
<li> [1] <a href="http://www.freedesktop.org/software/systemd/man/journalctl.html">http://www.freedesktop.org/software/systemd/man/journalctl.html</a></li>
<li> [2] <a href="https://wiki.archlinux.org/index.php/systemd">https://wiki.archlinux.org/index.php/systemd</a></li>
<li> [3] <a href="https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html">https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html</a></li>
<li> [4] <a href="http://blog.csdn.net/hmsiwtv/article/details/8759129">http://blog.csdn.net/hmsiwtv/article/details/8759129</a></li>
<li> [5] <a href="https://sourceware.org/gdb/onlinedocs/gdb/File_002dI_002fO-Remote-Protocol-Extension.html#File_002dI_002fO-Remote-Protocol-Extension">https://sourceware.org/gdb/onlinedocs/gdb/File_002dI_002fO-Remote-Protocol-Extension.html#File_002dI_002fO-Remote-Protocol-Extension</a></li>
<li> [6] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html</a></li>
<li> [7] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html</a></li>
<li> [8] <a href="https://www.sourceware.org/gdb/onlinedocs/gdb/General-Query-Packets.html#General-Query-Packets">https://www.sourceware.org/gdb/onlinedocs/gdb/General-Query-Packets.html#General-Query-Packets</a></li>
<li> [9] <a href="https://sourceware.org/gdb/onlinedocs/gdb/Remote-Configuration.html">https://sourceware.org/gdb/onlinedocs/gdb/Remote-Configuration.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGTP中增加对GDB命令“set Trace-buffer-size”的支持 - Week 2]]></title>
    <link href="http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-2/"/>
    <updated>2014-07-27T19:34:48+08:00</updated>
    <id>http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-2</id>
    <content type="html"><![CDATA[<h3>CSDN开源夏令营 &ndash; 第二周工作总结</h3>

<p>这一周在上一周对整体框架的认识和理解之上，开始全面地阅读KGTP的源代码，理解了梗概，很多细节需要再仔细研读，主要参考是其代码仓库：[1]。</p>

<h4>1. KGTP的核心代码文件</h4>

<p>毫无疑问，KGTP最精髓的代码都在gtp.c文件中，约13500行代码，这其中包括了与GDB的通信，具体Query Packets的处理，Trace Points的注册和删除，事件的触发，硬件断点的设置和处理，等几乎所有的KGTP核心事务。在短短1万多行代码中，体现了几乎所有Linux Kernel开发过程中会用到的features，SMP的支持，Linux的list实现，锁和同步，工作队列，tasklet，硬件和软件中断，等等。</p>

<!--more-->


<p>其它辅助文件则有：</p>

<ul>
<li> <code>gtp_rb.c</code>      KGTP自己实现的一套Ring Buffer（默认使用）</li>
<li> <code>perf_event.c</code>  Perf的核心实现，里面也实现Ring Buffer</li>
<li> <code>ring_buffer.c</code> Linux内核为Trace的infrastructure提供的统一的Ring Buffer实现（比如Ftrace）</li>
</ul>


<h4>2. KGTP核心功能实现的源码分析</h4>

<p>按照数据通信流程，<strong>GDB ——>   GDBRSP ——> SYSFS ——> KGTP ——> Kernel</strong>，简单分析如下：</p>

<p><code>GDBRSP</code>是Remote Serial Protocol，用于GDB远程调试发包，但是也支持File I/O和Console，而KGTP正是利用了GDBRSP对于File I/O的支持，完成GDB和KGTP的通信，在接受到GDB发送的Packet后，KGTP进行解析。而通信的介质则是通过debugfs或者其他kernel space和user space进行数据交换的接口进行（参考[2]）。</p>

<p>KGTP接收到了GDB的指令后，基于Kprobes和Uprobes进行内核和用户应用程序的trace，step和watch可以基于hardware-breakpoints实现。</p>

<p>KGTP自己维护了一个ring buffer的，用于Trace Frame的存储，查询及dump。</p>

<h5>（1）KGTP和GDB的通信</h5>

<p>核心函数：</p>

<ul>
<li> <code>gtp_init</code>    建立对应的ProcFS或者DebugFS文件结点</li>
</ul>


<p>以下函数利用GDBRSP完成GDB和KGTP基于packet的通信：</p>

<ul>
<li> <code>gtp_open</code></li>
<li> <code>gtp_release</code></li>
<li> <code>gtp_ioctl</code></li>
<li> <code>gtp_write</code></li>
<li> <code>gtp_read</code></li>
<li> <code>gtp_poll</code></li>
</ul>


<h5>（2）KGTP对GDB数据包的处理</h5>

<p><code>gtp_gdbrsp_*</code> 系列函数完成了对GDB数据包的解析和处理。</p>

<p>比如：</p>

<ul>
<li> <code>gtp_gdbrsp_QT</code>        处理QT的packet</li>
<li> <code>gtp_gdbrsp_qtstart</code>   Start Trace Experiments，注册kprobe，uprobe以及watchpoints，hardware breakpoints等，并分配存储空间</li>
<li> <code>gtp_qdbrsp_qtstop</code>    Stop Trace Experiments，flush work queue，tasklet_kill，以及unregister在qtstart注册的所有probe points和一些回调函数</li>
</ul>


<p>参考的话，就是GDB的官方手册了，比如：</p>

<p>GDB的<a href="https://www.sourceware.org/gdb/onlinedocs/gdb/General-Query-Packets.html">Query Packet</a>.
Packets starting with ‘q’ are general query packets; packets starting with ‘Q’ are general set packets. General query and set packets are a semi-unified form for retrieving and sending information to and from the stub.</p>

<h5>（3）Tracepoints和Breakpoints的注册和删除</h5>

<ul>
<li> <code>gtp_uprobe_register</code></li>
<li> <code>gtp_register_hwb</code></li>
<li> <code>gtp_unregister_hwb</code></li>
</ul>


<h5>（4）TSV的处理</h5>

<p><code>gtp_var_*</code></p>

<p>可以重点看一下<code>gtp_var_special_add_all</code>。</p>

<h5>（5）Ring Buffer的处理</h5>

<p>这里后续再详细分析，Ring Buffer的实现也是KGTP的核心之一。</p>

<h4>3. 阅读源码小技巧&amp;问题总结</h4>

<p>参考<code>LXR</code>[3]，直接使用<code>Identifier Search</code>[4]，遇到不明白的宏定义，函数定义，都可以直接到Linux源码中一探究竟。</p>

<p>以下是我阅读代码过程遇到的一些问题总结：</p>

<p>（1）EXPORT_SYMBOL</p>

<p><a href="http://stackoverflow.com/questions/9836467/whats-meaning-of-export-symbol-in-linux-kernel-code">http://stackoverflow.com/questions/9836467/whats-meaning-of-export-symbol-in-linux-kernel-code</a></p>

<p><a href="http://www.linux.com/learn/linux-training/31161-the-kernel-newbie-corner-kernel-symbols-whats-available-to-your-module-what-isnt">http://www.linux.com/learn/linux-training/31161-the-kernel-newbie-corner-kernel-symbols-whats-available-to-your-module-what-isnt</a></p>

<p>（2）container_of</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/kernel.h#L833">http://lxr.free-electrons.com/source/include/linux/kernel.h#L833</a></p>

<pre><code>/**
827  * container_of - cast a member of a structure out to the containing structure
828  * @ptr:        the pointer to the member.
829  * @type:       the type of the container struct this is embedded in.
830  * @member:     the name of the member within the struct.
831  *
832  */
833 #definecontainer_of(ptr,type, member) ({                      \
834         const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);    \
835         (type *)( (char *)__mptr - offsetof(type,member) );})
</code></pre>

<p>（3）kzalloc</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/slab.h#L649">http://lxr.free-electrons.com/source/include/linux/slab.h#L649</a></p>

<p>（4）kmalloc</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/slab.h#L452">http://lxr.free-electrons.com/source/include/linux/slab.h#L452</a></p>

<p>（5）list</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/list.h">http://lxr.free-electrons.com/source/include/linux/list.h</a></p>

<p>（6）INIT_WORK</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/workqueue.h">http://lxr.free-electrons.com/source/include/linux/workqueue.h</a></p>

<p>（7）vfree</p>

<p><a href="http://lxr.free-electrons.com/source/mm/vmalloc.c#L1490">http://lxr.free-electrons.com/source/mm/vmalloc.c#L1490</a></p>

<p>（8）preempt_disable</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/preempt.h#L38">http://lxr.free-electrons.com/source/include/linux/preempt.h#L38</a></p>

<p>（9）barrier</p>

<p><a href="https://www.kernel.org/doc/Documentation/memory-barriers.txt">https://www.kernel.org/doc/Documentation/memory-barriers.txt</a></p>

<p>（10）local_irq_save</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/irqflags.h#L93">http://lxr.free-electrons.com/source/include/linux/irqflags.h#L93</a></p>

<p>（11）notifier_block</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/notifier.h#L53">http://lxr.free-electrons.com/source/include/linux/notifier.h#L53</a></p>

<p>（12）flush_workqueue</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/workqueue.c#L2641">http://lxr.free-electrons.com/source/kernel/workqueue.c#L2641</a></p>

<p>（13）tasklet_kill</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/softirq.c#L566">http://lxr.free-electrons.com/source/kernel/softirq.c#L566</a></p>

<p>（14）unregister_wide_hw_breakpoint</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/events/hw_breakpoint.c#L536">http://lxr.free-electrons.com/source/kernel/events/hw_breakpoint.c#L536</a></p>

<p>（15）unregister_kprobe</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/kprobes.c#L1668">http://lxr.free-electrons.com/source/kernel/kprobes.c#L1668</a></p>

<p>（16）wake_up_interruptible_nr</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/sched/wait.c#L88">http://lxr.free-electrons.com/source/kernel/sched/wait.c#L88</a></p>

<p>（17）queue_work</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/sched/wait.c#L88">http://lxr.free-electrons.com/source/kernel/sched/wait.c#L88</a></p>

<p>（18）rcu_read_lock</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/rcupdate.h#L798">http://lxr.free-electrons.com/source/include/linux/rcupdate.h#L798</a></p>

<p>（19）tasklet_init</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/softirq.c#L555">http://lxr.free-electrons.com/source/kernel/softirq.c#L555</a></p>

<p>（20）IPI</p>

<p><a href="http://en.wikipedia.org/wiki/Inter-processor_interrupt">http://en.wikipedia.org/wiki/Inter-processor_interrupt</a></p>

<p>（21）register_die_notifier</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/notifier.c#L544">http://lxr.free-electrons.com/source/kernel/notifier.c#L544</a></p>

<p>（22）EBUSY</p>

<p><a href="http://lxr.free-electrons.com/source/include/uapi/asm-generic/errno-base.h#L19">http://lxr.free-electrons.com/source/include/uapi/asm-generic/errno-base.h#L19</a></p>

<h4>4. KGTP的调试&amp;源码注释</h4>

<p>编译KGTP的时候添加D=1，便以debug的方式编译，在Fedora下可以通过journalctl -k查看其输出，其中-k是指过滤Kernel信息。其它系统下可能是在/var/log之类的文件查看，总之KGTP通过内核接口printfk输出，视具体的系统不同，查看内核信息的方式也会有变化。</p>

<p>关于有注释的代码，请看[5]。</p>

<h4>5. 参考链接</h4>

<ul>
<li> [1] <a href="https://github.com/teawater/kgtp">https://github.com/teawater/kgtp</a></li>
<li> [2] <a href="http://people.ee.ethz.ch/~arkeller/linux/multi/kernel_user_space_howto.html#toc1">http://people.ee.ethz.ch/~arkeller/linux/multi/kernel_user_space_howto.html#toc1</a></li>
<li> [3] <a href="http://lxr.free-electrons.com">http://lxr.free-electrons.com</a></li>
<li> [4] <a href="http://lxr.free-electrons.com/ident">http://lxr.free-electrons.com/ident</a></li>
<li> [5] <a href="https://code.csdn.net/Calmdownba/kgtp/tree/comments-from-scratch">https://code.csdn.net/Calmdownba/kgtp/tree/comments-from-scratch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGTP中增加对GDB命令“set Trace-buffer-size”的支持 - Week 1]]></title>
    <link href="http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-1/"/>
    <updated>2014-07-27T19:34:45+08:00</updated>
    <id>http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-1</id>
    <content type="html"><![CDATA[<h3>CSDN开源夏令营 &ndash; 第一周工作总结</h3>

<p>这一周主要对KGTP的实现进行了简单的熟悉和分析，主要参考的资料在：[1]。</p>

<h4>1.什么是KGTP</h4>

<p>T大把KGTP称为Linux内核中的GDB快刀，其全称是Linux kernel GDB tracepoint module，是一个灵活轻量级实时的Linux调试器和跟踪器。</p>

<p>Linux的tracer infrastructure五花八门，包括Ftrace，Utrace等，建议大家参考一下这篇paper，【Ptrace, Utrace, Uprobes: Lightweight, Dynamic Tracing of User Apps】，下载链接在：[2]。Tracer在收集信息的时候不停止Linux内核，但是不能被GDB控制。</p>

<!--more-->


<p>而在调试Linux内核的时候，我们也有很多选择，比如KDB，KGDB等，Debugger将停止Linux内核，但是可以被GDB控制。</p>

<p>那么KGTP做了什么事情呢？Yes，作为Tracer和Debugger的一个桥梁，从而做到不停止Linux内核，且可以被本地或者远程的GDB控制。</p>

<p>目前，KGTP支持X86-32，X86-64，MIPS和ARM，支持Linux内核2.6.18到upstream，直接Android（因为Android底层仍然是Linux Kernel）。</p>

<h4>2. KGTP的实现</h4>

<p>KGTP的大部分trace功能基于Kprobe，而用户态应用程序的trace功能则依赖Uprobe，对于使用Kprobe的情况，使用Kprobes-optimization还可提高Kprobe的速度。</p>

<p>作为Debugger和Tracer之间的桥梁，KGTP通过GDB的RSP协议与GDB通信，完成数据的交换和用户命令的解析，具体的信息可以看GDB的文档，比如：<a href="https://www.sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html">GDB Remote-Protocol</a>。KGTP内核态和用户态的数据交换，通过DebugFS或者ProcFS暴露给用户态的GDB。在接收到相关的GDB命令数据包后，完成相关的解析工作，设置对应的Tracepoint，在用户开始trace后（tstart），开始在Ring Buffer采集数据，结束后（tstop）可以供用户查看（tfind）。</p>

<p>KGTP作为一个内核module存在，只需要编译KGTP后insmod，而不需要重新编译内核，因此非常灵活，当不需要KGTP的时候，直接rmmod即可。</p>

<p>KGTP的数据分析主要使用GDB，因此代码中不需要很多数据分析的部分，核心源代码文件gtp.c，仅有13000行左右。</p>

<p>总结起来，KGTP是一个灵活且轻量级的实现，可以实时地对Linux进行跟踪和调试，这对于线上服务器的问题处理是非常有用的。</p>

<h4>3. KGTP的hack需要具备哪些知识</h4>

<p>C语言功底+一定的Linux内核开发基础，具体的点总结如下：</p>

<ul>
<li> （1）Linux内核的同步机制（锁，信号量等）</li>
<li> （2）字符驱动程序的实现原理，主要是GDB和KGTP的通信需要用到</li>
<li> （3）Linux内核module的编写，因此KGTP是以一个module的形式存在的</li>
<li> （4）Linux内核的tasklet和workqueue，KGTP的后台进程是一个守护进程gtpd</li>
<li> （5）Ring buffer的实现，Linux内核trace的RB的实现以及KGTP自身RB的实现</li>
<li> （6）Linux tracer的实现原理，因为KGTP是基于Kprobe和Uprobe实现的</li>
<li> （7）GDB的基本原理，尤其是GDBRSP</li>
</ul>


<h4>4. 如何增加对GDB命令“set trace-buffer-size”的支持</h4>

<ul>
<li> （1）实现命令包的解析，参考[3][4]</li>
<li> （2）实现Ring Buffer数据的拷贝和其他处理（主要针对新分配缓冲区小于原有缓冲区的情况）</li>
</ul>


<h4>5. 如何部署KGTP</h4>

<p>强烈建议采用“一键安装”的方式，KGTP提供了部署脚本[kgtp.py]，十分方便。</p>

<p>Kernel需要相应地debug info，因此如果是自己编译内核，则需要：</p>

<pre><code>General setup —&gt;
[*] Kprobes
[*] Enable loadable module support —&gt;
Kernel hacking —&gt;
[*] Debug Filesystem
[*] Compile the kernel with debug info
</code></pre>

<p>如果是Distro，需要安装Linux内核调试镜像和Linux内核源码包和开发包。</p>

<p>只有这样，Kernel才能被GDB加载调试。</p>

<p>以Fedora为例，当完成了以上步骤后，直接</p>

<pre><code>sudo gdb /usr/lib/debug/lib/modules/3.14.8-200.fc20.x86_64/vmlinux -ex 'target remote /sys/kernel/debug/gtp'
</code></pre>

<p>根据使用内核版本的不同，加载的kernel image路径会有稍许区别，比如上面的<code>3.14.8-200.fc20.x86_64</code>。</p>

<p>至此，部署完毕。</p>

<h4>6. 如何使用KGTP</h4>

<p>请参考KGTP的使用手册，具体链接见：[5]和[6]。</p>

<h4>7. 参考链接</h4>

<ul>
<li> [1] <a href="http://teawater.github.io/kgtp/index.html">http://teawater.github.io/kgtp/index.html</a></li>
<li> [2] <a href="http://kernel.org/doc/ols/2007/ols2007v1-pages-215-224.pdf">http://kernel.org/doc/ols/2007/ols2007v1-pages-215-224.pdf</a></li>
<li> [3] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html</a></li>
<li> [4] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html</a></li>
<li> [5] <a href="http://teawater.github.io/kgtp/kgtp.html">http://teawater.github.io/kgtp/kgtp.html</a></li>
<li> [6] <a href="http://teawater.github.io/kgtp/kgtpcn.html">http://teawater.github.io/kgtp/kgtpcn.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Raspberry Pi Robotic Projects - From a Technical Perspective]]></title>
    <link href="http://hustcalm.me/blog/2014/06/21/review-of-raspberry-pi-robotic-projects-from-a-technical-perspective/"/>
    <updated>2014-06-21T19:15:15+08:00</updated>
    <id>http://hustcalm.me/blog/2014/06/21/review-of-raspberry-pi-robotic-projects-from-a-technical-perspective</id>
    <content type="html"><![CDATA[<p>After being the reviewer for the <a href="http://hustcalm.me/blog/2014/02/10/review-of-beaglebone-robotic-projects-from-a-technical-perspective/">BeagleBone Robotic Projects</a>, I&rsquo;m honored to be the reviewer for another book about robotic projects named <a href="http://bit.ly/1hrlCQP">Raspberry Pi Robotic Projects</a>. I will go no further to talk about the differences about <code>BeagleBone</code> and <code>Raspberry Pi</code>, all I know is that they are both cool and amazing. To start to play with <code>Raspberry Pi</code>, I suggest that you
can list the book <a href="http://bit.ly/1hrlCQP">Raspberry Pi Robotics Projects</a> as an option.</p>

<p>In this post, I will give you a very quick overview of the book and tell why it&rsquo;s worth it.</p>

<!--more-->


<h4>Getting Started with Raspberry Pi</h4>

<p>Have no idea what is really <code>Raspberry Pi</code>? Well, just treat it as your <code>Mini Computer</code>. The truth is, it got almost everything what a PC should be equipped with. What&rsquo;s more, it runs Linux which means you can do tons of things with it!</p>

<p>Yes, yes, <code>Raspberry Pi</code> is leading the <code>open hardware community</code> somehow, people design, manufacture, develop and play. Geeks use it for their geek life!</p>

<p>In <strong>chapter 1</strong>, you will be informed the hardware and software of <code>Raspberry Pi</code> and begin to be friends with her.</p>

<h4>Programming Raspberry Pi</h4>

<p>As you want to make <code>Raspberry Pi</code> do something really amazing, you should know how to talk to her. Well, you program to talk. So in <strong>chapter 2</strong>, we will show you how to get comfortable with the way <code>talking(programming)</code>. Besides to knowing <code>Linux</code>, use <code>Python</code> and <code>C/C++</code> is cool:&ndash;)</p>

<h4>Providing Speech Input and Output</h4>

<p>What? You want to talk to her, really. I mean by <code>speaking</code>. Well, that should not be problem. Let&rsquo;s give our robot <code>ears</code> and <code>mouth</code>. <strong>Chapter 3</strong> will show you how to use <code>PocketSphinx</code> to accept your voice commands and utilize <code>Espeak</code> to make <code>Raspberry Pi</code> talk in a robot voice.</p>

<h4>Adding Vision to Raspberry Pi</h4>

<p>How can a beautiful girl be blind! So to make <code>Rasberry Pi</code> see the amazing world, <strong>chapter 4</strong> will tell you how to connect the USB cemara to <code>Raspberry Pi</code> and begin to use <code>OpenCV</code>, which is a fully featured vision library to detect colored objects.</p>

<h4>Creating Mobile Robots on Wheels</h4>

<p>Let&rsquo;s roll! To see the beatiful world around, we need to make our robot able to move. <strong>Chapter 5</strong> will show you how to add motor controller to <code>Raspberry Pi</code> and let her run at free will.</p>

<h4>Making the Unit Very Mobile &ndash; Controlling the Movement of a Robot with Legs</h4>

<p>A girl should really walk, doesn&rsquo;t it? No problem, <strong>chapter 6</strong> tells how to get started with <code>servos</code> and make your mobile platform truly mobile just as a person.</p>

<h4>Avoiding Obstacles Using Sensors</h4>

<p>Oh, there is a wall in front, danger! Don&rsquo;t worry, our <code>Raspberry Pi</code> knows everything and will avoid it easily. <strong>Chapter 7</strong> shows how to use an <code>infrared sensor</code> and <code>USB sonar sensor</code> with <code>Raspberry Pi</code>, also how to use a <code>servo</code> to move a single sensor to make our sening range large enough.</p>

<h4>Going Truly Mobile &ndash; The Remote Control of Your Robot</h4>

<p>You will not always be around with your <code>Raspberry Pi</code>, right? To make sure your <code>Pi</code> is always with you, <strong>Chapter 8</strong> demonstrates how to connect wireless devices to <code>Pi</code> thus enabling us to talk to her remotely. Use a <code>wireless USB keyboard</code>, or <code>a wireless LAN</code> or <code>a ZigBee device</code>, choose as you like.</p>

<h4>Using a GPS Receiver to Locate Your Robot</h4>

<p>No one wants to be told that his <code>Raspberry Pi</code> is lost. Fortunately, we got <code>GPS</code> nowadays for almost free. Connecting <code>Raspberry Pi</code> to a <code>GPS</code> device and accessing the <code>GPS</code> programmatically is mainly covered in <strong>chapter 9</strong>.</p>

<h4>System Dynamics</h4>

<p>Get tired with so much coding for each dedicated task? <strong>Chaper 10</strong> will free you from hell by creating a general control structure. Also you can enable complex functionalities by using the structure of the <code>Robot Operating System</code>.</p>

<h4>By Land, Sea, and Air</h4>

<p>Maybe you don&rsquo;t just want a <code>Raspbery Pi</code>, you really want is a <code>Quadrotor</code>, or a <code>submarine</code> or a <code>mini ship</code>! Nothing is impossible, <strong>Chapter 11</strong> will be a good starting point to creat something really amazing.</p>

<p>I hope that you like <code>Raspberry Pi</code> and the book will do some good. Happy playing and hakcing with <code>Raspberry Pi</code>!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Socket Anyway?]]></title>
    <link href="http://hustcalm.me/blog/2014/04/17/what-is-socket-anyway/"/>
    <updated>2014-04-17T21:05:06+08:00</updated>
    <id>http://hustcalm.me/blog/2014/04/17/what-is-socket-anyway</id>
    <content type="html"><![CDATA[<p>I bet you&rsquo;ve heard of <code>socket</code> for a while, but do you really know what is a <code>socket</code>?</p>

<p>This post is a quick getting-started for figuring out the basic concepts of socket and hopefully enpowers you to begin writing simple network programming snippets. It aims to bootstrap your understanding to socket and network programming and serves as a good starting point to truth. From definition to practice and deep into research, let&rsquo;s start the venture!</p>

<!--more-->


<h2>The definition</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley sockets</a></li>
</ul>


<p>Let history and standards tell everything.</p>

<h2>Unix or Internet</h2>

<ul>
<li><a href="http://lists.freebsd.org/pipermail/freebsd-performance/2005-February/001143.html">unix domain sockets vs. internet sockets</a></li>
</ul>


<p>See what the freebsd gurus say.</p>

<h2>Unix socket deeper</h2>

<ul>
<li><a href="http://www.thomasstover.com/uds.html">Demystifying Unix Domain Sockets</a></li>
</ul>


<p>Code tells the truth.</p>

<h2>Network Programming Go</h2>

<ul>
<li><a href="http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html">Beej&rsquo;s Guide to Network Programming Using Internet Sockets</a></li>
</ul>


<p>Practices make best.</p>

<h2>What&rsquo;s Next</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/176409/how-to-build-a-simple-http-server-in-c">How to Build a simple HTTP server in C</a></li>
</ul>


<p>Wonder how to implement a HTTP server, like <code>Apache</code> or <code>Nginx</code>, you&rsquo;d better implement a simple, stupid but your own one.</p>

<ul>
<li><a href="http://www.kegel.com/c10k.html">The C10K problem</a></li>
</ul>


<p>Well, this is really where it hurts. Catch up with the paper, conquer it or give up early!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build PTAM on Fedora 20 the Easy Way - 10 Minutes Tutorial]]></title>
    <link href="http://hustcalm.me/blog/2014/04/17/build-ptam-on-fedora-20-the-easy-way-10-minutes-tutorial/"/>
    <updated>2014-04-17T19:21:41+08:00</updated>
    <id>http://hustcalm.me/blog/2014/04/17/build-ptam-on-fedora-20-the-easy-way-10-minutes-tutorial</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since the last post <a href="http://hustcalm.me/blog/2013/09/27/ptam-compilation-on-linux-howto/">PTAM Compilation on Linux-HowTo</a> about playing with PTAM. And now Isis Innovation has released the source code under GPLv3 and put it on <a href="https://github.com/Oxford-PTAM/PTAM-GPL">Github</a>.</p>

<p>Last time, we demostrate detailed instructions on how to get PTAM running on Debian derived systems(Linux Mint 15 and Ubuntu 12.04), now I want talk about building the source code on Fedora 20. It won&rsquo;t be long, since I just want to talk about the key components, thus the mandatory dependencies(<strong>TooN, libCVD, Gvars3, OpenGL, libjpeg, libpng, libtiff</strong>, etc).</p>

<!--more-->


<p>As the PTAM source code use the GNU autoconf tools, so the typical way to install is <code>./configure &amp;&amp; make &amp;&amp; sudo make install</code>, however, to make sure that certain third libs are correctly configured and can found when running <code>configure</code>, you may want to have a look at the output after <code>configure</code> and install any key dependency which is missed.</p>

<p>Whenever you are not sure, see the <strong>Official Website</strong> for sure!!!</p>

<h2>Install Dependencies</h2>

<h3>TooN</h3>

<p><a href="http://www.edwardrosten.com/cvd/toon.html">TooN</a> is a numerics library used by libCVD. Since they are just a bundle of header files, installation is trivial.</p>

<pre><code>sudo yum install liblapack-devel
sudo yum install libblas-devel

./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>

<h3>libCVD</h3>

<p><a href="http://www.edwardrosten.com/cvd/">libCVD</a> is a very portable and high performance C++ library for computer vision, image, and video processing.</p>

<p>This is the key component for building PTAM, thus should be careful. Make sure you installed OpenGL correctly, also for the video source, if you are using a UVC webcam, check if <code>v4l2</code> is working. Or if you are using a IEEE1394 camera, get libxx1394 series libs installed which can drive your camera. For Image I/O, always have libjpeg, libpng and libtiff.</p>

<p>See the output after running <code>configure</code> and ensure all the options related are OK.</p>

<pre><code>sudo yum install freeglut-devel

./configure

make

sudo make install
</code></pre>

<h3>GVars3</h3>

<p><a href="http://www.edwardrosten.com/cvd/gvars3.html">GVars3</a> is a configuration library which integrates well with TooN. Not much to worry when buiding.</p>

<pre><code>./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>

<h2>Build PTAM</h2>

<h3>Run ldconfig</h3>

<p>The libs built above may reside in <code>/usr/local/lib</code> when using the default directorys in their Makefiles, to make the system aware of the newly installed libs.</p>

<pre><code>sudo vi /etc/ld.so.conf
add /usr/local/lib to the file
sudo ldconfig
</code></pre>

<h3>Prepare for Makefile</h3>

<pre><code>cd the_PTAM_Directory
cp Build/Linux/* .
vi Makefile
add -lGLU -lGL -llapack to the linker commands
</code></pre>

<h3>Fix usleep declaration</h3>

<pre><code>vi Tracker.cc
add #include &lt;unistd.h&gt; to the first line
</code></pre>

<h3>Build</h3>

<pre><code>make
</code></pre>

<p>If nothing wrong, you are done!</p>

<h2>Run PTAM</h2>

<p>Simply invoke <code>CameraCalibrator</code> to calibrate your camera. Then invoke <code>PTAM</code> for real fun.</p>

<p>If you use UVC webcam using <code>v4l2</code>, you may want to install:</p>

<pre><code>sudo yum install v4l-utils
</code></pre>

<p>Use <code>v4l2-ctl</code> to play with your camera.</p>

<h2>Trouble Shooting</h2>

<p>As the orinigal <a href="http://www.robots.ox.ac.uk/~gk/PTAM/README.txt">README.txt</a> says, PTAM works well with Nvidia display card, I got <code>Segmentation Fault as soon as ... got video source</code> as I&rsquo;m using a display card shipped with an Intel motherboard.</p>

<p>However, I think the root cause is that the display card driver does not know how to handle the color space coming from the webcam, so I&rsquo;m planning to deep into the mechanism and try to find out why. <a href="http://ewokrampage.wordpress.com/troubleshooting-faq/">George Klein</a> says that a nvidia display card and driver combo works fine after all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Look Inside Mongoose - an Easy to Use Web Server Implementation]]></title>
    <link href="http://hustcalm.me/blog/2014/04/09/look-inside-mongoose-an-easy-to-use-web-server-implementation/"/>
    <updated>2014-04-09T20:22:54+08:00</updated>
    <id>http://hustcalm.me/blog/2014/04/09/look-inside-mongoose-an-easy-to-use-web-server-implementation</id>
    <content type="html"><![CDATA[<p>I come across with Network Programming recently and find it really charming. Afer reading the book &ldquo;Advanced Linux Programming&rdquo;, I&rsquo;m more curious about how to implement a basic http server or web server.</p>

<p>The source code of chapter 11 of &ldquo;ALP&rdquo; does tell the key idea, thus communicating through sockets between client and server, for HTTP compliance, just implement the HTTP protocal(<a href="https://tools.ietf.org/html/rfc2616">RFC
2616</a>). To know the things better, I&rsquo;d like to know how to implement a core and basic HTTP server. You may know &lsquo;Apache&rsquo;, &lsquo;NginX&rsquo; and &lsquo;Lighttpd&rsquo; for a while, and they do lead the main tread. Basically, they are heavy enough to begin to know a basic HTTP server implementation.</p>

<!--more-->


<p>After googling around, I find <a href="http://stackoverflow.com/questions/176409/how-to-build-a-simple-http-server-in-c">this link on stackoverflow</a> is valuable and a good starting point to follow. From there, I decide to dig into <a href="https://code.google.com/p/mongoose/">mongoose</a>. To walk through what mongoose does and provides, I will present some comments of core source code.</p>

<h2>Be aware of the Protocal Stack</h2>

<p>Many people get confused by <code>HTTP</code>, <code>FTP</code>, <code>TCP/IP</code>, <code>SMTP</code>, etc. To get all these stuff clear of your head, do please spend several miniutes to learn the <code>Internet communication model</code>, like the <code>OSI 7-layer model</code> or the <code>TCP/IP 4-layer model</code>.</p>

<p>Once you know the <code>phsical</code>, <code>data-link</code>, <code>network</code>, <code>transportation</code>, <code>application</code> what&rsquo;s all about, trust me, you will find all the confused words gone:&ndash;)</p>

<h2>HTTP Basics</h2>

<p>A web server, basicly implements the <code>HTTP</code> protocol to define how <code>the client interacts with the server</code>, thus enabling the communication of varies of devices. But aware that <code>HTTP</code> is an application protocol, built upon <code>TCP/IP</code> which handles the real transportation of data, in the perspective of programming, that is <code>Socket</code>.</p>

<p>Give the references a shot:</p>

<ul>
<li><a href="http://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html">HTTP(HyperText Transfer Protocol) Basics</a></li>
<li><a href="http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177">HTTP: The Protocol Every Web Developer Must Know</a></li>
<li><a href="http://www.jmarshall.com/easy/http/">HTTP Made Really Easy</a></li>
<li><a href="http://www.slideshare.net/sanjoysanyal/http-basics">HTTP basics &ndash; slideshare</a></li>
</ul>


<h2>Socket Basics</h2>

<p>In a word, <code>socket</code> is the <code>API</code> of <code>TCP/IP</code> provided to programmers.
See my blog <a href="http://hustcalm.me/blog/2014/04/17/what-is-socket-anyway/">What Is Socket Anyway?</a>.</p>

<h2>Cross Platform development concerns</h2>

<p>Wow, <code>Mongoose</code> works on Windows, Mac, UNIX/Linux, iPhone, Android eCos, QNX and many other platforms, what an amazing software!</p>

<p>Well, the basic idea behind <code>cross platform development</code> is to abstract another layer to adapt to the different implementations to the same task on different <code>OS and platforms</code>, my personal understanding, sorry:&ndash;)</p>

<p>When you see the source code of <code>Mongoose</code>, be prepared to come across with lots of <code>#ifdef</code> and <code>#ifndef</code>, etc. Things got really complicated when dealing with <code>cross platform development</code>, there are even specifed books and literatures talking about it.</p>

<p>OK I&rsquo;m also newbie to this, so please <code>RTFSC</code>.</p>

<h2>HTTP features kept in mind</h2>

<p>As an <code>embedded</code> web server, <code>Mongoose</code> needs not to implement everything, just the core functionalities, however really powerful enough. Like <code>CGI, SSI, SSL, Digest auth, Websocket, WEbDAV, Resumed download, URL rewrite, file blacklist, Custom error pages, Virtual hosts, IP-based ACL, Windows service</code>, even <code>Lua Server Pages</code>.</p>

<p>As <code>HTTP</code> is an application protocol, so every feature is really related to the description in the <code>RFC</code>s along with many more extensions like <a href="http://datatracker.ietf.org/doc/rfc2818/">HTTPS &ndash; HTTP over TLS</a>.</p>

<p>Though many heavy web servers like <code>Apache</code> or <code>Nginx</code> does not implement everything of <code>HTTP</code>, so <code>keep it simple and work</code>.</p>

<h2>The programming paradigm</h2>

<p>There is not any <code>class</code> defined in <code>Mongoose</code>, though it can be compiled using <code>C++</code>, so the source code is <code>pure C</code> actually. The underlying dirty work will be handled by <a href="https://github.com/cesanta/net_skeleton">net_skeleton</a>, like the <code>management of socket connections</code> and <code>sending and receiving data packets</code>.</p>

<p>To be clear, <code>object</code> is implemented through the use of <code>struct</code>, like <code>mg_server</code>, <code>mg_connection</code>. Get a good knowledge of <code>C programming language</code> before you decide to dig into <code>Mongoose</code>, period.</p>

<h2>I/O Models to know</h2>

<p><code>Blocking I/O</code> or <code>Asynchronous I/O</code>?</p>

<p>See the following references for good:</p>

<ul>
<li><a href="http://www.madwizard.org/programming/tutorials/netcpp/5">NetworkingCPP &ndash; I/O Models</a></li>
<li><a href="http://www.kegel.com/c10k.html">The C10K problem</a></li>
<li><a href="http://www.ibm.com/developerworks/linux/library/l-async/">Boost application performance using asynchronous I/O</a></li>
</ul>


<p><code>Mongoose</code> is using the traditional <code>select()</code>, serving many clients with each thread, and using nonblocking I/O as illustrated in the function <code>ns_server_poll</code> implemented in <code>net_skeleton</code>.</p>

<h2>The core of Mongoose</h2>

<p>Let the journey begin!</p>

<h3>Net Skeleton</h3>

<p>Quote from <a href="https://github.com/cesanta/net_skeleton">here</a>:</p>

<blockquote><p>Net Skeleton is a networking library written in C. It provides easy to use event-driven interface that allows to implement network protocols or scalable network applications with little effort. Net Skeleton releives developers from the burden of network programming complexity and let them concentrate on the logic. Net Skeleton saves time and money.</p></blockquote>

<figure class='code'><figcaption><span>Core interfaces provided by net_skeleton</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">ns_server_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_server_poll</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">milli</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_server_wakeup</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_server_wakeup_ex</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="n">ns_callback_t</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_iterate</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="n">ns_callback_t</span> <span class="n">cb</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">param</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="nf">ns_add_sock</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="n">sock_t</span> <span class="n">sock</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_bind</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_set_ssl_cert</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ssl_cert</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_set_ssl_ca_cert</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ssl_ca_cert</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="nf">ns_connect</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">host</span><span class="p">,</span>
</span><span class='line'>                                 <span class="kt">int</span> <span class="n">port</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ssl</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">connection_param</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_send</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_printf</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_vprintf</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="kt">va_list</span> <span class="n">ap</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Utility functions</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">ns_start_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">f</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_socketpair</span><span class="p">(</span><span class="n">sock_t</span> <span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_socketpair2</span><span class="p">(</span><span class="n">sock_t</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="kt">int</span> <span class="n">sock_type</span><span class="p">);</span>  <span class="c1">// SOCK_STREAM or SOCK_DGRAM</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_set_close_on_exec</span><span class="p">(</span><span class="n">sock_t</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_sock_to_str</span><span class="p">(</span><span class="n">sock_t</span> <span class="n">sock</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_hexdump</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dst_len</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Core data structures used in net_skeleton</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">ns_server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">server_data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sock_t</span> <span class="n">listening_sock</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="n">active_connections</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ns_callback_t</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SSL_CTX</span> <span class="o">*</span><span class="n">ssl_ctx</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SSL_CTX</span> <span class="o">*</span><span class="n">client_ssl_ctx</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sock_t</span> <span class="n">ctl</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ns_connection</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="n">prev</span><span class="p">,</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="n">server</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sock_t</span> <span class="n">sock</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="n">socket_address</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">iobuf</span> <span class="n">recv_iobuf</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">iobuf</span> <span class="n">send_iobuf</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SSL</span> <span class="o">*</span><span class="n">ssl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">connection_data</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">time_t</span> <span class="n">last_io_time</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define NSF_FINISHED_SENDING_DATA   (1 &lt;&lt; 0)</span>
</span><span class='line'><span class="cp">#define NSF_BUFFER_BUT_DONT_SEND    (1 &lt;&lt; 1)</span>
</span><span class='line'><span class="cp">#define NSF_SSL_HANDSHAKE_DONE      (1 &lt;&lt; 2)</span>
</span><span class='line'><span class="cp">#define NSF_CONNECTING              (1 &lt;&lt; 3)</span>
</span><span class='line'><span class="cp">#define NSF_CLOSE_IMMEDIATELY       (1 &lt;&lt; 4)</span>
</span><span class='line'><span class="cp">#define NSF_ACCEPTED                (1 &lt;&lt; 5)</span>
</span><span class='line'><span class="cp">#define NSF_WANT_READ               (1 &lt;&lt; 6)</span>
</span><span class='line'><span class="cp">#define NSF_WANT_WRITE              (1 &lt;&lt; 7)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NSF_USER_1                  (1 &lt;&lt; 26)</span>
</span><span class='line'><span class="cp">#define NSF_USER_2                  (1 &lt;&lt; 27)</span>
</span><span class='line'><span class="cp">#define NSF_USER_3                  (1 &lt;&lt; 28)</span>
</span><span class='line'><span class="cp">#define NSF_USER_4                  (1 &lt;&lt; 29)</span>
</span><span class='line'><span class="cp">#define NSF_USER_5                  (1 &lt;&lt; 30)</span>
</span><span class='line'><span class="cp">#define NSF_USER_6                  (1 &lt;&lt; 31)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Data structures and interfaces for I/O used for sending and receiving data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">iobuf</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">iobuf_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">iobuf</span> <span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">initial_size</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">iobuf_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">iobuf</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">size_t</span> <span class="nf">iobuf_append</span><span class="p">(</span><span class="k">struct</span> <span class="n">iobuf</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">data_size</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">iobuf_remove</span><span class="p">(</span><span class="k">struct</span> <span class="n">iobuf</span> <span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">data_size</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Event handling in net_skeleton</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Net skeleton interface</span>
</span><span class='line'><span class="c1">// Events. Meaning of event parameter (evp) is given in the comment.</span>
</span><span class='line'><span class="k">enum</span> <span class="n">ns_event</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NS_POLL</span><span class="p">,</span>     <span class="c1">// Sent to each connection on each call to ns_server_poll()</span>
</span><span class='line'>  <span class="n">NS_ACCEPT</span><span class="p">,</span>   <span class="c1">// New connection accept()-ed. union socket_address *remote_addr</span>
</span><span class='line'>  <span class="n">NS_CONNECT</span><span class="p">,</span>  <span class="c1">// connect() succeeded or failed. int *success_status</span>
</span><span class='line'>  <span class="n">NS_RECV</span><span class="p">,</span>     <span class="c1">// Data has benn received. int *num_bytes</span>
</span><span class='line'>  <span class="n">NS_SEND</span><span class="p">,</span>     <span class="c1">// Data has been written to a socket. int *num_bytes</span>
</span><span class='line'>  <span class="n">NS_CLOSE</span>     <span class="c1">// Connection is closed. NULL</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Callback function (event handler) prototype, must be defined by user.</span>
</span><span class='line'><span class="c1">// Net skeleton will call event handler, passing events defined above.</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ns_connection</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">ns_callback_t</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">enum</span> <span class="n">ns_event</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">evp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Besides the interfaces provieded, there are lots of <code>private</code> functions to make everything possible, these are all implemented in <code>net_skeleton.c</code> as <code>static</code> functions.</p>

<h3>Mongoose</h3>

<p>Well, here finally comes the main character! As the dirty work has been done by <code>net_skeleton</code>, <code>mongoose</code> can focus on the real job.</p>

<figure class='code'><figcaption><span>Core interfaces of mongoose</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Server management functions</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="nf">mg_create_server</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">server_param</span><span class="p">,</span> <span class="n">mg_handler_t</span> <span class="n">handler</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_destroy_server</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">**</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">mg_set_option</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">opt</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_poll_server</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">milliseconds</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="nf">mg_get_valid_option_names</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">mg_get_option</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="n">server</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_set_listening_socket</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">sock</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_get_listening_socket</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_iterate_over_connections</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="n">mg_handler_t</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_wakeup_server</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="nf">mg_connect</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Connection management functions</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_send_status</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">status_code</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_send_header</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_send_data</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data_len</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_printf_data</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_websocket_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">opcode</span><span class="p">,</span>
</span><span class='line'>                       <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">data_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Deprecated in favor of mg_send_* interface</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_printf</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="n">conn</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">mg_get_header</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">mg_get_mime_type</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">default_mime_type</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_get_var</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="n">conn</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">var_name</span><span class="p">,</span>
</span><span class='line'>               <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">buf_len</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_parse_header</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">hdr</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">var_name</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_parse_multipart</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">buf_len</span><span class="p">,</span>
</span><span class='line'>                       <span class="kt">char</span> <span class="o">*</span><span class="n">var_name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">var_name_len</span><span class="p">,</span>
</span><span class='line'>                       <span class="kt">char</span> <span class="o">*</span><span class="n">file_name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">file_name_len</span><span class="p">,</span>
</span><span class='line'>                       <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">data_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Utility functions</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">mg_start_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="o">*</span><span class="n">param</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="nf">mg_md5</span><span class="p">(</span><span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">33</span><span class="p">],</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_authorize_digest</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_expansion</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">keyword</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">handler</span><span class="p">)(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_template</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>                 <span class="k">struct</span> <span class="n">mg_expansion</span> <span class="o">*</span><span class="n">expansions</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Core data structures</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// This structure contains information about HTTP request.</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_connection</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">request_method</span><span class="p">;</span> <span class="c1">// &quot;GET&quot;, &quot;POST&quot;, etc</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">uri</span><span class="p">;</span>            <span class="c1">// URL-decoded URI</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">http_version</span><span class="p">;</span>   <span class="c1">// E.g. &quot;1.0&quot;, &quot;1.1&quot;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">query_string</span><span class="p">;</span>   <span class="c1">// URL part after &#39;?&#39;, not including &#39;?&#39;, or NULL</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="n">remote_ip</span><span class="p">[</span><span class="mi">48</span><span class="p">];</span>         <span class="c1">// Max IPv6 string length is 45 characters</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">local_ip</span><span class="p">[</span><span class="mi">48</span><span class="p">];</span>          <span class="c1">// Local IP address</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">remote_port</span><span class="p">;</span> <span class="c1">// Client&#39;s port</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">local_port</span><span class="p">;</span>  <span class="c1">// Local port number</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num_headers</span><span class="p">;</span>            <span class="c1">// Number of HTTP headers</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">mg_header</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>         <span class="c1">// HTTP header name</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>        <span class="c1">// HTTP header value</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">http_headers</span><span class="p">[</span><span class="mi">30</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">content</span><span class="p">;</span>              <span class="c1">// POST (or websocket message) data, or NULL</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">content_len</span><span class="p">;</span>         <span class="c1">// Data length</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">is_websocket</span><span class="p">;</span>           <span class="c1">// Connection is a websocket connection</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">status_code</span><span class="p">;</span>            <span class="c1">// HTTP status code for HTTP error handler</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">wsbits</span><span class="p">;</span>                 <span class="c1">// First byte of the websocket frame</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">server_param</span><span class="p">;</span>         <span class="c1">// Parameter passed to mg_add_uri_handler()</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">connection_param</span><span class="p">;</span>     <span class="c1">// Placeholder for connection-specific data</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">callback_param</span><span class="p">;</span>       <span class="c1">// Needed by mg_iterate_over_connections()</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_server</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_server</span> <span class="n">ns_server</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="n">socket_address</span> <span class="n">lsa</span><span class="p">;</span>   <span class="c1">// Listening socket address</span>
</span><span class='line'>  <span class="n">mg_handler_t</span> <span class="n">event_handler</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">config_options</span><span class="p">[</span><span class="n">NUM_OPTIONS</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Local endpoint representation</span>
</span><span class='line'><span class="k">union</span> <span class="n">endpoint</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>                     <span class="c1">// Opened regular local file</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="n">nc</span><span class="p">;</span>   <span class="c1">// CGI or proxy-&gt;target connection</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Event handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">enum</span> <span class="n">mg_event</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">MG_POLL</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>  <span class="c1">// Callback return value is ignored</span>
</span><span class='line'>  <span class="n">MG_CONNECT</span><span class="p">,</span>     <span class="c1">// If callback returns MG_FALSE, connect fails</span>
</span><span class='line'>  <span class="n">MG_AUTH</span><span class="p">,</span>        <span class="c1">// If callback returns MG_FALSE, authentication fails</span>
</span><span class='line'>  <span class="n">MG_REQUEST</span><span class="p">,</span>     <span class="c1">// If callback returns MG_FALSE, Mongoose continues with req</span>
</span><span class='line'>  <span class="n">MG_REPLY</span><span class="p">,</span>       <span class="c1">// If callback returns MG_FALSE, Mongoose closes connection</span>
</span><span class='line'>  <span class="n">MG_CLOSE</span><span class="p">,</span>       <span class="c1">// Connection is closed, callback return value is ignored</span>
</span><span class='line'>  <span class="n">MG_LUA</span><span class="p">,</span>         <span class="c1">// Called before LSP page invoked</span>
</span><span class='line'>  <span class="n">MG_HTTP_ERROR</span>   <span class="c1">// If callback returns MG_FALSE, Mongoose continues with err</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">mg_handler_t</span><span class="p">)(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">enum</span> <span class="n">mg_event</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Find something? Yes, <code>mongoose</code> is heavily using the underlying <code>net_skeleton</code>, as <code>ns_server</code> in <code>mg_server</code> suggests.</p>

<p>Or look at this:</p>

<figure class='code'><figcaption><span>Mongoose is just a wrapper for application built upon net_skeleton?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">mg_poll_server</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="n">server</span><span class="p">,</span> <span class="kt">int</span> <span class="n">milliseconds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">ns_server_poll</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ns_server</span><span class="p">,</span> <span class="n">milliseconds</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To be really aware of what is heppening under the hood, the functions below is the key:</p>

<figure class='code'><figcaption><span>The key functions to implement the basic web server</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">ns_add_to_set</span><span class="p">(</span><span class="n">sock_t</span> <span class="n">sock</span><span class="p">,</span> <span class="n">fd_set</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span> <span class="n">sock_t</span> <span class="o">*</span><span class="n">max_fd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">sock</span> <span class="o">!=</span> <span class="n">INVALID_SOCKET</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">FD_SET</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">set</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">max_fd</span> <span class="o">==</span> <span class="n">INVALID_SOCKET</span> <span class="o">||</span> <span class="n">sock</span> <span class="o">&gt;</span> <span class="o">*</span><span class="n">max_fd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="o">*</span><span class="n">max_fd</span> <span class="o">=</span> <span class="n">sock</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_server_poll</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="n">server</span><span class="p">,</span> <span class="kt">int</span> <span class="n">milli</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="n">conn</span><span class="p">,</span> <span class="o">*</span><span class="n">tmp_conn</span><span class="p">;</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tv</span><span class="p">;</span>
</span><span class='line'>   <span class="n">fd_set</span> <span class="n">read_set</span><span class="p">,</span> <span class="n">write_set</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">num_active_connections</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="n">sock_t</span> <span class="n">max_fd</span> <span class="o">=</span> <span class="n">INVALID_SOCKET</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">time_t</span> <span class="n">current_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">listening_sock</span> <span class="o">==</span> <span class="n">INVALID_SOCKET</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>       <span class="n">server</span><span class="o">-&gt;</span><span class="n">active_connections</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">read_set</span><span class="p">);</span>
</span><span class='line'>   <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">write_set</span><span class="p">);</span>
</span><span class='line'>   <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">listening_sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>   <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">conn</span> <span class="o">=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">active_connections</span><span class="p">;</span> <span class="n">conn</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">tmp_conn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">tmp_conn</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>     <span class="n">ns_call</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">NS_POLL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">current_time</span><span class="p">);</span>
</span><span class='line'>     <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_CONNECTING</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">write_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">send_iobuf</span><span class="p">.</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_BUFFER_BUT_DONT_SEND</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">write_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_CLOSE_IMMEDIATELY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">ns_close_conn</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">tv</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">milli</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="n">tv</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="p">(</span><span class="n">milli</span> <span class="o">%</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">select</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">max_fd</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">write_set</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="c1">// Accept new connections</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">listening_sock</span> <span class="o">!=</span> <span class="n">INVALID_SOCKET</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>     <span class="n">FD_ISSET</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">listening_sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// We&#39;re not looping here, and accepting just one connection at</span>
</span><span class='line'>   <span class="c1">// a time. The reason is that eCos does not respect non-blocking</span>
</span><span class='line'>   <span class="c1">// flag on a listening socket and hangs in a loop.</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">((</span><span class="n">conn</span> <span class="o">=</span> <span class="n">accept_conn</span><span class="p">(</span><span class="n">server</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">conn</span><span class="o">-&gt;</span><span class="n">last_io_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// Read possible wakeup calls</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">INVALID_SOCKET</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>     <span class="n">FD_ISSET</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>   <span class="n">recv</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>   <span class="n">send</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">conn</span> <span class="o">=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">active_connections</span><span class="p">;</span> <span class="n">conn</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">tmp_conn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">tmp_conn</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">FD_ISSET</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">conn</span><span class="o">-&gt;</span><span class="n">last_io_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>
</span><span class='line'>         <span class="n">ns_read_from_socket</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">FD_ISSET</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">write_set</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_CONNECTING</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">ns_read_from_socket</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_BUFFER_BUT_DONT_SEND</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">conn</span><span class="o">-&gt;</span><span class="n">last_io_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>
</span><span class='line'>           <span class="n">ns_write_to_socket</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">conn</span> <span class="o">=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">active_connections</span><span class="p">;</span> <span class="n">conn</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">tmp_conn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">tmp_conn</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>     <span class="n">num_active_connections</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_CLOSE_IMMEDIATELY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">ns_close_conn</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="c1">//DBG((&quot;%d active connections&quot;, num_active_connections));</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">num_active_connections</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Feel something? Go dig yourself for much more fun:&ndash;)</p>

<h2>Good References</h2>

<ul>
<li><a href="http://tinyhttpd.sourceforge.net/">tinyhttpd</a></li>
<li><a href="http://www.ibm.com/developerworks/systems/library/es-nweb/#icomments">nweb: a tiny, safe Web server (static pages only)</a></li>
<li><a href="https://users.cs.jmu.edu/bernstdh/web/common/lectures/slides_http-server-example_java.php">Design and Implementation of an HTTP Server in Java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我对IT书籍阅读的一点感悟]]></title>
    <link href="http://hustcalm.me/blog/2014/03/04/wo-dui-itshu-ji-yue-du-de-yi-dian-gan-wu/"/>
    <updated>2014-03-04T09:54:25+08:00</updated>
    <id>http://hustcalm.me/blog/2014/03/04/wo-dui-itshu-ji-yue-du-de-yi-dian-gan-wu</id>
    <content type="html"><![CDATA[<p>最近读书比较多，想着尽快把自己的短板补一补，读的过程中有点自己的感悟，发现IT书籍也是口味各异，都能跟文学书籍类比一下了，在此扯淡几句，图个乐子。</p>

<p>要是说文学书籍，大家可能会想到“散文”，“议论文”，“记叙文”，“诗歌”，“回忆录”之类的。而说到IT书籍，诸如编程语言，操作系统，嵌入式，Web开发框架，设计模式，面向对象等等之类的书可能会立马涌上心头。当下电子书给传统的纸质书造成了很大的冲击，在这种情况下，更要合理地调整自己的阅读习惯。在琳琅满目的书籍面前，每个人都面临选择，该购买哪本书，如何在有限的时间内吸收书中的精华，达到自己的阅读目的？下面就我自己的阅读经历分析一下以上问题。</p>

<!--more-->


<hr />

<h3>充分调研再选书，优先经典，适合自己</h3>

<p>现在的出版行业已经发达到“是个人都能出书”的地步了。所以在对某一类的书或者某本特别的书产生阅读欲望的时候，一定先要仔细评估一下，经过评估后才会买到对自己来说有价值的书，避免“被作者误导”。在学习方面，如果你不确定，我还是建议向“权威”学习，尤其是在计算机行业，同样是讲C++的书，我会毫不犹豫地优先选择“C++之父”的著作，他发明了C++，相比而言当然更有资格讲解并传授给他人。</p>

<p>既然说是IT书籍了，那就从技术书籍入手。举个例子，你想入门C语言了，怎么办？本科的时候，大家都知道“谭浩强”了，但是那本书很大程度上是被选择的，而不是我们自愿的。现在大家都有了独立思考的能力，自然会去Google搜索一下“C语言入门书籍”，看一些高质量的帖子，再问问身边一些C语言水平还可以的同学或者同事，基本上就可以甄别出什么才是“真正的C语言入门书籍”或者“C语言学习书籍”。基本上大家应该都比较推崇C语言三驾马车，即《C和指针》，《C陷阱和缺陷》，《C专家编程》。而这三本书又风格各异，虽然都是讲C语言的，但是就入门来说，《C和指针》当属首选，它讲解比较系统，循序渐进，初学者容易接受；而《C专家编程》正如书名所说，比较适合进阶学习；而对于《C陷阱和缺陷》，我个人感觉比较适合查漏补缺。</p>

<p>以上提到的三本书应该都是“C语言学习”领域还算经典的书，而最经典的莫过于“C语言之父”的《The C
Programming》，为啥不推荐这个小手册呢？虽说要靠近经典，但是也要因地制宜，“C语言”本身的核心是其编译器，而“C语言之父”的经典书籍是对语言本身的规范说明，类似产品说明书，我想给编译器开发者看比较合适，而对于试图学习如何使用这门语言的新手显然不是特别合适（当然也有例外，计算机背景特别强，编程天赋良好的人也许看看这本书就足够了）。</p>

<p>计算机本身是美国的专利，因此很多书籍开始都是“英文书籍”，社会发展到如今，主流的计算机书籍已经都有了“中译本”，那么读原版还是译本？这要看个人，英文功底允许的话，强烈推荐看原版，很多专业词汇在原著中表达地更加自然，有助于对技术本身的理解；英文跟不太上的话，看中译本也无妨，但是要提前做好思维上的准备，不要被译者的一些主观理解误导了（这种情况肯定存在，但好在不是很多）。</p>

<p>好了，我们定下了选择书籍的基调，如果有的选，就要“经典”的，甚至说“正统”的，耐心阅读，基本上可以把某一个领域的技术涵盖完全；一定要避免读了好几本烂书，没学到知识反而被误导了不少，就本科的C语言学习来说，这种情况是存在着的。尽量读英文原版，尽管不想承认，IT技术是被美国支配的，习惯阅读英文资料可以在一定程度上减少信息传播的延迟。</p>

<p>有了这个基调之后，我们还要选择“适合自己”的书籍，这在《Essential C++》的作者序言中也得到了有力的支撑，作者试图找一本能够“快速入门”Perl的小书，并强调存在这么一本小书是多么地必要。总的来讲，我觉得“适合自己”的书需要符合你的“阅读目的”。如果是想深入研究，那么买一本透彻讲解的书再好不过，比如《C++
Primer》；而为了快速上手，解决实际问题，那么一本小小的“handbook”可能就是你要找的；假如不太想偏技术，喜欢看看哲学讨论，那么看看“ESR”的书还是不错的。</p>

<p>选择正是你的品味的体现，相信随着阅读量的增大，你的阅读品味也会随之提高，并且更加适合自己。</p>

<p>时间是宝贵的，不要把它浪费在“一本烂书”上。</p>

<hr />

<h3>正确的阅读方法会事半功倍</h3>

<p>我们已经选好了书，是不是已经迫不及待地想开始阅读旅程？很多时候，我们不是缺书，我们是没有找到“正确且适合自己的”阅读方法。</p>

<p>有些人喜欢一口气图个痛快，有些人喜欢按部就班一天读一小段，而有些人直捣黄龙，找自己最关心的那一部分细细品味。是不是有点读文学书籍的意思了？就像文章开头说的，IT书籍也是风格各异，不同的书适合不同的读法，同时阅读方法需要紧密地和你的“阅读目的”联系起来。通读也好，略读也罢，只求书中之精华能为我所用，达到融会贯通之境界。</p>

<p>IT书籍大体可分为“工具入门类”，“理论原理类”，“实战经验总结类”，“技术文集类”，“面试备战类”等等。先说一些“散文”类的，比如Paul
Graham的《黑客与画家》，此类书是其多年的文章荟萃而成，因此非常适合跳读，找到自己感兴趣的略读；对于“工具入门”，比如语言入门，软件使用入门，最好按部就班，一步一个脚印地踏实学习，才能修成正果；而对于“实战”类，实际操作才是王道；“理论原理”则需要仔细琢磨，慢慢推敲，理解其原理后需要能够举一反三，解决实际问题；而“面试”类书籍，在我看来尽可以当成快餐书籍，短时间内研读。</p>

<p>在这里举个例子吧，比如你要学习Linux，想找一些参考书籍，比如《Running Linux》，《Linux In a Nutshell》，《The Linux Command Line》，《Advanced Linux Programming》之类的。那么这四本书的阅读方法一定是不同的，拿《Running
Linux》来说，它全书分为四个部分，包括“Linux使用”，“系统管理”，“Linux编程”和“Linux服务器”。阅读的时候选自己想读的部分即可，即当成“参考书”。而后面两本更甚，《Linux In a Nutshell》就像是一个Linux的“字典”或者“百科全书”，《The Linux Command Line》相对精简，但也重“参考”。相反，《ALP》则专注开发，适合系统地学习。</p>

<p>说到这里，再补充一下“书籍选择”的问题吧，更多的是在“电子书籍”和“纸质书籍”之间的折中。我个人觉得“电子书”一定是未来的大方向，符合现代生活节奏和生活理念。我个人的策略是，对于工具类和参考类的书籍，尽量用电子版，一来参考起来十分方便，在文件中搜索即可，二来不费钱也不占地方（目前来看，很多IT书籍存在不用出纸质版的必要的嫌疑，它们的出版很可能是由于工业惯性）。而对于经典的原理类书籍，需要仔细推敲，则买回来纸质版仔细研读是最合适不过的了。
而对于任何一本书，我比较推荐从大体上先有一个宏观的认识，即浏览一下书籍的目录结构，掌握书籍的脉络和行文风格，看看是否符合自己的学习习惯，如果不符合，大可以自己调整看的顺序，对于《程序员的自我修养》这本书，我个人的阅读顺序为4，1，2，3。前言我也是非常推荐大家看的，从这里面可以比较准确地把握作者在书中试图表达什么以及其成书的目的。每每阅读书的前言，我都会觉得很有意思，比如正在阅读的《松本行弘的程序世界》一书，就能切身感受到作者的幽默。</p>

<p>读书自然是抱着自己的目的的，时刻不要忘记了，你阅读是为了什么，带着问题去阅读，去思考，取其精华。单纯地享受阅读的乐趣，我也是不反对的，有时我就是这样的吧。</p>

<hr />

<h3>善于总结，让知识沉淀</h3>

<p>选了书，读了书，不能就这么算了。你的时间投入需要得到应有的回报，而阅读一本书最好的回报无异于“知识转化，为我所用”。大多数情况下，由人类的记忆特性决定的，阅读过程中的一些体会和醍醐灌顶，冷却一段时间后便又无影无踪。因此，阅读之后是一定要写点什么的，最好是边读边写，一边阅读一边记笔记会一定程度影响阅读速度，但是效率奇高。如果是纸质书，也可以直接在书上记下自己的心得和理解，阅读之后再写个书评，效果更佳。</p>

<p>还有一点就是在有可能的情况下，多跟身边的人交流阅读心得，我觉得“读书会”是一个很好的方式，无奈当下生活节奏过快，线下的“读书会”难以组织，那么线上的一些评论网站就是不二的选择了。我个人目前比较推荐豆瓣读书，我的个人读书页面在<a href="http://book.douban.com/people/hustcalm/">这里</a>。</p>

<p>这两天读了“多看阅读”上一本小书，叫做“独立博客”，由简书出品，虽然有点广告性质，但是里面独立博主的一些感想很有启发性。当下大环境下，独立博客更像是互联网中的孤岛，是博主自娱自乐的地方。希望在我的自娱自乐中能够带给大家一些帮助，如果你能到达我的孤岛的话:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of BeagleBone Robotic Projects - From a Technical Perspective]]></title>
    <link href="http://hustcalm.me/blog/2014/02/10/review-of-beaglebone-robotic-projects-from-a-technical-perspective/"/>
    <updated>2014-02-10T11:07:55+08:00</updated>
    <id>http://hustcalm.me/blog/2014/02/10/review-of-beaglebone-robotic-projects-from-a-technical-perspective</id>
    <content type="html"><![CDATA[<p>I&rsquo;m lucky to be a reviewer for the book <code>Beaglebone Robotic Projects</code> few months ago released by <a href="http://www.packtpub.com/">PACKT</a>. And I&rsquo;d like to recommend this book to readers who would like to play with <code>Beagle</code> for a while and start their own robotic projects. Below I&rsquo;ll talk a little bit about this book from a technical perspective.</p>

<!--more-->


<p>First of all, here is the cover of <a href="http://www.packtpub.com/beaglebone-robotic-projects/book">BeagleBone Robotic Projects</a>:</p>

<p><a href="http://www.packtpub.com/beaglebone-robotic-projects/book"><img src="http://hustcalm.me/images/blog_images/books/9329OT_BeagleBone_Robotic_Projects_cov.jpg"></a></p>

<h3>What you will learn from this book</h3>

<h4>What is BeagleBone Black</h4>

<p>As a <code>mini PC</code> or something, it is compared to <code>Raspberry Pi</code> sometimes. Some people would play with them as toys, some would like to do some amazing projects. It is a typical representative of <code>open source hardware</code>! And it runs the incredible <code>Linux</code>. Chapter 1 will guide you through to get your BeagleBone to work with a fully functioning desktop.</p>

<h4>Talk with BeagleBone Black through programming</h4>

<p>To be able to get started with BeagleBone and do what you want, some background in <code>Linux</code>, <code>Python</code> and <code>Programming</code> will be required. The 2nd chapter of the book will show you the basic Linux commands, brief tutorial for Python, etc.</p>

<h4>Simple speech recognition and make the robot speak</h4>

<p>Chapter 3 shows us how to make your robot speak as a robot utilizing <code>eSpeak</code> and how to do simple speech recognition using <code>PocketSphnix</code>. Also to test the <code>USB sound device</code>, we use <code>AlsaMixer</code> built upon <code>ALSA</code> libraries.</p>

<h4>Use camera as the Robot&rsquo;s eyes</h4>

<p>In chapter 4, the book first shows how to connect a USB camera to BeagleBone and viewing the images with <code>GUVCViewer</code>. After that is guide for installing a full-featured vision library &ndash; <code>OpenCV</code>. Then is a demo for detecting colored objects using <code>OpenCV</code>.</p>

<h4>Make it run by using Servos and Motors</h4>

<p>Chapter 5 will tell you how to make a <code>wheeled</code> robot and chapter 6 will show how a <code>legged</code> robot is made. The instructions for hooking up the wires and demos for controlling the servos and motors would definitely help a lot.</p>

<h4>Sense the environment to make some intelligence</h4>

<p>For avoiding obstables, we use a <code>USB sonar sensor</code> in chapter 7, or people will call it <code>ultrasonic sensor</code>. And for letting your robot know where it is, the book shows how to use a <code>GPS</code> module in chapter 9.</p>

<h4>Remote control for more fun</h4>

<p>Chapter 8 shows how to hook up a <code>LCD</code> display to your BeagleBone and control your robot with a <code>2.4GHz Keyboard</code>. Just imagine how it would be fun to see your robot running around whereas you just sitting there.</p>

<h4>Impossible is nothing</h4>

<p>Want something more? Chapter 10 will teach you how to integrate all the parts and skills covered in previous chapters to make a whole system. For more fun, chapter 11 is a good starting point. Want a sailing robot, flying robot or a submarine robot? This chapter will help a lot.</p>

<hr />

<h3>Highlights</h3>

<p>For the highlights of the book, I want to say that it covers a lot for a typical <code>embedded system</code> and will be very helpful tutorials for hobbiests to get started with their robotic projects. Not only hardware, but also open source software are widely used, instructions are clear and easy to read. To summarize,</p>

<ul>
<li>You will know basic Linux through this book</li>
<li>Python will be your handy programming language for doing robotic projects</li>
<li>Getting to know various useful software packages(eSpeak, PocketSphinx, OpenCV, GUVCViewer, etc)</li>
<li>Know the actuators for typical robots(servos and motors)</li>
<li>Have a basic understanding of sensors(ultrasonic, camera, GPS, etc)</li>
<li>Good starting point to make something big(multicopter maybe)</li>
</ul>


<hr />

<p>In a word, you may as well give the book a try and hope it can help:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing OpenCV on Mac OS X - 10 Minutes Tutorial]]></title>
    <link href="http://hustcalm.me/blog/2014/01/24/installing-opencv-on-mac-os-x-10-minutes-tutorial/"/>
    <updated>2014-01-24T00:03:00+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/24/installing-opencv-on-mac-os-x-10-minutes-tutorial</id>
    <content type="html"><![CDATA[<p>A simple tutorial to get OpenCV set up on Mac OS X. I get this done on my Macbook Pro with Mavericks OS. Luckily enough, you will success following the instructions blow.</p>

<hr />

<h3>Prerequisites</h3>

<h4>Source Code</h4>

<p>You can download the source code from <a href="http://opencv.org/">OpenCV Official Site</a>, I prefer to pull the source using <code>git</code> however.</p>

<pre><code>git clone https://github.com/Itseez/opencv.git
</code></pre>

<!--more-->


<h4>Build Tools</h4>

<p>I use <a href="http://brew.sh/">Homebrew</a> as my package manager, to install <code>Homebrew</code>, use:</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></pre>

<p>After brew installed, get <code>CMake</code> by:</p>

<pre><code>brew install cmake
</code></pre>

<hr />

<h3>Build and Install OpenCV</h3>

<p>Now the recipes are ready, let&rsquo;s cook:</p>

<pre><code>cd opencv
mkdir build
cd build
cmake -G "Unix Makefiles" ..
make -j8
sudo make install
</code></pre>

<hr />

<h3>Verify Installation</h3>

<p>Let&rsquo;s rock by building a simple sample:</p>

<pre><code>cd opencv/samples/cpp
g++ edge.cpp -o edge `pkg-config --cflags --libs opencv`
./edge
</code></pre>

<p>You should see a window pop up and demo the <code>Canny edge detection</code>.</p>

<hr />

<p>Happy playing with OpenCV, drop me a line if you got problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Know Your Website Better Using Google Webmaster Tools, Analytics and Authorship]]></title>
    <link href="http://hustcalm.me/blog/2014/01/23/know-your-website-better-using-google-webmaster-tools-analytics-and-authorship/"/>
    <updated>2014-01-23T19:05:43+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/23/know-your-website-better-using-google-webmaster-tools-analytics-and-authorship</id>
    <content type="html"><![CDATA[<p>I happened to get to know <code>Google Webmaster Tools</code>, <code>Google Analytics</code> and <code>Google Authorship Markup</code> when I try to tweak my <code>Octopress</code> website. Found that Google is really doing lots of interesting things for our websites, I will share some useful tips and links here.</p>

<hr />

<h3>Google Webmaster Tools</h3>

<p>Go to <a href="http://www.google.com/webmasters/">Official Webmasters</a> to get started, first try to look around to know what <code>Webmasters</code> aims to do. After that, login to <a href="https://www.google.com/webmasters/tools">Webmaster Tools</a> , add your website by clicking <code>Add Website</code>, then verify the website according to the hints.</p>

<!--more-->


<p>As long as you have claimed the owership of your website, you can see the dashboard for detailed information. You can submit your <code>sitemap</code>, see the <code>search query</code> statistics, the status of your website.</p>

<p>Explore more to find something more exciting:&ndash;)</p>

<p>To be more professional, see <a href="https://support.google.com/webmasters/answer/35769?hl=en">Webmaster Guidelines</a>.</p>

<hr />

<h3>Google Analytics</h3>

<p>Even better, <a href="http://www.google.com/analytics/">Google Analytics</a> will let you know every single click from users to your website. See <a href="http://www.google.com/analytics/features/index.html">Analytics features</a> for complete lists to know what <code>Analytics</code> can do. Initially set up for commercial use or marketing promotion, we can adapt this technique to our personal website.</p>

<p>Also, look carefully about <code>your website report</code>, I bet you will find something interesting. For developers, there are <a href="https://developers.google.com/analytics/devguides/?csw=1">Developer Guides &amp; Reference for Google Analytics</a>.</p>

<hr />

<h3>Google Authorship</h3>

<p>Well, it would be cool to attribute the article or post to its author, <a href="https://plus.google.com/authorship">Google Authorship</a> is the one who helps.</p>

<p>See the professional article <a href="http://searchengineland.com/the-definitive-guide-to-google-authorship-markup-123218">The Definitive Guide To Google Authorship Markup</a> for details. To test if you have successfully set your authorship, use <a href="www.google.com/webmasters/tools/richsnippets">Google Structured Data Testing
Tool</a>.</p>

<p>As for me, I verified my authorship through my Email related to my domain bought from <a href="https://name.com">name.com</a>. Simple Enable <code>Email Service</code> through the domain dashboard, you can set up a forward Email for your owned domain Email address.</p>

<hr />

<h3>Google FeedBurner</h3>

<p><a href="http://feedburner.google.com">FeedBurner</a> is a service for <code>RSS</code> subscribe. It&rsquo;s flexible enough and ease your pain when switching domains.</p>

<p>After you add your blog to feedburner, it supports <code>RSS readers</code> by default. So if you want your readers to subscribe through their Emails, go to your feeds and click <code>Publicize</code>, then click <code>Email Subscriptions</code>, down the page to click <code>Active</code> to make the service alive.</p>

<p>See other tabs of your feeds, there are really lots of for you to tweak and play with.</p>

<hr />

<p>When you find blogging more interesting and part of your life, it&rsquo;s time to give an eye for your website status and traffic. I used to blog for just expressing myself, but now I also tend to write something that readers would enjoy.</p>

<p>Hope this post would get you to know with the Google tools that you can use and make you a better blogger:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simply Get BOINC Running on CentOS 6.4 and Earn XRP]]></title>
    <link href="http://hustcalm.me/blog/2014/01/22/simply-get-boinc-running-on-centos-6-dot-4-and-earn-xrp/"/>
    <updated>2014-01-22T08:56:56+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/22/simply-get-boinc-running-on-centos-6-dot-4-and-earn-xrp</id>
    <content type="html"><![CDATA[<p>Recently I got to know <a href="http://boinc.berkeley.edu">BOINC</a> from a friend and find it funny to play with. <code>BOINC</code> is an open-source software platform for computing using volunteered resources, which means that people can donate their computing resources to varies of research projects through it. <code>BOINC</code> is an acronym for <code>Berkeley Open Infrastructure for Network Computing</code>. See <a href="http://boinc.berkeley.edu">their website</a> for more details.</p>

<!--more-->


<p>However, <code>BOINC</code> has the client side and the server side, in order to let people know what projects they can contribute to, how about their statistics and rankings, etc, we have <a href="http://worldcommunitygrid.org">World Community Grid</a>, namely the server side. <strong>World Community Grid(WCG)</strong> is an effort to create the world&rsquo;s largest public computing grid to tackle scientific research projects that benefit humanity, Launched on November 16, 2004, it is funded and operated by IBM with client
software currently available for Windows, Linux, Mac OS X and FreeBSD operating systems. Here for the client software, it is the <code>BOINC</code> we refered above. For <strong>WCG</strong> itself, go to <a href="http://worldcommunitygrid.org">their website</a> and also see <a href="http://www.ibm.com/smarterplanet/us/en/business_analytics/article/wcg.html">this article from IBM</a>.</p>

<p>Basically, people just donate their computing resources for free, but we can also donate for good. Here comes the <a href="https://www.computingforgood.org">Computing for Good</a> brought by <a href="http://ripple.com">rippleLabs</a>. They are giving away XRP in exchange for donating computing power to scientific research via World Community Grid. Anyone with an Internet-connected computer or Android device can participate.</p>

<p>So we are going to earn XRP for donating our computing power, for me, on a <code>DELL Optiplex 960</code> running <code>CentOS 6.4 x86_64</code>. Here goes the steps.</p>

<hr />

<h3>Register for World Community Grid</h3>

<p>Go to <a href="http://worldcommunitygrid.org">World Community Grid</a> and click <code>Join Today!</code>, or just click <a href="http://www.worldcommunitygrid.org/reg/viewRegister.do">here</a> for direct portal. Complete the registration form and you are ready to go. For the software, you may download according to your operating system from here, or go to <code>BOINC</code>. I will give installation details in the next section.</p>

<p><strong>After your registration, login and go to settings, then join the team <code>Ripple Labs</code>.</strong></p>

<hr />

<h3>Get BOINC Running</h3>

<p>I will be detailed for my <code>CentOS 6.4 x86_64</code>, for others, refer to <a href="http://boinc.berkeley.edu/wiki/User_manual">BOINC User Mannual</a>.</p>

<h4>Check your repos</h4>

<pre><code>ls -al /etc/yum.repos.d/
</code></pre>

<h4>Add EPEL repo</h4>

<pre><code>wget http://download.fedoraproject.org/pub/epel/x86_64/epel-release-6-8.noarch.rpm
sudo rpm -ivh epel-release-6-8.noarch.rpm
sudo rmp --import /etc/pki/rpm-gpg/RMP-GPG-KEY-EPEL-6
yum clean all
yum list
</code></pre>

<h4>Install BOINC using yum</h4>

<p>Below is the version for Terminal guys, for more details you may want to refer to <a href="http://boinc.berkeley.edu/wiki/Installing_BOINC_on_Fedora">Installing BOINC on Fedora</a>.</p>

<p>The <code>boinc-manger</code> is your case if you prefer using GUI for interfacing, however if working under Terminal, <code>boinc-client</code> is enough. I will install both here:</p>

<pre><code>su -c 'yum install boinc-client boinc-manager'
</code></pre>

<p>Make it an auto-start service:</p>

<pre><code>chkconfig boinc-client on
</code></pre>

<p>Verify the installation:</p>

<pre><code>ps aux | grep boinc
</code></pre>

<p>See what has been installed:</p>

<pre><code>which boinc_client | xargs file
which boinc        | xargs file
which boinccmd     | xargs file
which boinc_gui    | xargs file
which boincmgr     | xargs file
</code></pre>

<p>For help:</p>

<pre><code>man boinc
man boinccmd
man boincmgr
</code></pre>

<p>Set up your accounts:</p>

<pre><code>sudo usrmod -G boinc -a your_username
sudo chmod g+rw /var/lib/boinc
sudo chmod g+rw /var/lib/boinc/*.*
sudo ln -s /var/lib/boinc/gui_rpc_auth.cfg ~/gui_rpc_auth.cfg
</code></pre>

<p>Finally, <strong>logout and login again</strong> to renew your groupship and permission to /var/lib/boinc.</p>

<h4>Attach WCG project to BOINC</h4>

<pre><code>boinccmd --project_attach http://www.worldcommunitygrid.org/ YOUR_ACCOUNT_KEY
boinccmd update
</code></pre>

<p><code>YOUR_ACCOUNT_KEY</code> can be found at your <code>WCG Profile</code>.</p>

<h4>Check the BOINC status</h4>

<pre><code>boinccmd --get_state
</code></pre>

<hr />

<h3>Register Ripple Wallet</h3>

<p>Go to <a href="https://ripple.com">ripple website</a> and register a wallet. Do remember the related keys for security.</p>

<hr />

<h3>Connect your WCG and Ripple Wallet</h3>

<p>Finally, go to <a href="https://www.computingforgood.org">Computing for Good</a> and get your <code>WCG</code> and <code>Ripple Wallet</code> connected.</p>

<p>Just click <code>REGISTER</code>, the guide will get you done very soon, all you need to do is to provide the specified <code>wallet address</code> and <code>WCG account</code>.</p>

<hr />

<p>Happy digging and contributing:&ndash;)</p>
]]></content>
  </entry>
  
</feed>
