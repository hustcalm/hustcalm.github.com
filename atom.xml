<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to Pandora's Box]]></title>
  <link href="http://hustcalm.me/atom.xml" rel="self"/>
  <link href="http://hustcalm.me/"/>
  <updated>2014-01-22T16:16:57+08:00</updated>
  <id>http://hustcalm.me/</id>
  <author>
    <name><![CDATA[hustcalm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simply Get BOINC Running on CentOS 6.4 and Earn XRP]]></title>
    <link href="http://hustcalm.me/blog/2014/01/22/simply-get-boinc-running-on-centos-6-dot-4-and-earn-xrp/"/>
    <updated>2014-01-22T08:56:56+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/22/simply-get-boinc-running-on-centos-6-dot-4-and-earn-xrp</id>
    <content type="html"><![CDATA[<p>Recently I got to know <a href="http://boinc.berkeley.edu">BOINC</a> from a friend and find it funny to play with. <code>BOINC</code> is an open-source software platform for computing using volunteered resources, which means that people can donate their computing resources to varies of research projects through it. <code>BOINC</code> is an acronym for <code>Berkeley Open Infrastructure for Network Computing</code>. See <a href="http://boinc.berkeley.edu">their website</a> for more details.</p>

<!--more-->


<p>However, <code>BOINC</code> has the client side and the server side, in order to let people know what projects they can contribute to, how about their statistics and rankings, etc, we have <a href="http://worldcommunitygrid.org">World Community Grid</a>, namely the server side. <strong>World Community Grid(WCG)</strong> is an effort to create the world&rsquo;s largest public computing grid to tackle scientific research projects that benefit humanity, Launched on November 16, 2004, it is funded and operated by IBM with client
software currently available for Windows, Linux, Mac OS X and FreeBSD operating systems. Here for the client software, it is the <code>BOINC</code> we refered above. For <strong>WCG</strong> itself, go to <a href="http://worldcommunitygrid.org">their website</a> and also see <a href="http://www.ibm.com/smarterplanet/us/en/business_analytics/article/wcg.html">this article from IBM</a>.</p>

<p>Basically, people just donate their computing resources for free, but we can also donate for good. Here comes the <a href="https://www.computingforgood.org">Computing for Good</a> brought by <a href="http://ripple.com">rippleLabs</a>. They are giving away XRP in exchange for donating computing power to scientific research via World Community Grid. Anyone with an Internet-connected computer or Android device can participate.</p>

<p>So we are going to earn XRP for donating our computing power, for me, on a <code>DELL Optiplex 960</code> running <code>CentOS 6.4 x86_64</code>. Here goes the steps.</p>

<hr />

<h3>Register for World Community Grid</h3>

<p>Go to <a href="http://worldcommunitygrid.org">World Community Grid</a> and click <code>Join Today!</code>, or just click <a href="http://www.worldcommunitygrid.org/reg/viewRegister.do">here</a> for direct portal. Complete the registration form and you are ready to go. For the software, you may download according to your operating system from here, or go to <code>BOINC</code>. I will give installation details in the next section.</p>

<p><strong>After your registration, login and go to settings, then join the team <code>Ripple Labs</code>.</strong></p>

<hr />

<h3>Get BOINC Running</h3>

<p>I will be detailed for my <code>CentOS 6.4 x86_64</code>, for others, refer to <a href="http://boinc.berkeley.edu/wiki/User_manual">BOINC User Mannual</a>.</p>

<h4>Check your repos</h4>

<pre><code>ls -al /etc/yum.repos.d/
</code></pre>

<h4>Add EPEL repo</h4>

<pre><code>wget http://download.fedoraproject.org/pub/epel/x86_64/epel-release-6-8.noarch.rpm
sudo rpm -ivh epel-release-6-8.noarch.rpm
sudo rmp --import /etc/pki/rpm-gpg/RMP-GPG-KEY-EPEL-6
yum clean all
yum list
</code></pre>

<h4>Install BOINC using yum</h4>

<p>Below is the version for Terminal guys, for more details you may want to refer to <a href="http://boinc.berkeley.edu/wiki/Installing_BOINC_on_Fedora">Installing BOINC on Fedora</a>.</p>

<p>The <code>boinc-manger</code> is your case if you prefer using GUI for interfacing, however if working under Terminal, <code>boinc-client</code> is enough. I will install both here:</p>

<pre><code>su -c 'yum install boinc-client boinc-manager'
</code></pre>

<p>Make it an auto-start service:</p>

<pre><code>chkconfig boinc-client on
</code></pre>

<p>Verify the installation:</p>

<pre><code>ps aux | grep boinc
</code></pre>

<p>See what has been installed:</p>

<pre><code>which boinc_client | xargs file
which boinc        | xargs file
which boinccmd     | xargs file
which boinc_gui    | xargs file
which boincmgr     | xargs file
</code></pre>

<p>For help:</p>

<pre><code>man boinc
man boinccmd
man boincmgr
</code></pre>

<p>Set up your accounts:</p>

<pre><code>sudo usrmod -G boinc -a your_username
sudo chmod g+rw /var/lib/boinc
sudo chmod g+rw /var/lib/boinc/*.*
sudo ln -s /var/lib/boinc/gui_rpc_auth.cfg ~/gui_rpc_auth.cfg
</code></pre>

<p>Finally, <strong>logout and login again</strong> to renew your groupship and permission to /var/lib/boinc.</p>

<h4>Attach WCG project to BOINC</h4>

<pre><code>boinccmd --project_attach http://www.worldcommunitygrid.org/ YOUR_ACCOUNT_KEY
boinccmd update
</code></pre>

<p><code>YOUR_ACCOUNT_KEY</code> can be found at your <code>WCG Profile</code>.</p>

<h4>Check the BOINC status</h4>

<pre><code>boinccmd --get_state
</code></pre>

<hr />

<h3>Register Ripple Wallet</h3>

<p>Go to <a href="https://ripple.com">ripple website</a> and register a wallet. Do remember the related keys for security.</p>

<hr />

<h3>Connect your WCG and Ripple Wallet</h3>

<p>Finally, go to <a href="https://www.computingforgood.org">Computing for Good</a> and get your <code>WCG</code> and <code>Ripple Wallet</code> connected.</p>

<p>Just click <code>REGISTER</code>, the guide will get you done very soon, all you need to do is to provide the specified <code>wallet address</code> and <code>WCG account</code>.</p>

<hr />

<p>Happy digging and contributing:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Your Slides the Awesome Way]]></title>
    <link href="http://hustcalm.me/blog/2014/01/12/making-your-slides-the-awesome-way/"/>
    <updated>2014-01-12T00:08:45+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/12/making-your-slides-the-awesome-way</id>
    <content type="html"><![CDATA[<p>People will always find themselves making varies of slides for demo or promotion or report, whatever. Most would know how to make a slide ,right? <code>PPT</code> would be the first choice to majority of people. For web developers, they would produce their slides in <code>HTML + CSS + Javascript</code>? And for researchers or people in academic area, will they use <code>Latex</code> or the popular <code>beamer</code> class?</p>

<!--more-->


<p>We do have kinds of approaches to make us slids work, but what is the awesome way? To be awesome, I mean the sides should look nice, easy to control its typeset and should maintain the same when playing at different devices or different software. Of course, the way to write your slide could be awesome too:&ndash;)</p>

<p>I will simply go through what choices that we have, what&rsquo;s the advantage disadvantage, and finally choose the way that you think is awesome to you.</p>

<h3>Choices for making slides</h3>

<h4>The normal way &ndash; PPT</h4>

<h4>Cool way utilizing browser &ndash; HTML + CSS</h4>

<h4>Awesome way using Latex &ndash; beamer</h4>

<h3>Awesome way for making slides</h3>

<p>To me, the awesome would be to use <code>HTML + CSS</code> or <code>beamer</code>. Why? Simply because they are cross platform naturely and it&rsquo;s really flexible when creating slides by writing plain markup files or something like that.</p>

<h3>Choose your awesome way</h3>

<p>Most of the times, you will find the ways or methods are not the essential things, the contents and the way you represent is the key. So just choose the right way for you, making it your awesome way. I believe everyone will make a perfect job once he gets skillful enough.</p>

<p>Links:</p>

<ul>
<li><a href="http://jeromyanglim.blogspot.com/2010/08/getting-started-with-beamer-tips-and.html">Getting Started with Beamer: Tips and Tricks for LaTeX Presentations</a></li>
<li><a href="http://www.productivescholar.com/2008/03/15/how-to-use-the-latex-beamer-class-for-great-looking-presentations/">How-To Use the LaTeX Beamer Class for Great-Looking Presentations</a></li>
<li><p><a href="http://lucatrevisan.wordpress.com/2010/11/18/presenting-a-beamer-talk-the-right-way/">Presenting a Beamer Talk the Right Way</a></p></li>
<li><p><a href="http://www.math-linux.com/latex-26/How-to-make-a-presentation-with">How to make a presentation with Latex &ndash; Introduction to Beamer</a></p></li>
<li><a href="http://www.uncg.edu/cmp/reu/presentations/Charles%20Batts%20-%20Beamer%20Tutorial.pdf">A Beamer Tutorial in Beamer</a></li>
<li><a href="http://www.tug.org/pracjourn/2005-4/mertz/mertz.pdf">Beamer by Example</a></li>
<li><a href="http://www.informatik.uni-freiburg.de/~frank/ENG/latex-course/latex-course-3/latex-course-3_en.html">examples of beamer class</a></li>
<li><a href="http://heather.cs.ucdavis.edu/~matloff/beamer.html">Norm Matloff&rsquo;s Quick Tutorial on the Beamer Package for Slide Making in LaTeX</a></li>
<li><a href="http://www.math.umbc.edu/~rouben/beamer/quickstart.html">A Beamer Quickstart</a></li>
<li><p><a href="http://zrno.fsb.hr/katedra/download/materijali/1082.pdf">Beamer Class Tutorial &ndash; Warsaw University of Technology</a></p></li>
<li><p><a href="http://readingsml.blogspot.com/2009/11/keynote-vs-powerpoint-vs-beamer.html">Keynote vs. Powerpoint vs. Beamer</a></p></li>
<li><p><a href="http://johnmacfarlane.net/pandoc/demo/example9/producing-slide-shows-with-pandoc.html">Producing slide shows with Pandoc</a></p></li>
<li><p><a href="http://net.tutsplus.com/tutorials/html-css-techniques/how-to-create-presentation-slides-with-html-and-css-2/">How to Create Presentation Slides with HTML and CSS</a></p></li>
<li><p><a href="http://www.forbes.com/sites/allbusiness/2013/11/25/7-principles-for-making-powerpoint-slides-with-impact/">5 Principles For Making PowerPoint Slides With Impact &ndash; 1</a></p></li>
<li><a href="http://www.forbes.com/sites/allbusiness/2013/11/25/7-principles-for-making-powerpoint-slides-with-impact/2/">5 Principles For Making PowerPoint Slides With Impact &ndash; 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Getting Started - Methodologies and Practices]]></title>
    <link href="http://hustcalm.me/blog/2014/01/06/linux-getting-started-methodologies-and-practices/"/>
    <updated>2014-01-06T22:22:00+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/06/linux-getting-started-methodologies-and-practices</id>
    <content type="html"><![CDATA[<p>This is basically a topic that I gave to <a href="http://blog-ossclub.rhcloud.com/">Open-CAS</a> group members as a technique share. Since I have known Linux for over 4 years and heavily used it for 2 years more or less, I find myself realy attracted by it.</p>

<p>Also I want others to have the chance to live with a better OS(Unix and Linux, also Mac OS of course), so it&rsquo;s a good time to take the good points out of my mind and let more people know.</p>

<p>It&rsquo;s good to learn from each other especially when there are problems to solve. So I put my mind at a <code>github</code> repo called <a href="https://github.com/hustcalm/linux-getting-started">linux-getting-started</a> and hope that others would join me to make this repo more useful.</p>

<!--more-->


<h3>What&rsquo;s in this repo</h3>

<p>Currently, I&rsquo;m addressing two aspects for <code>Linux Getting Started</code>, namely <code>Methodologies</code> and <code>Practices</code>. I know these are really big words, but they just fit here since I want to tell people <code>how to learn</code> not just <code>what to learn</code>.</p>

<h4>Methodologies</h4>

<p>Know what you are gonna do before you step out. Basically, for Linux beginners, the first step that I recommend is <code>install a Linux distro that you like</code>. Then just <code>use it</code> before you want to know everything about it(seems that no one will never ever). It&rsquo;s an OS after all, you use it for your daily job and solve your problems, not a magic software that just plays magic.</p>

<p>A good book would give you a real quick start, I have divided the books into three levels:</p>

<ul>
<li>[Beginner]</li>
</ul>


<p>Newbies who just get to know Linux &ndash; Learn how to live with shell</p>

<ul>
<li>[Developer]</li>
</ul>


<p>Experienced programmers especially for C/C++ guys &ndash; get used to Linux Platform</p>

<ul>
<li>[Next]</li>
</ul>


<p>Ones who will dive deeper into the most complicated but fun part &ndash; Kernel and Driver</p>

<p><strong>In one word, use it, learn it, dive into it!</strong></p>

<h4>Practices</h4>

<p>Using and Reading will give a quite well understanding for Linux, but not enough for mastering it. To become <code>real Linux users or developers</code>, remember <code>never leave your eyes off the screen and your fingers off your keyboard</code>, practice will just make perfect things and a great Linuxer, believe me:&ndash;)</p>

<p>I address two technical parts currently in this repo, <code>Shell Scripting</code> and <code>Makefile</code>. Other parts will definitely added as long as I maintain this repo.</p>

<h5>Shell Scripting</h5>

<p>Before beginning with <code>Shell Scripting</code>, I suppose you have already been familiar with varies of commands or utilities in shell.</p>

<p>To be straight, <code>shell</code> itself is a program which will interpret user&rsquo;s commands or instructions, convert them to <code>system calls</code> or other things that OS can understand. So basically speaking, <code>shell</code> is the interface between <code>user</code> and <code>OS Kernel</code>.</p>

<p>As a script language, it has its own variables, functions and flow control statements, also it features many other stuff which will ease much pain for system administration but maybe worse if not used properly. When we are writing shell scripts, we are actually dealing with processes and interprocess communication, each process would do its job and we can use <code>pipe</code>, <code>socket</code>, <code>named-pipes</code> or <code>file</code> to let them talk to each other.</p>

<p>You can definitely play some magic with shell scripting by choosing your favorite shell, like <code>Bash</code>, <code>Ksh</code>, <code>Zsh</code>, etc.</p>

<h5>Makefile</h5>

<p>As you get to know <code>shell</code>, you are ready to know something about <code>makefile</code>. Before that, I will talk about <code>make</code>, <code>autotools</code> first.</p>

<p>When we are trying to build a big project, no one want to invoke every single compiling commands by hand which is annoying but also error prone. Here comes <code>make</code> to figure out this problem. So when you download a package with source code, to build it, simply type:</p>

<pre><code>make
sudo make install
</code></pre>

<p>Then you are done!</p>

<p>Is this that easy? Reality will really disappoint us, because the user&rsquo;s OS or environment always will not be consistent with the developer&rsquo;s. So <code>make</code> does not easy the pain for buiding a package or software from scratch, but making it easier to manage a big project.</p>

<p>So what&rsquo;s the solution? Here comes the <code>Autotools</code>, which will generate <code>makefiles</code> automatically according to the configuration of your system. Like you got a third party library A, and one package needs the library for one feature, <code>Autotools</code> will take care of whether you got the library installed, if yes, then build the package with the feature enabled, or just disable it otherwise.</p>

<p>Cool, isn&rsquo;t it? Yes for the users, but maybe no for the developers, I mean all the pain will be transfered to the developers since they got to write <code>Autotools</code> scripts to make things right. Just another wrapper to give a good, cross-platform and generic solution? Some people would quite agree with this opinion.</p>

<p>Thanks to the <code>Autotools</code>, people are getting used to:</p>

<pre><code>./configure
make
sudo make install
</code></pre>

<p>There are many others excellent build systems or tools out there, like <code>CMake</code>, <code>QMake</code>, <code>Scons</code>, <code>Ninja</code> ,etc. Go and try them out!</p>

<hr />

<h3>Where is the slide</h3>

<p>Honestly speaking, the slide is just a chain which helps me to make a clear topic. So you will not find it big, just about 15 pages, however to spread all the sparking mind, you will find it&rsquo;s really a <code>big one</code> again.</p>

<p>If you want, download the slide at <a href="https://github.com/hustcalm/linux-getting-started/blob/master/linux-getting-started-%40hustcalm.pdf">here</a>.</p>

<hr />

<h3>What if I want to see something else</h3>

<p>Cool, buddy, I do hope that we can maintain this repo together and help more people to get started with Linux. So you are welcome to add interesting topics or useful links or good references or books to this repo.</p>

<p>You may either <code>fork</code> this <a href="https://github.com/hustcalm/linux-getting-started">repo</a>, add something interesting, then <code>pull request</code> to me.</p>

<p>Or you can just add what you want to know to the <code>wishList</code> file after <code>fork</code>, maybe shortly I will add stuff about the topic that you care about.</p>

<p>Help others, help yourself:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Qt and Qt Creator]]></title>
    <link href="http://hustcalm.me/blog/2014/01/02/getting-started-with-qt-and-qt-creator/"/>
    <updated>2014-01-02T15:42:00+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/02/getting-started-with-qt-and-qt-creator</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;m doing a project for the Lab and choose C++ as the programming language, but for the Framework, I considered MFC and Qt at first but choose Qt without hesitation as soon as I recalled the pains when I tried to play with MFC. In short, MFC is just showing too much to the developer and looks a little annoying and more complicated(C++ itself is complicated enough).</p>

<p>To be clear, I did not try Qt before either and totally new to it. But after two months, I wrote a running application which can deal with Cameras, IMU and Inclinometer, also a 6DOF controller. Besides, we have multithreading in it and multiply timers are running simultaneously. To summarize what I have learned and also share my experience to you is the desire to write this post.</p>

<!--more-->


<p>I also find that Qt Creator is really cool with the plugin <code>FakeVim</code> enabled(It is installed by default ,at least in my Qt Creator 2.8.1 Windows version), a light wight IDE with powerful abilities! So in this post, after talking about how to get started with Qt, I will give some appreciations to Qt Creator:&ndash;)</p>

<hr />

<h3>Beginning with Qt</h3>

<h4>Get to know Qt</h4>

<p>It&rsquo;s essentially a GUI toolkit when fist designed, but after years of development, it has evolved into a framework which is cross platform and popular.</p>

<p>For official introduction, visit <a href="http://qt-project.org/">Qt Project</a>.</p>

<h4>Choosing the way that you use</h4>

<p>I will not talk about the versions ,like 5.x or 4.x. Let&rsquo;s say something about the <code>prebuilt-binaries</code> and <code>source code</code>.</p>

<p>If you choose to build from scratch, it would take a bit of time to do that since Qt is big enough. If using the built binaries, do look at the related compilor, for Windows, you got options for VS 2008, VS 2010, VS 2012 and MinGW stuff. If you are using VS 2008(in my case), choosing this file <a href="http://download.qt-project.org/official_releases/qt/4.8/4.8.5/qt-win-opensource-4.8.5-vs2008.exe">Qt libraries 4.8.5 for Windows (VS 2008, 235 MB)</a>, just for an example,then probably you are good to go when you build your project with VS 2008 as the backend.</p>

<p>For Qt Creator, I prefer to use the perbuilt one too, but if you want to install some specified plugins, build from source code may be needed.</p>

<h4>A good book would help a lot</h4>

<p>I read the book <code>C++ GUI Programming with Qt 4(2nd Edition)</code> not because it&rsquo;s the best book for Qt, just because that we got one Chinese version copy of the book in our Lab. I went through the first 3 chapters and the appendix(mainly to know more about <code>qmake</code>), then referenced other chapters while I got problems when coding.</p>

<p>For the comment that I wrote for the book, you can find it <a href="http://book.douban.com/review/6489896/">here</a>.</p>

<p>However, this book is recommended as the official Qt book. You may want to try it out yourself and make your own judge, if you find another excellent book, do let me know:&ndash;)</p>

<h4>See what the official says</h4>

<p>For the official tutorials, you can refer to their website, like:</p>

<ul>
<li><a href="http://qt-project.org/doc/qt-5/gettingstarted.html">Getting Started with Qt</a></li>
<li><a href="http://qt-project.org/doc/qt-4.8/how-to-learn-qt.html">How to Learn Qt</a></li>
<li><a href="http://qt-project.org/doc/qt-4.7/how-to-learn-qt.html">How to Learn Qt</a></li>
</ul>


<p>You may notice that each Qt version got their own getting started web page, however, don&rsquo;t bother, checkout them all and pick the brilliant part that suits yourself.</p>

<p>As time goes by, there may be new links and the listed links would be out of date. Go to the official website and find the real links then.</p>

<hr />

<h3>Qt Creator as your Swiss Army Knife</h3>

<p>Yes, it is just an IDE, compared with Eclipse, it&rsquo;s dedicated to Qt and C++(Not exactly, it supports Android and even BlackBerry development), so much light-wighted. However, it&rsquo;s flexible and with lots of plugins, see <a href="http://qt-project.org/wiki/Qt_Creator_Plug-in_Gallery">Qt Creator Plugin Gallery</a>.</p>

<p>As I&rsquo;m not expert to Qt Creator either, I will give several examples here.</p>

<h4>FakeVim</h4>

<p>Default shipped with Qt Creator, I&rsquo;m really excited when I find it. Support external <code>.vimrc</code> and give you almost the native vim experience.</p>

<p>I used the default <code>FakeVim</code> key bindings, they are just as same as the official vim, besides that, you may use other short cuts provided by Qt Creator, among them, <code>F2</code> for following the symbol under cursor and <code>F4</code> for switching header and souce file are the most frequently used. For generating source code tags, it&rsquo;s well cared by a background process, however when got large source files, I suffered for temporary <code>Not Responding</code>.</p>

<p>For quick view of the options:
<img src="http://hustcalm.me/images/blog_images/qt_creator-fakevim.png"></p>

<h4>Doxygen</h4>

<p>This plugin uses the standard <a href="http://www.doxygen.org">Doxygen</a> as the backend and give useful utilities for documenting the whole project or a file or a class, function. variable, whatever.</p>

<p>The following links really help a lot:o</p>

<ul>
<li><a href="https://facwiki.cs.byu.edu/HCMI/index.php/Using_doxygen_with_Qt_Creator">Using doxygen with Qt Creator</a></li>
<li><a href="http://dev.kofee.org/projects/qtcreator-doxygen/wiki">QtCreator-Doxygen</a></li>
</ul>


<h4>Version Control</h4>

<p>Qt Creator makes it really easy for integrating with version control tools, an image will tell everything:
<img src="http://hustcalm.me/images/blog_images/qt_creator-versioncontrol.png"></p>

<hr />

<p>Hope this post do a little help for your getting started with Qt Programming:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/C++-不死的精灵]]></title>
    <link href="http://hustcalm.me/blog/2013/12/21/c-slash-c-plus-plus-bu-si-de-jing-ling/"/>
    <updated>2013-12-21T13:18:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/12/21/c-slash-c-plus-plus-bu-si-de-jing-ling</id>
    <content type="html"><![CDATA[<p>看了《C专家编程》和《Essential C++》后，对C/C++的好奇愈加强烈。作为平台级别的语言，很多操作系统都是基于C/C++构建的，因此要想学好C/C++，我觉得对系统底层的了解是必须的，至少对于一个真正的Programmer需要做到如此。总有一些言论，说现在C/C++程序员都成稀有群体了，现在大家都去玩简单易学的Python，甚至时髦小众的Golang了。呜呼，我想说，C/C++伴我们一路走来，作为不死之精灵，还将陪我们走一段很长的路。</p>

<!--more-->


<h3>前言</h3>

<p>不管是业界惯性也罢，语言本身也好，我觉得这个世界对C/C++的需求是巨大的。底层的操作系统不说，对效率要求极高的游戏产品，大型科学计算程序，都是C/C++的绝佳用武之地。Java提供的JNI机制，一个是从平台本地化考虑，另外一个很大程度上是从效率上考虑的吧。Windows Phone的开发以C#作为GUI主要语言，底层的component大多基于C++编译出来的lib。OOP虽然早在Ada，Smalltalk就被引入，不过真正带给产业届震撼的应该是在C++被发明出来以后。当然这跟一些业界巨头的选择不无关系，比如Microsoft选择了C++作为自己的底层开发语言。</p>

<p>写这篇文章，实则是想让自己整理一下学习的思路，如果能给读者带来一些启发，定倍感荣幸了。从C/C++说起，牵涉到底层的OS实现，Compilor实现，语言本身的描述，CRT，glibc之类的概念，以及ISO标准，Windows API，system call之流。缕清楚了底层的复杂机制，在写C/C++程序的时候会更加成竹在胸了，实现和调试上都会更有针对性和效率。而谈到应用程序的设计，则需要用到各种各样的库，在这些库之上构建程序的功能逻辑，这本质上算是代码重用了。话说回来，在整个计算机开发界，我觉得人类就是不断地向高层抽象，从机器代码到汇编，再到编译型的C/C++语言，动态解释性语言，再往后肯定会有更抽象的语言出现，也许那个时候，人类不是自己编程了，而是计算机自己编程，而人类只需要告诉它需要完成什么任务就行了。Ok，就暂时YY到这里。</p>

<p>既然是整理思路的文章，我准备按照自底向上的方式，进行一些简单的讨论，中间参考了大量的已有博文，我会简单总结一下博文的精神，如果想自己消化，就请移步原文了。</p>

<hr />

<h3>C/C++，Compilor， OS，CRT，Standard Library，API之我见</h3>

<p>感觉很难有几个程序员可以很快把这个几个概念说清楚。这些东东都很有历史，所以一路伴随计算机走来的人会有比较深入的了解。在引入讨论前，我先谈谈自己的体会。</p>

<p>从计算机说起，它到底是个什么东东？A magic Box？Yes，but No！本质上来说，都是“开关”，几个”开关“可以构成”逻辑“，而”逻辑“的”组合“可以做事了。而这个开关的实现就跟技术水平有关系了。最开始的”开关”是用机械装置实现的，到后来是电子管，再到后来是ASIC和VLSI了。</p>

<p>而计算机最核心的部件就属“CPU”了，真正的worker就是它。而CPU的设计也相对单纯，它只负责如实地访问相应的寄存器存取数据，并且取指后执行指令。为了运行逻辑复杂的大型程序，则需要外部存储的辅助，那就是RAM了。而为了持久化，就又需要Hard Disk的帮忙。</p>

<p>所以计算机本身就是一堆电子元器件的组合，但是想做出可以工作的，有用的计算机，其中的细节都是很专业的事情。</p>

<h4>C/C++</h4>

<p>语言本身是一种标准或者描述，说明语言有哪些要素，能够实现哪些功能等等，因此它本身可以在比较短的篇幅内讲完，所以C语言之父Ritchie的著作《The C Programming Language》只有不到200页。</p>

<h4>Compilor</h4>

<p>真正实现语言特性和功能的是编译器，由于语言本身的描述有些地方不是特别死板，或者很多地方跟所用的平台有关系，编译器在实现的时候也会有略微的差异。举个最直观的例子，Microsoft的MSVC和GNU的gcc，甚至SUN的cc，对你写的同一份C/C++源代码会有自身的一些特殊处理。</p>

<p>说到了编译器，就再说一下抽象层这个事情吧。大家可能都知道，最开始的编程使用机器语言，后来到了汇编语言，由汇编器完成中间的翻译工作。后来出现了高级语言，比如C语言（其实在之前有很多其它的语言，C语言不是最早却是最成功的），这个时候由编译器把源代码处理后编译成汇编代码，再由汇编器翻译成机器代码。至于之后的动态语言，比如Python，也是先要使用一种语言实现一个解释器，然后再通过这个解释器来运行用户的脚本或者代码。居于中间的另外一种语言形式可以拿Java举例子，它本身具有静态语言和动态语言的特点，而这一切都是由JVM（Java Virtual Machine）带来的。</p>

<p>纵观几种语言形态，可以发现一种典型的分层结构，源代码->（中间代码）-> 汇编代码 &ndash;> 机器代码。 扯一句淡，“任何的软件问题，都可以通过增加一层抽象层解决”。呵呵。</p>

<h4>OS</h4>

<p>提到Operating System（OS），大多数人可能很快想到Windows，Linux，Mac OS之类，会有少部分专业人员可能会直接想到Kernel。拿Linux来说，它本身就是指代一个操作系统内核的，说到Linux系统，则更为正式的称呼是GNU/Linux，而大家平常用的是各种Linux发行版（Linux Distro）。</p>

<p>OS做了什么？概括地来说，它是用户和硬件资源之间的一个接口，如果只有一个裸机放在用户面前，它本身是没有多少用处的（如果你想在它上面编辑一个文本文档，估计要自己写不少代码先），这个时候需要一个中间层，它能够替代用户管理裸机的各种硬件和资源，呈现给用户一个友好的，可用的，可操作的界面（嗯，就是图形用户界面或者终端界面了）。</p>

<p>那问题来了。OS是用什么写的？最开始的Linux是用C语言和内嵌汇编写的，现代的Windows是用C++写的，至于最开始Multics等鼻祖，我个人推测应该是纯汇编或者使用比较早期的高级语言吧（B语言？）。</p>

<p>那操作系统作为资源总管，需要提供相应的应用程序接口（API）给用户程序使用啊，否则操作系统只管资源，不让大家用，岂有此理！这就是传说中的系统调用（system call）？而且访问资源的时候，用户程序也不能胡来，那就分个界限吧，这就是我们常说的用户态和内核态（User space &amp;&amp; Kernel Space）？对应于CPU的目态和管态？</p>

<p>然而，切换是有开销的。</p>

<h4>CRT</h4>

<p>通俗地来说，应该讲讲Run Time。拿C语言来说，你的程序是从main开始执行的吗？从用户的角度来看，是的;但是从操作系统的角度，不是的。在你的程序能够正常工作之前，有太多的工作需要做，这就是runtime library需要负责的事情，大体上主要是I/O初始化以及内存的分配等等。</p>

<p>这又与应用程序的装载产生了联系，具体的细节一时半会也讲不清楚了。</p>

<h4>Stanard Library</h4>

<p>有了runtime library后，比如说有了C运行时，那么你用C语言写的代码，经过编译链接之后，可以正常运行，但前提是你必须使用C运行时提供的一些函数接口以及你自定义的一些函数接口。然而，在我们的日常事务处理中，有太多的操作是重复性的，可以被抽象出来给大家使用的，这就是语言标准库的由来？在遵循语言标准的基础之上，把一组常用的，通用的操作通过高效的实现写成接口库供用户调用。这无疑对生产力是一个巨大的提升，因为这样一来，你不必再去花心思想着如何去打开一个文件的实现细节了，你只需要用标准库的fopen即可。</p>

<p>像C语言的&lt;stdio.h>，&lt;stdlib.h>就是标准函数库提供的头文件。C++则在兼容C语言的基础之上有自己的标准库，还有大名鼎鼎的STL（Standard Template Library，已经被纳入C++标准）。</p>

<h4>API</h4>

<p>即应用程序接口（Application Interface），然而它本身也是一个普适的概念。在分层的软件架构中，下层提供给上层的接口都可以统称为API（我的个人理解）。</p>

<p>再泛化地来讲，可能需要大家认真去琢磨Interface这个概念了（硬件上，软件上，面向对象上，等等）。</p>

<hr />

<h3>看看他们怎么说</h3>

<p>网上关于CRT，Standard Library，OS的综合讨论并不太多，这里我挑几个典型的分析，简单概括一下原作者的看法。如果跟原文的意思有出入，请原作者包涵啦:&ndash;)</p>

<h4><a href="http://www.codeproject.com/Articles/22642/What-Every-Computer-Programmer-Should-Know-About-W#ContentsofC++StandardLibrary">What Every Computer Programmer Should Know About Windows API, CRT, and the Standard C++ Library</a></h4>

<p>一篇深入浅出的文章，虽然是以Windows平台为例，但是读者大可以举一反三，先来看张作者给出的图片：</p>

<p><img src="http://hustcalm.me/images/blog_images/relationship-between-windowsAPI-CRT-and-C++StandardLibrary.png"></p>

<p>典型的分层架构，清晰明了，虽然还有很多细节值得商榷，但是直观上的理解却是可以这样的。</p>

<p>之后作者还提到了Unicode的细节处理，C++标准库，跨平台，代码复用（静态链接 VS 动态链接）等，是一篇搞清基本概念的入门好文！</p>

<p>读英文有困难的同学，可以移步本文的中文版<a href="http://www.cnblogs.com/menggucaoyuan/archive/2011/06/09/2075910.html">程序员应该知道的关于Windows API、CRT和STL二三事</a>。</p>

<h4><a href="http://blog.csdn.net/lvan100/article/details/7687359">Windows API和C运行时库CRT的关系</a></h4>

<p>感觉本文的作者总是在纠结于<code>先有鸡还是先有蛋</code>的问题，而且对多平台的理解不够深入，更多的是被Windows这个平台限制住了。</p>

<p>C语言本身肯定是与平台无关的，当它跟平台有关的时候就是各个操作系统厂商实现C语言编译器和运行时以及标准库的时候了。操作系统本身用什么写都是可以的，因为最终都要编制成二进制的机器代码，而在开发操作系统的时候用到什么库之类的，则要依赖于开发操作系统本身的平台支持了。又回到了那个问题，在没有出现高级语言之前，大部分软件组件肯定是前辈们用汇编搞定，包括C语言编译器（当然也可能是其它的初级高级语言），一旦实现了成套的基础设施（编译器，链接器，装载器等），再利用这些构建工具去制造现代的软件就是顺理成章的事情了。</p>

<p>这里大家需要搞清楚的是，不管你的源代码写的是什么，计算机只认识机器代码，更加严格的是0和1。</p>

<h4><a href="http://www.cnblogs.com/chio/archive/2007/11/26/972152.html">C Runtime Library来历, API, MFC, ATL关系</a></h4>

<p>在转贴关于C Runtime Library之前的讨论感觉像是在鬼扯，<code>CRT原先是指Microsoft开发的C Runtime Library，用于操作系统的开发及运行</code>，看到这一句，基本注定以下的讨论可以停止了。</p>

<p>分割线下面的关于一些基本概念的解释有一定的可取之处，大家直接看分割线下面的即可，否则被上面那一部分耽误了！</p>

<h4><a href="http://www.cnblogs.com/aguncn/archive/2012/11/12/2766520.html">我自己关于C语言，编译器，标准库，GUN glibc,CRT ，API之类的理解。</a></h4>

<p>作者本人好像对这些概念也停留在一知半解的状态，因此上面的就当看看即可。下面的链接比较有可取之处，给出了C/C++标准库和运行时库的一些链接，首先是标准（出自ISO），之后分别给出了Microsoft和GNU的实现。</p>

<p>如果把文章那些有用的链接抽取出来，这篇文章就不用看了。有用的链接我在下面的资源整理中会给出原出处。</p>

<p><strong>总结：</strong></p>

<p>总得看来，第一篇文章的分析较有说服力，用词专业，对概念的解释也很清晰，但是作为入门级别的文章很难再把问题说得更加具体;而后面的文章的个人见解部分实在不敢恭维，而有用的部分大多又是转载其它文章的只言片语，因此不推荐大家看。</p>

<p>如果想弄清楚以上的概念和相互的关系，大家不必翻箱倒柜找各种文章了，直接看《程序员的自我修养-链接，装载与库》这本书好了。《程序员的自我修养》把程序的结构，编译，链接，装载，运行时之类的概念进行了深入的剖析，并且附带很生动的例子，中间还不时穿插编程中可能困惑你好久的小问题。写这篇文章的时候，我看完了第一部分，暂时跳过了第二，第三部分，正在看第四部分，感觉此书是深入理解系统底层奥秘的绝佳捷径！</p>

<hr />

<h3>C/C++资源一览</h3>

<p>正如C++之父Stroustrup所鼓励的，用库去扩展语言，而保持语言本身的简洁。所以除了C++标准库以外，出现了大量的第三方库，涉及程序开发的各个领域，可谓是百花齐放！</p>

<p>下面给出几个比较好的链接，每一个都值得大家阅读。</p>

<ul>
<li><a href="http://blog.csdn.net/netlinux/article/details/6700505">C/C++ 类库开发库参考</a></li>
<li><a href="http://www.kuqin.com/language/20090215/35005.html">C++资源之不完全导引</a></li>
<li><a href="http://blog.csdn.net/oanqoanq/article/details/7169291"> C++著名程序库的比较和学习经验</a></li>
<li><a href="http://www.kuqin.com/language/20090215/35004.html">C++开源跨平台类库及在VC++.net中应用的配置</a></li>
</ul>


<hr />

<h3>如何学习C/C++</h3>

<p>跟任何一门编程语言一样，大量的练习是必不可少的，但是在练习开始之前，我觉得首先要找到一个比较高效的方法。根据我个人的经验，比较好的学习方式是：</p>

<ul>
<li><p>找到一个学习的需求，为了学习而学习可能只会走马观花，如果实在没有什么需求，那就从写一个实用的小软件开始吧。</p></li>
<li><p>找到正确的入门书籍，谭老师的那本书我是强烈不推荐的，推荐看C语言三剑客《C和指针》，《C陷阱和缺陷》和《C专家编程》。C++的话，个人觉得《Essential C++》适合入门，C++ Primer适合当成参考书籍，其它的《Effective C++》等还没看过，不敢乱说。</p></li>
<li><p>边看边练，加深理解，拿指针为例，一定在从对应的内存关系去理解，就会感觉很自然，它不过是一个整形变量，指代一个内容地址而已;而变量本身就是某一个内存地址的抽象表示嘛。而不管指针的指针，还是什么，顺着下去也就比较好理解了，只是关系繁杂的时候需要仔细缕清楚。</p></li>
<li><p>基本熟悉之后，可以去试试一些框架，比如Qt，体会一下框架是如何在C++之上给开发者抽象了一层应用开发层的。</p></li>
<li><p>后面的，自行发挥想象力吧:&ndash;)</p></li>
</ul>


<hr />

<p><strong>综述：</strong></p>

<p>再次强调一下，写本文的目的，实则是想整理一下自己的思路，便于后面的深入学习。在参考各种文章的时候发现了一些瑕疵，忍不住再经过一反思考后评论一番，免得更多的人被误导。当然本人的水平也十分有限，行文很有可能有很多不到之处甚至错误，一些评论可能也有失偏颇。</p>

<p>如果发现了本文有哪些不足或者可以改进的地方，请留下评论或者联系我。如果本文可以帮助到你，请你把一些有用的地方传播给他人，以期帮助到更多的人！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes About IEEE 1394 AVT Cameras - FirePackage and OpenCV]]></title>
    <link href="http://hustcalm.me/blog/2013/12/10/notes-about-ieee-1394-avt-cameras-firepackage-and-opencv/"/>
    <updated>2013-12-10T21:10:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/12/10/notes-about-ieee-1394-avt-cameras-firepackage-and-opencv</id>
    <content type="html"><![CDATA[<p>I&rsquo;m trying to make AVT 1394 Cameras work with OpenCV using the standard <code>VideoCapture</code> recently but got no luck. Briefly speaking, OpenCV&rsquo;s support for camera input are <code>Operating System</code> and <code>Device Driver</code> aware.</p>

<p>In this post, I will give some basic related concepts related to Firewire(aka IEEE 1394) and AVT software packages, also OpenCV&rsquo;s <code>VideoCapture</code> workflow.</p>

<!--more-->


<hr />

<h3>FireWire</h3>

<p>Aka <a href="http://en.wikipedia.org/wiki/IEEE_1394">IEEE 1394</a>, it&rsquo;s a serial bus interface standard for high-speed communications and isochronous real-time data transfer, developed by <code>Apple</code> in early 1990s and called <code>FireWire</code>. The main competitor nowadays is <code>USB</code>.</p>

<p>For the official introduction part, you can refer to the wikipedia link above, I want to address two points here.</p>

<h4>Standards and versions</h4>

<p>The most used must be <code>1394a</code> and <code>1394b</code>, and to make things work, do pay some attention to your <code>1394 Host Controller</code>.</p>

<p>Unlike USB and USB 2.0, the physical interface between 1394a and 1394b is significantly different. As such, users will need to acquire cables with a 1394a (4-pin or 6-pin) connector on one end and a 1394b (9-pin) connector on the other. And a 1394a device would work connecting to a 1394b bus whereas one would fail vice versa.</p>

<h4>Pins of connector</h4>

<p>As for <code>1394a</code> and <code>1394b</code>, there are three kinds of connectors used: 4-pin, 6-pin and 9-pin. Hence there are kinds of cables connecting different styles of connectors list blow:</p>

<p><img src="http://connector.pinouts.ru/diagram/firewire_cable.gif" alt="FireWire Plug Connector at the cable" />.</p>

<p>Luck is you may get whatever cable to fullfil your need as long as you are connecting your device to a right bus.</p>

<p>For more details about the interface pinout, read this article <a href="http://pinouts.ru/Slots/ieee1394_pinout.shtml">FireWire (IEEE1394) bus interface pinout</a>.</p>

<hr />

<h3>AVT Cameras</h3>

<p><a href="http://www.alliedvisiontec.com">AVT</a> does manufacture so many cameras and provide great technical support. It&rsquo;s kind of a choice for you to choose between the software packages,seriously speaking.</p>

<h4>AVT Software Selector</h4>

<p>Now they are focusing on <a href="http://www.alliedvisiontec.com/apac/products/software/vimba-sdk.html">VIMBA</a> and maintain it actively.</p>

<p>However for the legacy ones, like <code>FirePackage</code>, <code>Universal Package</code>, etc, look into this link <a href="http://www.alliedvisiontec.com/de/produkte/legacy.html">Legacy Software (SDKs, Apps, Adapters, and Interfaces)</a>.</p>

<p>To select the software that suits you, refer to these links:</p>

<ul>
<li><a href="http://www.alliedvisiontec.com/apac/support/downloads/software.html">AVT Software Support</a></li>
<li><a href="http://1stvision.com/avt_downloads.htm">AVT Software Downloads for AVT Cameras</a></li>
<li><a href="http://www.alliedvisiontec.com/fileadmin/content/PDF/Software/AVT_software/AVT_software_stuff/AVTSoftwareSelectorGuide_v3.3.0.pdf">AVT Software Selector Guide</a></li>
</ul>


<h4>Inside FirePackage</h4>

<p>Although called legacy SDKs, FirePackage is widely used currently. For the main idea, you can give quick glimps for the documentation after installation and get a basic knowledge of <code>FireClass</code>, <code>FireCtrl</code>, <code>FireGrab</code> and <code>FireStack</code>.</p>

<p>For the package architecture,see this:
<img src="http://hustcalm.me/images/blog_images/architecture_of_AVT_FirePackage.png"></p>

<h4>AVT and OpenCV</h4>

<p>Bad luck that we can&rsquo;t use AVT cameras just with <code>VideoCapture</code> because that the cameras might use a device driver that OpenCV can&rsquo;t talk to.</p>

<p>However if your camera compliants with <a href="http://www.cs.cmu.edu/~iwan/1394/">CMU 1394 Digital Camera Driver</a>, probably you will be happy again:&ndash;)</p>

<hr />

<h3>OpenCV and Cameras</h3>

<p>Quote from this post <a href="https://pixhawk.ethz.ch/tutorials/camera/getting_started">Getting Started with OpenCV capturing</a>.</p>

<blockquote><p>  Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL) and two on Linux: Video for Linux(V4L) and IEEE1394. For the latter there exists two implemented interfaces (CvCaptureCAM_DC1394_CPP and CvCapture_DC1394V2).</p></blockquote>

<p>Generaly speaking, your camera would probably work if it is <code>VFW</code> or <code>MIL</code> compliant under Windows or it suits to standard <code>V4L</code> or <code>IEEE1394</code> driver model.</p>

<p>But if not, you can even sub-class the <code>VideoCapture</code> class, and implement your camera driver to make it work seamlessly with OpenCV.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Httplib Httplib2 Urllib Urllib2-what's the Difference]]></title>
    <link href="http://hustcalm.me/blog/2013/11/14/httplib-httplib2-urllib-urllib2-whats-the-difference/"/>
    <updated>2013-11-14T11:24:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/11/14/httplib-httplib2-urllib-urllib2-whats-the-difference</id>
    <content type="html"><![CDATA[<p>Lots of people may got confused by the Python modules- <code>httplib, httplib2, urllib, urllib2</code>. Judge from their names, we may prefer the x2 module because they may be version 2 of the module and should work better. Maybe you are right for some degree(as for the httplib).</p>

<p>However, things are a little bit complicated which needs a brief explanation indeed.</p>

<!--more-->


<h2>What&rsquo;s the claim</h2>

<p>First, let&rsquo;s see what a specified module&rsquo;s aim. I will quote from the official site:&ndash;)</p>

<h3>httplib</h3>

<p><a href="http://docs.python.org/2/library/httplib.html">Here</a> is a link from <code>The Python Standard Library</code> for <code>Python 2.7.6</code>.</p>

<pre><code>This module defines classes which implement the client side of the HTTP and HTTPS protocols. 
It is normally not used directly — the module urllib uses it to handle URLs that use HTTP and HTTPS.
</code></pre>

<h3>httplib2</h3>

<p><a href="https://code.google.com/p/httplib2/">This</a> is the official website hosted on <code>Google Code</code>. It claims:</p>

<pre><code>A comprehensive HTTP client library that supports many features left out of other HTTP libraries.
</code></pre>

<p>and the <code>Project Goal</code>:</p>

<pre><code>To become a worthy addition to the standard Python library.
</code></pre>

<p>It features <code>HTTP and HTTPS</code>, <code>Keep-Alive</code>, <code>Authentication</code>(support <em>Digest</em>, <em>Basic</em>, <em>WSSE</em>, <em>HMAC Digest</em> and <em>Google Account Authentication</em>), <code>Caching</code>, <code>All Methods</code>, <code>Redirects</code>, <code>Compression</code>, <code>Lost update support</code> and <code>Unit Tested</code>.</p>

<h3>urllib</h3>

<p>Quote from <a href="http://docs.python.org/2/library/urllib.html">here</a>:</p>

<pre><code>This module provides a high-level interface for fetching data across the World Wide Web. 
In particular, the urlopen() function is similar to the built-in function open(), but accepts Universal Resource Locators (URLs) instead of filenames.  
Some restrictions apply — it can only open URLs for reading, and no seek operations are available.
</code></pre>

<h3>urllib2</h3>

<p><a href="http://docs.python.org/2/library/urllib2.html">The Standard Python Library</a> stats that:</p>

<pre><code>The urllib2 module defines functions and classes which help in opening URLs (mostly HTTP) in a complex world — basic and digest authentication, redirections, cookies and more.
It's an extensible library for opening URLs.
</code></pre>

<h2>What&rsquo;s the difference</h2>

<h3>httplibx and urllibx</h3>

<p><code>urllib/urllib2</code> is built on top of <code>httplib</code>. It offers more features than writing to <code>httplib</code> directly.
However, <code>httplib</code> gives you finer control over the underlying connections.</p>

<p>If you&rsquo;re dealing solely with HTTP/HTTPs and need access to HTTP specific stuff, use httplib.
For all other cases, use urllibx(note that <code>urllib and urllib2</code> have different capabilities, thus are always used together).</p>

<h3>httplib and httplib2</h3>

<p>Basically, httplib2 is <code>Google's python httplib implementation</code> but much more powerful.</p>

<p>They actually do the same things utilizing HTTP/HTTPs and other network protocals like FTP, typically we can call them <code>HTTP client library</code>.</p>

<p>If <code>httplib</code> can&rsquo;t fulfill your need(as if you need the <code>Redirects</code> feature), consider switching to <code>httplib2</code> then.</p>

<p>To make things simpler, I&rsquo;d rather using <code>httplib2</code> as my default <code>HTTP client library</code> for Python.</p>

<h3>urllib and urllib2</h3>

<p>Quote from this post <a href="http://www.hacksparrow.com/python-difference-between-urllib-and-urllib2.html">Python: difference between urllib and urllib2</a>:</p>

<p><code>urllib</code> and <code>urllib2</code> are both Python modules that do URL request related stuff but offer different functionalities. Their two most significant differences are listed below:</p>

<ul>
<li><code>urllib2</code> can accept a Request object to set the headers for a URL request, urllib accepts only a URL. That means, you cannot masquerade your User Agent string etc.</li>
<li><code>urllib</code> provides the urlencode method which is used for the generation of GET query strings, urllib2 doesn&rsquo;t have such a function. This is one of the reasons why urllib is often used along with urllib2.</li>
</ul>


<p><strong>Note</strong>:</p>

<p>The urllib module has been split into parts and renamed in Python 3 to <code>urllib.request</code>, <code>urllib.parse</code>, and <code>urllib.error</code>. The 2to3 tool will automatically adapt imports when converting your sources to Python 3. Also note that the urllib.urlopen() function has been removed in Python 3 in favor of urllib2.urlopen().</p>

<h2>Usage</h2>

<ul>
<li><a href="http://docs.python.org/2.7/howto/urllib2.html#urlerror">HOWTO Fetch Internet Resources Using urllib2</a></li>
<li><a href="http://www.pythonforbeginners.com/python-on-the-web/how-to-use-urllib2-in-python/">How to use urllib2 in Python</a></li>
<li><a href="http://adchoices.sinaapp.com/topic/47/python-%E6%A8%A1%E5%9D%97-httplib-urllib%E5%92%8Curllib2%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95">python 模块：httplib、urllib和urllib2的简单用法</a></li>
<li><a href="http://zhuoqiang.me/python-urllib2-usage.html">Python 标准库 urllib2 的使用细节</a></li>
<li><a href="http://httplib2.googlecode.com/hg/doc/html/libhttplib2.html">httplib2 v0.4 documentation</a></li>
</ul>


<h2>Reference</h2>

<ul>
<li><a href="http://www.hacksparrow.com/python-difference-between-urllib-and-urllib2.html">Python: difference between urllib and urllib2</a></li>
<li><a href="http://www.zacwitte.com/resolving-http-redirects-in-python">Resolving HTTP Redirects in Python</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install CentOS 6.4 Minial With Grub2 and a USB Stick - the Simple Way]]></title>
    <link href="http://hustcalm.me/blog/2013/11/04/install-centos-6-dot-4-minial-with-grub2-and-a-usb-stick-the-simple-way/"/>
    <updated>2013-11-04T17:08:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/11/04/install-centos-6-dot-4-minial-with-grub2-and-a-usb-stick-the-simple-way</id>
    <content type="html"><![CDATA[<p>What a shame that I failed over and over to just install CentOS 6.4 minimal to my Desktop PC!!!</p>

<p>I got a broken Ubuntu 12.04 on my hand with a working Grub2, cheers:&ndash;) Also, I luckily have a 4 GB USB stick(who esle dosen&rsquo;t,kidding).</p>

<h2>The Goal</h2>

<p>Install CentOS 6.4 minial with Grub2 and a single USB stick, making no bootable USB stick, but do some tricks with the ISO file instead.</p>

<!--more-->


<h2>Preparation</h2>

<p>In a nutshell, we need a working Grub(or other bootloaders, I use Grub2), a USB Stick with a vfat or ext2 partition and CentOS ISO file.</p>

<h3>Bootloader</h3>

<p>As I have a broken Ubuntu 12.04 and a already working Grub2, I would just go on.</p>

<p>However, you have many choices due to your OS. Such as:</p>

<ul>
<li>Grub Legacy</li>
<li>Grub4dos</li>
<li>EasyBCD</li>
</ul>


<h3>ISO</h3>

<p>Download it from a mirror that&rsquo;s close enough to you. Check out the <a href="http://isoredirect.centos.org/centos/6/isos/x86_64/">Mirror List</a> and I choose <a href="http://mirrors.163.com/centos/6.4/isos/x86_64/">mirrors.163.com</a>.</p>

<p>Save the <code>CentOS-6.4-x86_64-minimal.iso</code> to your hard drive.</p>

<h3>USB Stick</h3>

<p>According to the CentOS wiki, the installer will recognize ext2 or vfat. I choose vfat in my case.</p>

<p>My device on my Linuxmint shows /dev/sdb and the partition shows /dev/sdb1. Just ensure that you have a VFAT partition, other things don&rsquo;t matter too much really.</p>

<p>To play with device and partitions, you can use <code>fdisk</code> and <code>mkfs.*</code> or other tools that you favor.</p>

<h3>Extract Files</h3>

<p>I put the ISO file under <code>~/Downloads</code>. And I follow the instructions below:</p>

<pre><code>mkdir /mnt/centos
sudo mount -o loop -t iso9660 ~/Downloads/CentOS-6.4-x86_64-minimal.iso /mnt/centos
mkdir /mnt/usbdisk
mount /dev/sdb1 /mnt/usbdisk
cp -r /mnt/centos/isolinux /mnt/centos/images /mnt/usbdisk
sudo umount /mnt/centos
cp ~/Downloads/CentOS-6.4-x86_64-minimal.iso /mnt/usbdisk
sudo umount /mnt/usbdisk
</code></pre>

<p>After this, we have <code>CentOS-6.4-x86_64-minimal.iso</code>,<code>isolinux</code> and <code>images</code> on our USB Stick.</p>

<h2>Installation</h2>

<p>Now use Grub2 to boot into CentOS installation environment and complete the installation. I have a SATA hard disk locally and do remember <strong>CentOS installer will make your local hard disk to sdb or sdc, but not sda. The USB Stick will be sda during the installation.</strong></p>

<p>To enter Grub2 command line, press <code>SHIFT</code> when your PC boots, or you may miss the menu entry due to <strong>HIDDEN_TIMEOUT</strong> configruration. Then press <code>c</code> to get a command line.</p>

<p>Then follow the instructions below, you may adjust a little to suit your own PC.</p>

<pre><code>linux (hd1,msdos1)/isolinux/vmlinuz
initrd (hd1,msdos1)/isolinux/initrd.img
boot
</code></pre>

<p>When you prompt to select <code>Installation Method</code>, use <code>Hard Drive</code> and select <code>sda1</code>, follow the routine procedures and you are done:&ndash;)</p>

<p><strong>I tried <code>URL Method</code> but failed, either <code>mirrors.163.com</code> nor <code>mirrors.sohu.com</code> would work:&ndash;(</strong></p>

<h2>Summary</h2>

<p>All the essentials reside in Grub2 and isolinux or you may say bootloader and ISO stuff. Check them out and deep it for deep is the best way to solve varies of problems related to boot, installation and rescue.</p>

<p>You may install by other methods, CD-ROW, bootable USB Stick or whatever you like.</p>

<p>Enjoy the struggling and enjoy the gain!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Xen Under Centos6.4 to Build Your Own VPS]]></title>
    <link href="http://hustcalm.me/blog/2013/10/14/playing-with-xen-under-centos6-dot-4-to-build-your-own-vps/"/>
    <updated>2013-10-14T10:28:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/10/14/playing-with-xen-under-centos6-dot-4-to-build-your-own-vps</id>
    <content type="html"><![CDATA[<p>Believe it or not, we are under an age called Cloud Computing.</p>

<p>I used to be curious about VPS(Virtual Private Server), how they work, how to build them, etc. As far as I know, AWS, GCE or whatever else solutions depend heavily on Virtualization Technologies and AWS is definitly playing with Xen currently.</p>

<p>I would like very much to have a trial for building my own VPS and blow are my steps doing it. You may need to read some basic wikis about Xen, <a href="http://wiki.xen.org/wiki/Xen_Overview">Xen Overview</a> and <a href="http://wiki.xen.org/wiki/Xen_Beginners_Guide">Xen Beginners Guide</a> should do some help:&ndash;)</p>

<!--more-->


<h2>Getting a working Dom0 on Centos6.4</h2>

<h3>Install Centos</h3>

<p>Use whatever way you like, remember a <strong>minimal install</strong> is recommended.</p>

<h3>Install Xen</h3>

<p>Thanks to <strong>Xen4Centos</strong> Project, we can get Xen installed in several simple commands(log in as root).</p>

<pre><code>yum -y update
yum install centos-release-xen
yum install xen
/usr/bin/grub-bootxen.sh
reboot
</code></pre>

<p>After your machine comes to alive, simply type:</p>

<pre><code>uname -r
xl list
</code></pre>

<p>to verify that Xen Dom0 is running.</p>

<h3>Config network</h3>

<p>I use DHCP to get a valid IP for my box and there is a trick if you can&rsquo;t ping each other when two machinea are in the same LAN(probably the routing table is not working for you and just delete the record from your routing table).</p>

<p>As me, for example, my laptop got a IP, say 192.168.0.10 and my VPS got 192.168.0.11, but they can&rsquo;t talk to each:&ndash;(</p>

<p>First, check your routing table,</p>

<pre><code>route
</code></pre>

<p>Then, delete the record that is evil,</p>

<pre><code>route del -net 192.168.0.0 netmask 255.255.255.0
</code></pre>

<p><strong>Please substitute the parameters to suite your own networking</strong>.</p>

<p>After that, ping each other,</p>

<pre><code>ping 192.168.0.11
</code></pre>

<p>to verify the networking is good to go.</p>

<p>In order to give our DomUs valid IPs, we may use a network bridge, do as follows:</p>

<pre><code>yum -y install bridge-utils
cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-xenbr0
</code></pre>

<p>My modified and working scripts look like this, for ifcfg-xenbr0:</p>

<pre><code>DEVICE=xenbr0
#HWADDR=00:24:E8:46:CC:C9
TYPE=bridge
#UUID=ff0ab497-0303-4dc3-b6f3-4a6cbd90466b
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=dhcp
</code></pre>

<p>And for ifcfg-eth0:</p>

<pre><code>DEVICE=eth0
HWADDR=00:24:E8:46:CC:C9
TYPE=Ethernet
UUID=ff0ab497-0303-4dc3-b6f3-4a6cbd90466b
ONBOOT=yes
NM_CONTROLLED=no
#BOOTPROTO=dhcp
BRIDGE=xenbr0
</code></pre>

<p><strong>For static IP configuration, please refer to Xen wiki page!</strong></p>

<p>Then, make the configuration work:</p>

<pre><code>service network restart
</code></pre>

<p>If you got errors such as <code>error:check cable</code>, do this manualy:</p>

<pre><code>ifup xenbr0
</code></pre>

<p>Verify it works by issuing:</p>

<pre><code>ifconfig xenbr0
</code></pre>

<h3>Diable SELinux</h3>

<p>Honestly speaking, I don&rsquo;t know WTF the real reason to do this, but people say <code>SELinux can really interfere with Xen</code>.</p>

<pre><code>sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
setenforce 0
</code></pre>

<p>You are good to go with a damn working Dom0 and congratulations!</p>

<h2>Bringing Your DomUs Up</h2>

<p>It&rsquo;s up to you to use PV or HVM, personally, I prefer to PV due to higher performance. But if you want a Windows(and other OS whose kernel can&rsquo;t be modified), HVM is your only choice.</p>

<p>As for me, I want 3 DomUs, namely Debian, Fedora and Arch Linux.</p>

<h3>Xen4Cli or Xen4Libvirt</h3>

<p>Xen4Cli(xm and xl, currently xm deprecated) are intended for advanced users looking to hand setup the network, the backing filestore and the xen environment. While Xen4Libvirt are for newbies looking for the easiest install path.</p>

<p>I prefer <code>xl</code> since I want to know what exactly is happening, and <code>xl</code> works for Debian and Arch Linux. However for Fedora, <code>Libvert</code> seems to be the right way(using <code>virt-install</code>).</p>

<p>To install Libvirt,</p>

<pre><code>yum install libvirt python-virtinst libvirt-daemon-xen
</code></pre>

<p>After the install, restart your Dom0 machine.</p>

<h3>File or LVM based backend</h3>

<p>Since Centos6.4 is shipped perfectly with LVM and also the default partition schema using LVM during OS Installation, I prefer <code>LVM</code>.</p>

<p>As for me, I do the following:</p>

<pre><code>lvresize -L -200G vg_centos6/lv_home -r
lvcreate -L 30G -n fedora vg_centos6
lvcreate -L 30G -n debian vg_centos6
lvcreate -L 30G -n archlinux vg_centos6
</code></pre>

<p>Then verify the Logical Volumes using:</p>

<pre><code>lvdisplay
</code></pre>

<p>Or</p>

<pre><code>lvs
</code></pre>

<p>If you are not familiar with LVM, search Google for a good tutorial first.</p>

<h3>Bridge, Routing or NAT</h3>

<p>Three networking modes are provided and choose one according to your own networking environment.</p>

<p>I got bridge working for me as described in above section.</p>

<p>For choosing other modes, you can modify <code>/etc/xen/xend-config.sxp</code> or explicitly passing as parameters when creating DomUs.</p>

<h3>Let DomUs fly</h3>

<h4>Debian</h4>

<p>I choose debian7.1 netinst.iso due to my poor bandwidth,</p>

<pre><code>wget -c http://mirrors.sohu.com/debian-cd/7.1.0/amd64/iso-cd/debian-7.1.0-amd64-netinst.iso
mount -o loop /path/to/debian-7.1.0-amd64-netinst.iso /mnt/debian
cp /mnt/debian/install.amd/xen/debian.cfg /etc/xen/
cd /etc/xen/
vi debian.cfg  ## Make modifications according to the comments
xl create -c debian.cfg
</code></pre>

<p>Then install Debian as a very normal one.</p>

<h4>Arch Linux</h4>

<p>I download archlinux-2013.10.01-dual.iso by issuing:</p>

<pre><code>wget http://mirrors.sohu.com/archlinux/iso/latest/archlinux-2013.10.01-dual.iso
</code></pre>

<p>Then create a arch.cfg file in <code>/etc/xen/</code> similar like:</p>

<pre><code># Refer to https://wiki.archlinux.org/index.php/Xen#Configuring_a_paravirtualized_.28PV.29_Arch_domU

name = "arch"
kernel = "/mnt/arch/arch/boot/x86_64/vmlinuz"
ramdisk = "/mnt/arch/arch/boot/x86_64/archiso.img"
extra = "archisobasedir=arch archisolabel=ARCH_201310"
memory = 512
disk = [ "phy:/dev/vg_centos6/archlinux,sda1,w", "file:/root/isos/arch/archlinux-2013.10.01-dual.iso,sdb,r" ]
vif = [ '' ]
</code></pre>

<p>After that, bring the DomU up by:</p>

<pre><code>mount /path/to/archlinux-2013.10.01-dual.iso /mnt/arch
cd /etc/xen/
xl create -c arch.cfg
</code></pre>

<p>Install your Arch Linux as you like since it&rsquo;s really a highly customized distro.</p>

<h4>Fedora</h4>

<p>Again I got Fedora-20-Alpha-x86_64-netinst.iso by issuing:</p>

<pre><code>wget http://download.fedoraproject.org/pub/fedora/linux/releases/test/20-Alpha/Fedora/x86_64/iso/Fedora-20-Alpha-x86_64-netinst.iso
</code></pre>

<p>However, nightmares begin since I want to install it using the Debian way. <code>xl</code> just fails to boot normally but <code>virt-install</code> does the job.</p>

<p>Using the <code>virt-install</code> method:</p>

<pre><code>virt-install --virt-type xen -n fedora19 -r 512 --vcpus=2 -f /dev/vg_centos6/fedora19 --location http://mirrors.163.com/fedora/releases/19/Fedora/x86_64/os/ --os-type linux --accelerate --nographics --network=bridge:xenbr0
</code></pre>

<p>Or you can download the ISO file first, then issuing your own httpd locally, thus making it:</p>

<pre><code>mount -o loop /path/to/fedora.iso /mnt/fedora
yum -y install httpd
service httpd start
ln -s /mnt/fedora /var/www/html
service iptables stop
virt-install --virt-type xen -n fedora19 -r 512 --vcpus=2 -f /dev/vg_centos6/fedora19 --location http://your.http.server.ip.address.here/ --os-type linux --accelerate --nographics --network=bridge:xenbr0
</code></pre>

<p>Remember this is for full Fedora installation, if you are using a netinst, you need to copy all the files to /var/www/html instead of creating a symbolic link and modify the .treeinfo file. No warrants here, since I did&rsquo;t try it myself.</p>

<h2>References</h2>

<ul>
<li><a href="http://wiki.centos.org/HowTos/Xen/Xen4QuickStart">Xen4 CentOS6 QuickStart</a></li>
<li><a href="http://wiki.centos.org/HowTos/Xen/Xen4QuickStart/Xen4Libvirt">Xen4 Libvirt for CentOS 6</a></li>
<li><a href="http://drewsymo.com/cloud-computing/install-xen-on-centos-and-create-a-fedora-debian-vm/">Install Xen 4 with Libvirt / XL on CentOS 6 (2013)</a></li>
<li><a href="http://www.howtoforge.com/virtualization-with-xen-on-centos-6.2-x86_64-paravirtualization-and-hardware-virtualization">Virtualization With Xen On CentOS 6.2 (x86_64) (Paravirtualization &amp; Hardware Virtualization)</a></li>
<li><a href="http://wiki.xen.org/wiki/Xen_Configuration_File_Options">Xen Configuration File Options</a></li>
<li><a href="http://xenbits.xen.org/docs/unstable/man/xl.cfg.5.html">XL Domain Configuration File Syntax</a></li>
<li><a href="http://wiki.xen.org/wiki/Network_Configuration_Examples_(Xen_4.1%2B">Network Configuration Examples (Xen 4.1+)</a>)</li>
<li><a href="http://wiki.xen.org/wiki/Debian_Guest_Installation_Using_Debian_Installer">Debian Guest Installation Using Debian Installer</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Xen">Xen For Arch Linux Wiki page</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Installation_Guide">Arch Linux Installation Guide</a></li>
<li><a href="http://bderzhavets.wordpress.com/2009/01/10/install-fedora-10-pv-domu-at-xen-331-centos-52-dom0-xen-330-intrepid-server-dom0-novells-xen-inified-kernel-via-local-apache-mirror/">Install Fedora 10 PV DomU at Xen 3.3.1 CentOS 5.2 Dom0 &amp; Xen 3.3.0 Intrepid Server Dom0 (Novell’s Xen-ified Kernel) via local Apache Mirror</a></li>
<li><a href="https://lists.fedoraproject.org/pipermail/xen/2012-November/005938.html">Installing a domU without virt-install Fedora-xen</a></li>
<li><a href="http://www.centos.bz/2012/03/centos-6-install-deploy-xen/">CentOS 6安装配置Xen</a></li>
<li><a href="http://www.cnblogs.com/hseagle/p/3299713.html">Archlinux 简明安装指南</a></li>
<li><a href="http://blog.csdn.net/holdsky/article/details/8497764">archlinux （2012.12.01-dual） i686 硬盘安装</a></li>
<li><a href="http://en.wikipedia.org/wiki/Xen">Xen</a></li>
<li><a href="http://wiki.xen.org/wiki/Choice_of_Toolstacks">Choice of Toolstacks</a>

<ul>
<li><a href="http://wiki.xen.org/wiki/XL_vs_Xend_Feature_Comparison">XL vs Xend Feature Comparison</a></li>
</ul>
</li>
</ul>


<hr />

<p>I do believe you will get lots of annoying problems while playing with Xen. Enjoy the problems and enjoy Xen:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SFD2013中科院站活动小结]]></title>
    <link href="http://hustcalm.me/blog/2013/10/09/sfd2013zhong-ke-yuan-zhan-huo-dong-xiao-jie/"/>
    <updated>2013-10-09T08:53:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/10/09/sfd2013zhong-ke-yuan-zhan-huo-dong-xiao-jie</id>
    <content type="html"><![CDATA[<p>一年一度的SFD（自由软件日）活动顺利在中科院大学雁栖湖校区举行，由于今年情况特殊，中科院站的活动推迟到了9.28，而不是官方的9.21。而在9.21当天，中科院开源协会的成员一起去清华参加了TUNA和BJGUG联合举办的SFD。作为本次活动的组织者，简单从以下几个方面总结一下。</p>

<h2>什么是自由软件日（SFD）</h2>

<p>说到这个问题，不得不接着问“什么是自由软件？”。其中的历史就不再一一道来了，大家去<a href="http://softwarefreedomday.org/">SFD的官网</a>看个究竟吧-:)</p>

<!--more-->


<h2>关于SFD中科院站</h2>

<p>开源协会本着“自由，开放，分享”的精神，每年都会承办SFD。关于2013年活动的具体信息以及日程安排，请参考我们开源协会在SFD官网注册的活动<a href="http://wiki.softwarefreedomday.org/2013/China/Beijing/OSCLUB-CAS">wiki页面</a>。</p>

<h2>活动现场</h2>

<p>在Registration环节，实际注册人数为80左右，根据现场情况，到场的人数在100+。参加活动的主要为中科院大学的研一新生（包括开源协会的成员），还有TUNA，Fedora社区，BJGUG社区,北航开源俱乐部的一些朋友。</p>

<p>下面以Topic为主线简单介绍一下活动现场。</p>

<hr />

<h3>自由软件大观-李瑞彬</h3>

<p>Robin是一位程序员，Fedora 项目贡献者，致力于提高开源软件质量和宣传自由软件文化。</p>

<p>Robin首先就“自由软件的基本点”开始跟大家探讨，帮助大家理解“自由软件的特点”以及“什么是自由？”。之后非常详细地给出了“流行的自由软件”列表，对于想使用自由软件的同学是一个非常好的引导。最后Robin向大家介绍了“社区文化”并鼓励大家“参与到社区中来”。</p>

<hr />

<h3>HTML5应用开发与FirefoxOS平台介绍-袁徐磊</h3>

<p>袁徐磊毕业于清华大学计算机系，现工作于北京谋智网络技术有限公司,Firefox OS工程师，负责Firefox OS WebAPI的开发。</p>

<p>袁徐磊先生代表火狐中国给大家带来了关于“FirefoxOS平台以及HTML5”的主题演讲。袁先生首先介绍了一下“火狐中国”以及“Firefox浏览器”的基本情况，现场统计“Firefox”的使用率非常高，其丰富的插件也使其“如虎添翼”，得到使用者的称道。</p>

<p>后来进入技术主题，袁先生主要就“Firefox OS架构”，“WebAPI列表”，“App开发”，“开源环境与工具”给大家带来了分享，深入浅出地在短短30分钟的时间里把大家带入了“Firefox OS”的世界。后来的互动环节，提问者非常踊跃，提问环节也是对Topic没有提到的细节的一个很好的补充。</p>

<p>火狐同来的工程师还有尤睿先生，在QA环节帮助大家解答疑惑。</p>

<p>目前Firefox OS正在紧锣密鼓的开发中，感兴趣的同学不妨投身到社区中，贡献自己的一份力量-:)</p>

<hr />

<h3>浅谈云计算及其关键技术-白清杰</h3>

<p>白清杰先生是一名资深开源人士，前北京GNOME用户组负责人之一。cloudstack中国
社区管理员，2011年创建公司北京开源愿景信息技术有限公司，提供云计算解决
方案，公司是中国开源云联盟成员之一。</p>

<p>云计算目前被业界普遍认为是未来的发展趋势。
那么云计算究竟是什么？它有哪些特点？为什么云计算被业界普遍看好？
云计算和我们有什么关系？其中又有哪些关键技术？</p>

<p>白清杰先生先从“开源”说起，“没有开源就没有我们现在的互联网时代和云计算时代”，之后以“思维导图”的形式向大家展开叙述“云计算”。从“什么是云计算”到“云计算的特点”，再到“云计算的关键技术”，白先生以清晰的思路跟大家分享了他对“云计算”的认识。</p>

<p>白先生的Topic信息量很大。对于没有接触过“云计算”的同学，这是一个很好的入门。已经对“云计算”有了一定了解的同学，这是一次“梳理思路”的好机会。</p>

<hr />

<h3>自由软件的趋势与挑战及NITE-LPI联合认证项目-龙文选</h3>

<p>龙文选先生目前在黑鸭子软件担任企业开源战略咨询师，帮助国内大中型软件企业制定和实施软件开源的战略和流程。</p>

<p>龙先生主要跟大家分享了“自由软件现状，趋势及挑战”和“NITE-LPI联合认证项目”。</p>

<p>从“自由开源软件”讲起，描述了“Linux简史”，“Linux在国内的企业成功案例”以及“自由软件和Linux对全球软件行业的强力驱动”。越来越多的企业开始采用Linux，开始接受社区式的开发方式，缺乏Linux和自由软件人才已经逐渐成为公司的主要挑战之一，这也是“NITE-LPI联合认证项目”的切入点。</p>

<p>此“联合认证”的目的是全面推进Linux人才培养体系的建设，龙先生就项目的背景，LPI介绍，现状，高校和企业合作，LPI认证考试等给大家带来了分享。</p>

<p>龙先生的演讲带领大家从大局认识开源和Linux世界，对于致力于成为Linux人才的同学是一个很好的启发。</p>

<h2>活动总结</h2>

<p>本次活动，从邀请嘉宾，到活动安排以及现场的布置和协调，历时近一个月（由于今年研一新生搬到了怀柔的雁栖湖校区，情况比较特殊）。</p>

<p>由于从北京市过去雁栖湖校区交通不便，给嘉宾的日程协调带来了诸多不便，而活动当天的到场嘉宾都很给力，演讲内容丰富而精彩，非常感谢他们！活动地点选在雁栖湖校区，也是考虑到SFD的主要受众群体是研一新生，前期的宣传工作主要是海报的张贴，之后的活动可以考虑更加新颖的宣传方式。</p>

<p>活动现场出现了一些小环节的失误（教室的MIC数量没有协调好;教室没有激光笔，给嘉宾翻slides带来不便;嘉宾的演讲时间没有控制好，存在比较严重的超时），都是今后再次举办SFD需要改进的地方。另外，活动形式，除了演讲+QA，可以考虑一些新颖的形式，比如Hackfest，Installfest，圆桌讨论等等，毕竟SFD是为了让大家一起share的活动。</p>

<p>还有就是关于SFD官网的活动注册，今年比较晚申请，没能得到SFD的官方赞助，也是一个小小的遗憾。今后可以订阅SFD的mailing lists，及时注册活动并着手准备。</p>

<p>总得来说，本次活动比较成功，嘉宾和听众有了比较充分的沟通和互动，大家对“自由软件”，“开源”等进行了比较深入的探讨。</p>

<h2>致谢</h2>

<p>感谢各位演讲嘉宾，不辞辛苦地赶到怀柔给大家带来精彩的演讲！</p>

<p>感谢COPU，火狐中国以及LPI对开源协会一如既往的支持！</p>

<p>感谢各位sponsor，COPU，火狐中国，LPI，Deepin Linux以及GitCafe，谢谢你们慷慨赞助！</p>

<p>感谢友邻社区的大力支持，BJGUG，TUNA，Fedora社区以及北航开源俱乐部（很遗憾在活动现场没能跟大家打招呼）！</p>

<p>感谢开源协会的各位志愿者，是你们促成了本次活动的成功举行，协会的新成员都很给力，你们是协会的未来！</p>

<p>感谢活动的各位参与者，没有你们，本次活动会失色不少，希望你们都有所收获！</p>

<hr />

<p>SFD2014中科院站，大家再见！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PTAM Compilation on Linux-HowTo]]></title>
    <link href="http://hustcalm.me/blog/2013/09/27/ptam-compilation-on-linux-howto/"/>
    <updated>2013-09-27T19:50:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/09/27/ptam-compilation-on-linux-howto</id>
    <content type="html"><![CDATA[<p>The README.txt file shipped with the newest PTAM source code is really old (the cvs repositorys are gone for god&rsquo;s sake) ! I struggled to get it done on my Linux Mint 15 with totally failure:&ndash;(</p>

<p>However I made it with just pulling the bleeding edge libs(I mean TooN,libCVD and Gvars3) from github, add a header file <code>&lt;unistd.h&gt;</code> to <code>Tracker.cc</code>, edit the <code>Makefile</code> about the linker flags(I will tell the details below), and I absolutely think that &lsquo;share my experience to you&rsquo; is my duty.</p>

<p>I succeeded on <strong>Linux Mint 15</strong> and <strong>Ubuntu 12.04</strong>, other distros won&rsquo;t be hard either:&ndash;)</p>

<!--more-->


<p>Now, let&rsquo;s start the journey!</p>

<h2>Installation the required dependencies</h2>

<p><strong>Note the versions of the installed packages may differ from distros and versions of the same distro, just choose the ones suitable for you!</strong></p>

<h3>Build Tools</h3>

<pre><code>sudo apt-get update
sudo apt-get install build-essential cmake pkg-config
</code></pre>

<h3>Boost for C++</h3>

<pre><code>sudo apt-get install libboost-dev libboost-doc
</code></pre>

<h3>Low level libraries for Linear Algebra</h3>

<pre><code>sudo apt-get install liblapack-dev libblas-dev
</code></pre>

<h3>Image I/O &amp;&amp; Camera Driver</h3>

<pre><code>sudo apt-get install libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev libv4l-dev 
</code></pre>

<h3>Video I/O &amp;&amp; Codec &amp;&amp; Display</h3>

<pre><code>sudo apt-get install libavcodec-dev libavformat-dev libavutil-dev libpostproc-dev libswscale-dev libavdevice-dev libsdl-dev
sudo apt-get install libgtk2.0-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev 
</code></pre>

<h3>OpenGL</h3>

<pre><code>sudo apt-get install mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev
</code></pre>

<h2>Installation of OpenCV</h2>

<pre><code>cd thePathYouWant
wget http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.6.1/opencv-2.4.6.1.tar.gz
tar zxvf opencv-2.4.6.1.tar.gz
cd opencv-2.4.6.1/
mkdir release 
cd release
cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
make
sudo make install
</code></pre>

<p>You may want to alert the system about the new installed OpenCV libs,</p>

<pre><code>vi /etc/ld.so.conf
add `include /usr/local/lib`
sudo ldconfig
</code></pre>

<p>Do this if you mannualy install other libraries when running into problems(as libcvd and Gvars3 discussed below).</p>

<p>After this, <strong>OpenCV dependencies can now be linked with simply: <code>pkg-config opencv --cflags --libs</code></strong></p>

<p>Really cool, huh?</p>

<h2>Installation of TooN &amp;&amp; libCVD &amp;&amp; Gvars3</h2>

<p>You may want to get the source code by just pulling from github like this:</p>

<pre><code>#!/bin/bash
echo " Now pulling TooN..."
git clone git://github.com/edrosten/TooN.git
echo " TooN done for good!"

echo " Now pulling libcvd..."
git clone git://github.com/edrosten/libcvd.git
echo " libcvd done for good!"

echo " Now pulling gvars3..."
git clone git://github.com/edrosten/gvars.git
echo " gvars3 done for good!"

echo " All done."
</code></pre>

<p>If this confuses you, just download the package like this:</p>

<pre><code>cd thePathYouWant
wget http://www.edwardrosten.com/cvd/TooN-2.1.tar.gz
wget http://www.edwardrosten.com/cvd/libcvd-20121025.tar.gz
wget http://www.edwardrosten.com/cvd/gvars-3.0.tar.gz
</code></pre>

<p><strong>Note the versions may differ as time goes by, use git if you can</strong> Or just look at this <a href="http://www.edwardrosten.com/cvd/toon.html">link</a> for more details.</p>

<p>Also remember <strong>do refer to the README files when you try to install the libraries</strong>, cause they really do help in some manner:&ndash;)</p>

<h3>TooN</h3>

<p>Just header files, easy to install huh?</p>

<pre><code>./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>

<h3>libCVD</h3>

<p>Remember that libCVD really needs TooN, or you will get stuck when trying to compile PTAM:&ndash;(</p>

<p>The steps I used is like this:</p>

<pre><code>./configure --without-ffmpeg --without-v4l1buffer --without-dc1394v1 --without-dc1394v2
make
sudo make install
</code></pre>

<p>If you run into problems, check the output of <code>./configure</code> carefully, they will give you some hints:&ndash;)</p>

<h3>Gvars3</h3>

<p>This is also easy, like this:</p>

<pre><code>./configure --disable-widgets
make
make install
</code></pre>

<h3>Make the libs work</h3>

<pre><code>sudo ldconfig
</code></pre>

<h2>Compilation of PTAM</h2>

<p>Now comes the real part of our journey, refer to the README.txt file for details.</p>

<h3>Copy the appropriate platform build files</h3>

<pre><code>cd PTAM
cp Build/Linux/* .
</code></pre>

<h3>Edit the Makefile to reference custom include or linker paths</h3>

<pre><code>LINKFLAGS = -L /usr/local/lib -lGvars3 -lcvd -lGLU -lGL -llapack
</code></pre>

<p><code>/usr/local/lib</code> is my custom linker path.</p>

<h3>Make the Video Source right</h3>

<ul>
<li>VideoSource_Linux_DV.cc</li>
<li>VideoSource_Linux_V4L.cc</li>
<li>VideoSource_Linux_Gstreamer_File.cc</li>
<li>VideoSource_Linux_OpenCV.cc</li>
</ul>


<p>The first two are for camera capturing and the last twos are shipped with <a href="https://github.com/BeLioN-github/PTAM">BeLioN-github/PTAM</a> and can be used to serve images from video files.</p>

<h3>Make</h3>

<p>Probably an error will popup, like &ldquo;error, <code>usleep</code> was not declared in this scope&rdquo;, easily add</p>

<pre><code>#include &lt;unistd.h&gt;
</code></pre>

<p>to <code>Tracker.cc</code> and you are done:&ndash;)</p>

<p>Just</p>

<pre><code>make
</code></pre>

<p>and enjoy!</p>

<h2>Acknowledgement</h2>

<p>Definitely special thanks will go to <a href="http://www.robots.ox.ac.uk/~gk/">Georg Klein</a>, the author and PTAM! Good job, Georg!</p>

<p>I also refered to several posts while struggling,</p>

<ul>
<li><a href="http://hhfighting.blog.163.com/blog/static/55700323201242524213235/">ubuntu11.10下安装PTAMM</a></li>
<li><a href="http://www.edwardrosten.com/cvd/toon.html">TooN: Tom&rsquo;s Object-oriented numerics library</a></li>
<li><a href="http://code.google.com/p/qt-opencv-multithreaded/wiki/Documentation">qt-opencv-multithreaded</a></li>
<li><a href="http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html">OpenCV Tutorials-Installation in Linux</a></li>
</ul>


<p>Hope this post will do some help and if you find any mistake in my blog, please do <strong>leave your comment or drop me a line:&ndash;)</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里技术大讲堂-互联网营销推广技术专场小结]]></title>
    <link href="http://hustcalm.me/blog/2013/09/17/a-li-ji-zhu-da-jiang-tang-hu-lian-wang-ying-xiao-tui-yan-ji-zhu-zhuan-chang-xiao-jie/"/>
    <updated>2013-09-17T18:28:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/09/17/a-li-ji-zhu-da-jiang-tang-hu-lian-wang-ying-xiao-tui-yan-ji-zhu-zhuan-chang-xiao-jie</id>
    <content type="html"><![CDATA[<p>利用上个周末的两天时间，参加了“阿里技术大讲堂”，主题是“互联网营销技术”，各位讲师都是“阿里妈妈”的人，且个个身怀绝技。个人虽然对这个领域很陌生，但还是跑去参加了，一是想领略一下阿里的技术，而是想感受一下阿里的人。现在想想，不虚此行，用一篇小结整理一下学到的东西，梳理自己思路的同时，希望能给大家带来些有效信息。</p>

<hr />

<h2>认识下P4P</h2>

<p>搜索P4P得到比较多的检索结果是一种基于P2P的传输技术，全称为<a href="http://en.wikipedia.org/wiki/Proactive_network_Provider_Participation_for_P2P">Proactive network provider participation for P2P</a>。而在广告领域，需要解释为Pay for Performance，遗憾的是没能在维基百科上找到权威定义，不过各大电商和互联网公司的推广和广告系统，都会提到P4P这个词。想了解更多，搜索“淘宝P4P”或者“阿里巴巴P4P”会得到一些有效信息。一言以蔽之，就是“高效而精准的广告投放”。</p>

<!--more-->


<hr />

<h2>技术专场要点</h2>

<p>两天的课程一直在做笔记，先面根据课程先后把一些要点分享出来，不会特别详细，给出一些关键词，感兴趣的可以自己查阅资料展开学习！</p>

<hr />

<h3>互联网营销概述-云雀</h3>

<p>广告投放的计费方式分为，cpt/cpc/cps/cpa/cpm等，具体解释可以参考<a href="http://blog.sina.com.cn/s/blog_68d723030100xwwg.html">CPM CPT CPC CPA CPS在网络营销中是什么意思？</a>.</p>

<p>互联网营销的参与方，商家，User，Publisher，营销平台，其中“平台”是所有参与者的纽带，有了“平台”，其它玩家才有得玩。把参与方搞清楚，对于理解后续的整个营销平台架构很关键。</p>

<p>目前主要的营销产品形式：</p>

<ul>
<li>Sponsored Search</li>
</ul>


<p>目前最核心的收益来源，竞价逻辑采用GSP（Generalized Second Price），但是面临一些问题。</p>

<ul>
<li>定向营销</li>
</ul>


<p>比如Google Adsense，百度网盟，技术上使用cookie实现。</p>

<ul>
<li>展示营销</li>
</ul>


<p>属于non-guaranteed类型的营销。</p>

<ul>
<li>RTB（Real Time Biding）</li>
</ul>


<p>即实时竞价，实现的核心系统是Ad Exchange Server。</p>

<hr />

<h3>大规模高并发的营销系统架构-超明</h3>

<p>主要讲了查询系统和更新系统，其中实时更新采用Storm实时流式计算系统，而全量更新采用Hadoop分布式计算系统。</p>

<p>在业务逻辑方面，主要讲述了：</p>

<ul>
<li>出价与竞价体系（GSP）</li>
<li>过滤（实现个性化投放）</li>
<li>Bucket机制（不同算法和策略的验证）</li>
<li>插件化（框架与业务分离，不同业务解耦合）</li>
<li>ranking模型（漏斗式，由简单到复杂）</li>
<li>分级查询（分布式）</li>
<li>实时数据采集</li>
<li>数据分发</li>
<li>大数据（Hadoop，Storm，MPI）</li>
<li>分离（数据节点与检索节点分离）</li>
<li>移步处理（未来的方向，目前正在尝试中）</li>
</ul>


<hr />

<h3>搜索营销触发技术-翔羽</h3>

<p>也就是搜索营销的Matching技术，主要解决的问题：</p>

<ul>
<li>用户查询意图理解</li>
<li>推广语义，信息扩充</li>
<li>用户和客户信息不对称和流量分配</li>
</ul>


<p>三段式架构下的技术问题分解：</p>

<ul>
<li>Query改写</li>
</ul>


<p>主要是Query分析，改写和相似度计算。</p>

<ul>
<li>Bid-Ads</li>
</ul>


<p>包括Ads分析，Bid-Ads索引优化，Bid-Ads排序。</p>

<ul>
<li>初选</li>
</ul>


<p>Matching的不同levels，Term-Phrase-Word Sense-Topic-Structure，典型的NLP吧。</p>

<p>最后讲了一下模糊匹配。</p>

<hr />

<h3>搜索营销中的点击率预估：算法和系统-治平</h3>

<p>创意排序和ECPM排序中的核心问题是CTR预估，即点击率预估，解决的方法是大规模机器学习。</p>

<p>主要的挑战包括，线下海量数据的处理，线下服务的高并发，QPS达到了1W-10W级别，实时性在1ms！</p>

<p>未来努力的方向还是个性化和实时化！</p>

<hr />

<h3>行为定向技术-王睿</h3>

<p>深入检出，幽默风趣，是王总的风格，说的话几乎句句是干货。</p>

<p>定向算法需要解决的问题，本质上，是对创意信息，浏览者信息和场景信息的排序。</p>

<p>两个Query如何比较相似性？（根据Query对应的商品计算）。</p>

<p>后来讲到了定向维度（裸数据的维度达到了千亿的级别，预处理之后是十亿的级别，好吓人）和RTB，可能听得比较起劲，记得东西少了:&ndash;(。</p>

<hr />

<h3>展示营销技术-Tanx架构-澄观</h3>

<p>主要就阿里妈妈研发的Tanx系统展开，首先还是缕清楚参与方，具体交互可以参考<img src="http://contest.ipinyou.com/cn/images/tw.jpg" alt="下图" />。</p>

<p>而ADX市场，主要分析了Google，Tecent，Baidu和Ali。</p>

<p>系统架构方面，主要包括：</p>

<ul>
<li>用户交互</li>
<li>推广计划</li>
<li>管理系统</li>
<li>Business Platform(BP)</li>
<li>ECPM Tanx</li>
<li>Logs</li>
<li>Algorithms</li>
<li>Reports</li>
</ul>


<p>具体技术的展开：</p>

<ul>
<li>bidrequest包含的信息</li>
</ul>


<p>浏览者信息，网页信息，创意信息。</p>

<ul>
<li>QPS控制</li>
</ul>


<p>DSP的系统负载能力各不相同;QPS可以控制到分钟的粒度;基于DSP的错误率，QPS自动调整;集群机器的扩展和临时缩减控制。</p>

<ul>
<li>大流量高并发通信技术</li>
</ul>


<p>竞价流量规模翻N倍;减少网络通信量，压缩，托管等;挖掘单机极致吞吐量和连接数libevent和nginx的灵活应用。</p>

<ul>
<li>Cookie Mapping</li>
</ul>


<p>从安全角度出发，Cookie不能跨域共享，将不同域的不同ID关联起来，就形成了Cookie Mapping技术。具体设计到几十亿的KV存储（采用Tair引擎），Cookie的托管服务以及DSP流量预选。</p>

<hr />

<h3>展示营销的定向算法与竞价算法介绍-芍药</h3>

<p>特别活泼可爱的一个讲师，讲解的思路很清晰。</p>

<p>首先还是从大面上认识一下，非搜索广告 VS. 搜索广告，展示营销的特点，展示营销的分类（Guaranteed Delivery &amp;&amp; Non-Guaranteed Delivery）。</p>

<p>在关于展示营销系统的参与方的讲解上，通过对三方（媒体，客户，用户）进行属性的描述非常直观。</p>

<p>定向算法这边，主要是分类，采用了SVM，解决的问题就是如何选择用户兴趣点的维度以及怎么样将用户和其兴趣点关联。</p>

<p>而竞价算法解决的是，如何在不同的位置，给不同的用户展示合适的广告？这里又是Tanx解决的问题了，主要用到的技术就是HDFS，Map/Reduce，MPI。</p>

<p>而在客户工具这里，阿里也越来越关注流量提供方和广告投放方，毕竟他们才是拿钱的主啊:&ndash;)</p>

<hr />

<h3>DSP系统架构-墨魂</h3>

<p>DSP（Demand-Side Platform），即需求方平台。</p>

<p>实时定向系统架构：</p>

<ul>
<li>投放平台</li>
<li>特征扩展</li>
<li>信息检索</li>
</ul>


<p>这里讲得比较多，主要有倒排，and和or查询，迭代查询机制，Cache机制，数据更新机制。</p>

<ul>
<li>实时竞价</li>
</ul>


<p>Tanx again。</p>

<hr />

<h3>RTB技术介绍-则成</h3>

<p>虽然是纯技术，但是这一讲很有意思。</p>

<ul>
<li>Why RTB？</li>
</ul>


<p>实时竞价，是一种利用第三方技术在数以百万计的网站上针对每一个用户展示行为进行评估以及出价的竞价技术。</p>

<ul>
<li>RTB Mechanisms</li>
</ul>


<p>在几十个毫秒内，找对人，投对商品。</p>

<p>大概步骤：</p>

<p>   1.用户访问网页</p>

<p>   2.流量竞拍要求</p>

<p>   3.海量用户数据进行价值判断与出价</p>

<p>   4.广告交易市场竞拍</p>

<p>   5.获得广告位投放机会</p>

<ul>
<li>RTB的特点</li>
</ul>


<p>   1.粒度为每个PV级别的拍卖</p>

<p>   2.交易平台以CPM方式向获胜DSP收费</p>

<p>   3.Vickrey拍卖（封闭拍卖，价高者得，第二价格扣费）</p>

<p>   4.对每个bidder，最优策略是按照自己对商品的价值来报价（后来的理论分析很优美）</p>

<ul>
<li>Bidding Algorithms</li>
</ul>


<p>   1.md6.com（DSP公司）的竞价算法</p>

<p>   2.Yahoo的Bid Star Tree</p>

<p>   3.Alimama的报价模型之一，Golden Filter</p>

<hr />

<h3>推荐技术及在营销推广中的应用-小致</h3>

<p>讲得很技术，pure technical.</p>

<p>首先介绍了淘宝数据，按照“行为”，“场景”和“内容信息”分类。</p>

<p>之后进入正题，开始讲“推荐算法”。涵盖的内容：</p>

<ul>
<li>Item CF（协同过滤）</li>
</ul>


<p>主要说到了Jaccard/ModJaccard以及Cosine/WbCosine。</p>

<ul>
<li>内容相似度</li>
</ul>


<p>Minhash，解决“冷启动”的问题。</p>

<ul>
<li>融合算法</li>
</ul>


<p>模拟退火，单纯形，GBDT/LR之类的。</p>

<p>评价指标主要提到了Auc，Recall，Coverage，都是机器学习的东西了。</p>

<p>最后的推荐形式，讲了“相似推荐”，“搭配推荐”和“实时推荐”。</p>

<hr />

<h2>总结</h2>

<p>两天的课程，算是对互联网营销入了门。对很多专业术语有了了解，对现有的系统架构有了皮毛的认识，而对于机器学习，数据挖掘，自然语言处理的威力有了更加清晰的定位。在“做东西的过程中学习”，是现在非常赞成的“学习方法”，虽然两天的技术讲堂没有“做东西”，但是来自一线的阿里讲师们，用自己的实际经历将心得传授给大家，也是一种非常好的学习方式！感谢阿里在技术讲堂上的努力，阿里高校技术联盟今年也开始在计算所试点了（自动化所明年应该会到位），感谢各位讲师！</p>

<p>无意中发现了一个RTB的比赛，链接在<a href="http://contest.ipinyou.com/cn/index.shtml">这里</a>，感兴趣的同学不妨一试:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[POSIX Threads-多线程编程初步]]></title>
    <link href="http://hustcalm.me/blog/2013/09/06/posix-threads-duo-xian-cheng-bian-cheng-chu-bu/"/>
    <updated>2013-09-06T10:24:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/09/06/posix-threads-duo-xian-cheng-bian-cheng-chu-bu</id>
    <content type="html"><![CDATA[<p>学习，总是要深入进去才是好的。</p>

<p>由于多摄像头视频处理的需要，这两天“正式学习”了多线程编程，切入点是POSIX的pthread库。不管承认与否，在进程之后的线程，对软件开发有非常深远的影响。本质上的算法+数据，我个人的理解是，线程是在算法上做的改进（也就是对于整个作业，如何合理地切分，符合CPU和操作系统的工作习惯，也就是在比较小的开销下完成任务），相比于进程而言，由于多个线程都在同一个memory space，因此线程间通信以及创建线程的overhead都比进程小了不少，业内也把thread称为LWP（Light Wight Process）。</p>

<!--more-->


<p>多线程好处多多，容易让人头痛的便是线程的“同步”问题，也就是大家常说的互斥访问“临界区资源”，常用的方法就是，mutex，条件变量，信号量等。</p>

<p>学习的过程中，主要就线程的创建，终结，join，detach，参数传递，mutex的使用，条件变量和信号量的使用进行了实际的编码练习，剩下的关于调度策略，优先级，线程本地变量等还需要进一步学习。参考了一些精华文章，自己把写的demo放到了github上了。这不是一篇tutorial，所以就不具体说技术细节了，大家去看下面给出的链接和demo吧。</p>

<h3>学习资源链接</h3>

<ul>
<li><a href="https://computing.llnl.gov/tutorials/pthreads/">POSIX Threads Programming Tutorial From Lawrence Livermore National Laboratory</a></li>
<li><a href="http://randu.org/tutorials/threads/">Multithreaded Programming (POSIX pthreads Tutorial)</a></li>
<li><a href="http://codebase.eu/tutorial/posix-threads-c/index.php">Creating multi-threaded C++ code</a></li>
<li><a href="http://www.yolinux.com/TUTORIALS/LinuxTutorialPosixThreads.html">POSIX thread (pthread) libraries</a></li>
<li><a href="http://www.ibm.com/developerworks/library/l-posix1/index.html">POSIX threads explained-A simple and nimble tool for memory sharing</a></li>
<li><a href="http://www.tutorialspoint.com/operating_system/os_multi_threading.htm">Operating System &ndash; Multi-Threading</a></li>
<li><a href="http://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread.h.html">&lt;pthread.h></a></li>
</ul>


<h3>Demo</h3>

<ul>
<li><a href="https://github.com/hustcalm/POSIX-Threads-Beginner-s-Guide">POSIX-Threads-Beginner-s-Guide</a></li>
</ul>


<p>之后还是要系统地学习一下OS，MIT的6.828是一个不错的起点！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小记Fedora 19 Release Party和Barcamp Beijing August]]></title>
    <link href="http://hustcalm.me/blog/2013/08/24/xiao-ji-fedora-19-release-partyhe-barcamp-beijing-august/"/>
    <updated>2013-08-24T09:47:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/08/24/xiao-ji-fedora-19-release-partyhe-barcamp-beijing-august</id>
    <content type="html"><![CDATA[<p>离这两个活动已经过去一周的时间了，总觉得应该写点什么，那就以这篇“小记”来叙述吧。</p>

<p>Fedora一直以来被冠以edge bleeding的称号，尝鲜者的最爱，自己从Ubuntu 9.04开始使用Linux，便一直与其无缘，现在想想，确是有一些遗憾的（具体说不上来为啥，也许自己总是希望小众一些，Fedora在国内的用户确实不是太多，至少相比于Ubuntu来说是这样的，有限的CentOS使用经历告诉我，这是一款值得使用的Linux发行版）。Fedora 19,代号“薛定谔的猫”，作为第一款“原生”支持3D打印的操作系统，让人眼前一亮。</p>

<p>Barcamp对我来说则陌生很多，在活动的前两天才得知消息，告诉我的人说是“一个充满各种创意制作的聚会”，而实际上“这里是一个充满各种创意演讲的地方”。具体的信息，大家移步<a href="http://www.barcamp-beijing.com/">Barcamp官方网站</a>吧。</p>

<!--more-->


<h2>Fedora 19 Release Party</h2>

<p>这次RP，主要有三个议题，涉及Cloud Computing，System Trace，3D Printing。</p>

<h3>OpenShift &amp; Cloud</h3>

<p>演讲人Gerard Braad（@gbraad），Fedora 大使委员会成员，亚太地区区域导师，Fedora社区和开源社区的活跃演讲者，致力于Fedora品牌的推广。</p>

<p>OpenShift算是一种PaaS，演讲者先是就虚拟化的一些基本概念进行阐述（虚拟化的分类，典型的技术，比如KVM，LXC等），再谈到OpenStack的基本架构，之后涉及OpenShift的架构。新的概念不多，而且讲解非常深入浅出，非常适合云计算入门。</p>

<h3>SystemTap Introduction</h3>

<p>演讲人Robin Lee（李瑞彬），供职于北京蓝汛 (ChinaCache)。在 Fedora 项目中是 packager 的角色，致力于提高自由软件的质量和整合度。</p>

<p>SystemTap 是 Linux 下的可编程的通用系统跟踪工具，可进行侵入式跟踪，可用于内核态和用户态跟踪及代码注入。在 Linux 实现了大致相当于 DTrace 的功能。其语法由 AWK 语言发展出来。本次分享主要介绍了SystemTap 的基本语法和一些使用举例，最后生成火焰图（Flame Graph）的例子还是很酷的。</p>

<p>这是个纯技术话题，不多说了，我比较好奇的是Trace实现的底层原理，在网上查了下，以下两篇文章很不错：</p>

<ul>
<li><a href="http://blog.csdn.net/wudongxu/article/details/6345481">systemtap原理及使用</a></li>
<li><a href="http://xuclv.blog.51cto.com/5503169/1184517"> linux系统分析工具续-SystemTap和火焰图（Flame Graph）</a></li>
</ul>


<h3>3D Printing at Fedora 19</h3>

<p>演讲人Tong Hui（@tonghuix），开源软件与开源硬件的布道者，开源嵌入式培训导师，GNOME 基金会成员，北京GNOME用户组成员。</p>

<p>这个演讲的信息量比较大，演讲者从3D打印机的历史开始说起，谈到了3D打印的现状以及常用技术，并且简单分析了技术实现，最后结合Fedora进行了真机演示（DFRobot公司的3D打印机）。</p>

<p>我的理解是，3D打印机是嵌入式技术，3维建模技术，材料学的完美结合！</p>

<h2>Barcamp Beijing August</h2>

<p>聚会地点在Microsoft Research Asia一层，主要参与人员是国际友人，国际友人的友人，还有众多的ABC。God，谁让他们的英语都那么native呢！</p>

<p>这一天比较大的收获是，体验了Barcamp的活动形式（Speech &amp; QA），见识了演讲者的无限魅力（I really mean it!），获取了一些“创新”思维。其它的觉得表达不出来了（因为在会上，有一种略微的不适感，难以融入到老外的圈子里面去），大家等下次Barcamp的时候自己去体会吧！</p>

<p>会不会有一天也在Barcamp上演讲？（Who TM knows，可能性不大，看自己了！）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[八月圣湖环游记-简单攻略]]></title>
    <link href="http://hustcalm.me/blog/2013/08/10/ba-yue-sheng-hu-huan-you-ji-jian-dan-gong-lue/"/>
    <updated>2013-08-10T14:45:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/08/10/ba-yue-sheng-hu-huan-you-ji-jian-dan-gong-lue</id>
    <content type="html"><![CDATA[<p>高原蓝宝石，美丽青海湖！</p>

<p>抱着对青海湖的无限向往，我们三人小分队在8月初完成了环湖骑行之旅。本文旨在简单记录一下自己的环湖经历，并分享些简单攻略供后来人参考。</p>

<p>文章分为四个部分：</p>

<ul>
<li>前期准备</li>
<li>环湖旅程</li>
<li>简单总结</li>
<li>致谢</li>
</ul>


<!--more-->


<h2>前期准备</h2>

<p>本次骑行，三人小分队基本都是小白，所以前期参考了一些攻略，下面给出一些个人认为比较好的链接：</p>

<ul>
<li><a href="http://www.mafengwo.cn/i/741974.html">带你去环青海湖(骑行全攻略，内附海量图片)</a></li>
<li><a href="http://lvyou.elong.com/4680403/tour/a077t73d.html">攻略_我的环青海湖三天攻略</a></li>
<li><a href="http://www.mafengwo.cn/i/1304396.html">青海湖骑行杂记-鑫鑫自行车俱乐部</a></li>
<li><a href="http://www.dongfanghong.com.cn/bbs/viewthread.php?tid=291791&amp;highlight=%BB%B7%BA%FE">6月风雪环湖&mdash;青海湖（图片狂来袭）顺便介绍一家租车俱乐部给大家</a></li>
</ul>


<p>综合了一下攻略，开始准备，下面根据个人的环湖经验推荐一个清单：</p>

<ul>
<li>（1）骑行装备，一般要自备魔术方巾（2块），手套（半截指即可），墨镜（网上购买即可，近视的同学也可以购买墨镜夹片，我就是这么干的），其它装备比如头盔，绑腿，坐垫（这个很关键，骑行过程不是腿疼，是屁股疼！），雨衣等租车的地方都有</li>
<li>（2）衣物，八月初青海湖周边的平均气温在20度，不过早晚温差很大（早晨和晚上能够到零下），长裤，外套必不可少，我是带了两件卫衣，两条运动裤，卫衣里面穿T恤，感觉还行，晚上出去略冷，希望晚上出去玩玩的建议带上毛衣或者羽绒服（看到有的姐们带了）。还有换洗的袜子和内衣（袜子没时间洗可以多带几双）</li>
<li>（3）药物，最好在去之前一周开始喝红景天（有泡着喝的中药，也有现成的胶囊，我们在药店买的胶囊，48元/盒），对抑制高原反应很有效。感冒药品（推荐百家黑，这次环湖之旅，我吃个4个白片），消炎药，云南白药，防水创可贴等</li>
<li>（4）防晒装备，防晒霜（至少SPF30），遮阳帽（可有可无，一路上我们三个都是带着头盔）</li>
<li>（5）食物，水，巧克力（士力架）等，我们没人早上出发带两瓶水，中午吃饭的时候会把瓶子装满，一般每天3瓶水(感觉白开水最好，脉动什么的不推荐)</li>
<li>（6）洗漱用品，牙刷牙膏，毛巾，洗发水，香皂等，能带就带上吧，到那里买不太值得</li>
</ul>


<p>简单来说，我们的目的是过去骑行，因此围绕骑行准备东西，核心的东西带上即可，实在忘记带了可以到西海镇后购买。</p>

<h2>环湖旅程</h2>

<h3>入住西海镇</h3>

<p>我们在去之前就预约好了车子和住处，定的是鑫鑫自行车俱乐部，上面的一篇攻略就是这家俱乐部的老板写的，相关联系方式可以参考那篇<a href="http://www.mafengwo.cn/i/1304396.html">帖子</a>。他们家经营时间不是特别长，车子都比较新，是看了这篇<a href="http://www.dongfanghong.com.cn/bbs/viewthread.php?tid=291791&amp;highlight=%BB%B7%BA%FE">帖子</a>后选择了他们家的。其它的租车俱乐部还有骑兵应，翼游，达玉等等，这些俱乐部一般都提供租车+住宿+救援。</p>

<p>8月2号到达西宁西站，之后乘大巴抵达西海镇，下车后顿感一阵清凉！当天住在了鑫鑫提供的住宿（31号楼），休息后的主节奏是试车！迫不及待穿上行头，照照镜子还挺像样，三人骑车开始溜达起来。镇子确实太小了，几分钟就饶了一圈，然后分别往环湖东路和315骑了一小段，回来发现右腿的裤子上好多油，囧，忘记带绑腿了！在这里提醒一下大家，记得带绑腿！</p>

<p>车子主要试一试变速，刹车以及骑行的舒适程度，发现问题，老板都会比较热情地帮忙解决。就这样3辆ATX 750正装代发！</p>

<h3>骑行第一天，西海镇-151景区，掩盖不住的兴奋和疲惫</h3>

<p>刚出发，我们3个都格外兴奋，合影留念之！大概骑10分钟左右可以看到“正式的环湖起点”。前20公里多大上坡，比较累人，这时候要合理利用变速，上坡就小档位慢慢往上爬，切忌奔放地冲刺（到了后边体力会出问题）。过了艰难的上坡后，路况转好，视野也开阔起来了，沿途有沙漠，牧民经营的滑沙，卡丁车项目，往远处看，连绵的山煞是好看！慢慢地，会看到青海湖，接近那片蓝宝石的感觉很好，远远看去，水天一色！</p>

<p>中午我们在湖边休息用餐，体验了一把骑马，酥油茶，糌粑，开锅羊肉，青稞酒便是丰盛的午餐啦！说实话，开锅羊肉有些吃不习惯，很难嚼。</p>

<p>下午上路后，转角处就到了109线，脱离了环湖东路，车辆明显增多。这时候一定要注意安全！也许是第一天骑行，经验不足，下午找地方住宿遇到了一点小麻烦（到了151景区找住宿不太好，最好是定骑行计划的时候就把住的地方联系好），而且双腿超级酸。好歹休息了一段时间后恢复过来了！（这里的小插曲就是，我头疼+反胃+腿酸，晚饭没吃，两个白片下去蒙着被子休息，出了一身冷汗后，身体状况好转，万幸！）</p>

<p>我们当晚住在离151景区1公里处的海鹏家园，三人间50/人，感觉还算合理，就是洗澡水温度上不去！</p>

<h3>骑行第二天，151景区-黑马河20公里开外的吉祥家园，景色醉人，亲近圣湖</h3>

<p>有了第一天的经验，今天的骑行对车子的档位控制好了很多。没有了昨天的大上坡，长长的小坡不断，好在今天风光无限！靠近湖边，而且遍地是牧民和牛羊，沿途的蒙古包点缀在草原上很有感觉。这里可以看到很多“直通湖边”，也就是当地藏民的生意了，到湖边需要交费。我们没有理会，倒是在骑行过程中发现一处开口的草原，二话不说，上去耍耍。站在广袤的草原上，看着远方，心也跟着变大了。</p>

<p>中午在黑马河吃饭休息，然后向吉祥家园进发！</p>

<p>下午上了环湖西路，这一段是离青海湖最近的一段，通往鸟岛。20公里的路，竟然用了2个小时，走走停停，流连忘返，这一段拍了好多照片。中途还碰到了单车结婚旅行，新郎单车再新娘环青海湖，浪漫极了。</p>

<p>晚上住在了吉祥家园（这时鑫鑫的老板给我们推荐的，感觉还不错），趁着店家做晚餐，我们3人去湖边溜达。这一次近距离体会到了青海湖的博大和美丽，看着远远的飞鸟，发自内心的舒服。头一次住蒙古包，多少有些不习惯，开始飞虫挺多，后来天气转凉，飞虫也休息了。整晚没有睡踏实，一种莫名的不安全感！</p>

<p>老板叫卓玛，很朴实的一个女人，但是在商业化的浪潮中，又是另外一种朴实了。</p>

<h3>骑行第三天，吉祥家园-刚察县，鸟岛在哪里？</h3>

<p>从蒙古包爬起来，吃饱喝足的我们又踏上了旅程。前半段的风景跟昨天无异，而且离青海湖越来越远，所以前面速度稍快。到转弯的时候，有个超级大爬坡，远远地看到都有些慎人！很快，经过了石乃亥乡，向鸟岛进发了。沿途赶上了昨天中午一起吃饭的一个兄弟，大家相互鼓励。（沿途的人都会相互说加油，尤其是碰到逆向骑行的骑友的时候。90%的人都是顺时针环湖，逆时针的人不多）记得到了鸟岛景区，我们认为是一个镇子而已，所以继续赶路了。</p>

<p>骑着骑着，竟然发现鑫鑫家的车从我们身旁呼啸而过，此时，我们发现，我们已经离开鸟岛了！哎，季节不对头，也罢也罢。今天前半段路况不错，骑起来很舒服。</p>

<p>中午找了家川菜管，搞笑的是，点了好几个菜都没有！最后只好点最经典的鱼香肉丝，呵呵</p>

<p>下午下了环湖西路，转到了315线！这里的印象是，多上坡的马勒戈壁！频繁的上坡加上荒芜人眼的场景，顿感一阵凄凉，期间碰到好几个逆行的骑友。比较给力的当属远看青藏线上的和谐号了，一节节车厢向高原爬去，壮哉！</p>

<p>接下来的路程都是向刚察县迈进了，比较好玩的是，进城后有几车的解放军战士经过，向我们竖起了大拇指，顿感畅快啊！</p>

<p>刚察县明显是一个贸易县城，多汉人，而且比较繁华（比内地的很多县城都繁华）。可惜的是，这里所谓的青年旅社是坑爹的！</p>

<p>好不容易可以洗个澡了，而且是独立卫生间的，很感动。以后骑行的筒子们，到了刚察县可以考虑住他们家，银河宾馆。卫生条件一般，但是价格公道，洗澡方便！</p>

<h3>骑行第四天，刚察县-西海镇，风雨过后是彩虹</h3>

<p>担心又期待的事情终于还是发生了，下雨了，刮风了！阴雨天气也使得雨衣派上用场，骑行之旅可以完美了。</p>

<p>一言以蔽之，上午就是饥寒交迫！雨中骑行，长长的之字坡，再加上逆风，真是有点举步维艰。好歹我们是有目标的，45公里处的拖勒乡可以饱餐一顿。</p>

<p>冒雨前行，裤腿和鞋子都淋湿了，可恶的是来往的大卡车，溅一身雨水不说，带来一阵风把雨衣搞乱了。期间碰到好多徒步的人，那个长队绵延数公里，仔细想想，不由得对他们心生佩服！说得比较搞笑点，在环湖公路上，骑车的羡慕开车的，而徒步的羡慕骑车的～ 后来在火车上遇到一个参加徒步的女孩，得知徒步环湖的活动是一个公益活动，连续3年，每年120公里，每年走4天，每天30公里，晚上搭帐篷住在湖边。热爱徒步的朋友们不妨考虑下～</p>

<p>尼玛，说好的45公里呢，说好的饱餐一顿呢！50公里了，竟不见拖勒乡半点踪影。脑残了，拿出手机定位，发现那个“破乡”不在315沿线，苍天啊！继续往前走，万幸的是，遇到一家小卖部和一个小餐馆（说是餐馆，其实就是一个大的蒙古包，里面只提供泡面和面皮）。赶紧钻进蒙古包取暖，来一碗面皮抚慰下受伤的心灵，祈祷下午的风可以小点！</p>

<p>吃完面皮，再来一个士力架，走着！风没有小，雨倒是停了，脱下雨衣，继续前行！而前面我们要面对的，又是无尽的之字大上坡。3个兄弟费了九牛二虎之类，愣是一直骑，克服了那些“狗日的破上坡”。那段路还是比较危险的，沿途很多大卡车。</p>

<p>之后雨过天晴，我们迎来了大下坡和美丽的风光，哈哈！成群的羊点缀在广阔的山坡上，仿佛一颗颗小珍珠。</p>

<p>不夸张地说，有飞流直下三千尺的感觉，最后的20多公里是让人舒爽的下坡和开阔的美景（蒙古包，草原，牛羊马）。一路上的云变化多端，惹人喜爱！</p>

<p>之后的之后，我们回到了西海镇，环湖圆满结束！而在离镇子不远处的一个小饰品店，我们分别买了绿松石和狼牙，然后就没有然后了&hellip;</p>

<h2>简单总结</h2>

<p>首先，环湖不是什么高难度的事情，正常人都可以！这次去的三个兄弟，平常玩车都不多，可以说是小白，但是玩得很high！</p>

<p>然后，准备一定要到位，不用太面面俱到，但是核心物品一定要到位（拿药物来说，你也许用不上，但是一定要都准备，情况复杂，谁也无法保证不出什么意外。实际上，环湖出意外的人貌似不少，但基本上都是自己不小心造成的）。</p>

<p>最后，量力而行，注意安全！我们制定了4天的环湖计划，平均每天90公里，算是休闲路线了，适合大多数人。后来我们还讨论说，骑3天也完全可以拿下，但是那样一来，玩的兴致也许要打折扣了。另外，环湖景色虽美，但一定要眼观六路，耳听八方，时刻注意骑行安全，安全是玩的好的基本保障。</p>

<h2>致谢</h2>

<p>谢谢分享攻略的骑友，能够让我们在出发前做好充足的准备。</p>

<p>谢谢同行的两个兄弟，和你们一起骑行感觉很自在，是你们让此次旅行变得有趣，好玩又有安全感，沿途的相互支持和鼓励是最美好的馈赠。</p>

<p>谢谢每一个关心我们的人，你们的关心保佑我们的环湖之行顺利而美好。</p>

<p>谢谢Sanny，你的牵挂使我的环湖之旅充满了动力，你的那张生动帅气的骑行素描画注将是本次环湖之旅最圆满的句号！</p>

<p>鉴于之前的攻略图片已经很丰富了，本文就不贴图了，看多少的图片都不如亲身去体验！</p>

<p>青海湖骑行，你可以的！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从开源硬件Arduino，Raspberry Pi，BeagleBone说起]]></title>
    <link href="http://hustcalm.me/blog/2013/07/27/cong-kai-yuan-ying-jian-arduino%2Craspberry-pi%2Cbeagleboneshuo-qi/"/>
    <updated>2013-07-27T14:32:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/07/27/cong-kai-yuan-ying-jian-arduino,raspberry-pi,beagleboneshuo-qi</id>
    <content type="html"><![CDATA[<p>最近“硬件复兴”了，“嵌入式”又重获新生，在移动互联网创业领域“粉墨登场”。想想本科的51单片机经历，在<a href="http://www.dian.org.cn">Dian</a>嵌入式项目组的DSP经历，ABU机器人比赛的控制组经历，还有零星地把玩过ARM和FPGA的经历，忍不住写下此文，谈谈自己对开源硬件的看法。</p>

<p>大四做完机器人就没有再怎么接触硬件了，最近OpenDrone小组需要调试四旋翼的电调，帮了一点小忙又燃起了自己对嵌入式的热情（想想我们的智能手机不就是一个典型的嵌入式产品么？只是没有开源硬件板在硬件方面的可玩性高）。前两天的一次OpenDrone聚会，有幸去了<a href="http://www.dfrobot.com.cn">DFRobot</a>北京分公司，一进入他们的工作室就有一种莫名的久违感，是因为那么多的电子元件摆放地杂杂乱乱却又充满生机么？（东七楼的嵌一，启明的704和502都是有这种感觉的啊！）在那里看了3D打印机的演示(forked from <a href="http://www.ultimaker.com">Ultimaker</a>)，深切感受到那些“高端的技术”其实就在我们身边！</p>

<!--more-->


<h3>Arduino小车</h3>

<p>回到实验室，开始看之前没看完的两篇文章，其中一篇<a href="http://blog.knownsec.com/2012/02/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%B9%8B%E6%97%85%EF%BC%9A%E5%BD%93arduino%E9%81%87%E4%B8%8Aandroid/">机器人之旅：当Arduino于遇上Android</a>非常科普，比较适合有一定硬件基础的人阅读，之后一辆Arduino小车的思路就非常明晰了。当即对照作者给出的硬件清单开始淘宝之旅，下面给出一个参考：</p>

<ul>
<li>机器人小车底盘套件（底盘+电机+车轮，2WD参考价149￥，4WD参考价198￥)</li>
<li>Arduino主控板（入门级别的UNO，70￥左右）</li>
<li>马达驱动板（一般都是L293双路电机驱动板，60￥左右）</li>
<li>扩展接口板（Arduino Xbee传感器扩展板V5看起来不错，含RS485无线传输蓝牙接口，45￥）</li>
<li>Bluetootch V3蓝牙串口模块（与上面的扩展接口板协同工作实现蓝牙传输，65￥）</li>
<li>LiPo电池（购买2S，即7.4v电压输出的，79￥）</li>
<li>平衡充充电器（淘宝上差价比较大，主要是做工有差别，150￥左右的感觉比较靠谱）</li>
</ul>


<p>这一套总共下来是600￥左右。想想都想哭了，如果买来元器件自己做，至少可以少花一半钱吧！</p>

<h3>Beaglebone和GSOC的那些事</h3>

<p>提起Beaglebone就又爱又恨啊，今年申请GSOC把宝压在了他家，结果申请准备做得不够充分，竞争过于激烈，自己就酱油了。不过在申请过程中多少对Beaglebone有了一定的了解，对板载资源以及软件支持有了一定的了解，尤其是boneScript（基于node.js）。Beagle相对于Arduino功能强大很多，显得多少有些重量级了，对Linux发行版的支持良好，外围传感器的通信都是标准的driver访问，有完善的TCP/IP支持。感觉Beagle一直在拿来跟Raspberry Pi对比，有很强的竞争态势。其背后财大气粗的TI在业内的号召力也非同小可，在社区建设和技术支持上应该会越来越好。</p>

<h3>Raspberry Pi，迷你计算机？</h3>

<p>也许这不是第一台所谓的迷你计算机，但确是当下最流行的mini PC，可谓大红大紫。完整的接口支持，操作系统支持，较强的硬件配置使其当之无愧跟PC无异，这时不禁感叹，从Bill Gates的PC梦到如今的mini PC，个人计算机已经从消费级别到了DIY级别了。不过这种mini PC对于普通消费者也许没有那么大的吸引力，Geek和各位发烧友才会因其而激动不起。</p>

<h3>下一站，UDOO？</h3>

<p>在<a href="http://www.kickstarter.com">kickstarter</a>上仅仅10天就募得20万美元，其吸引力不言而喻。单单是4核ARM的PC就够潮了（话说回来，支持HDMI输出的IPhone和Android机，再稍加改造，是不是也可以叫做mini PC了呢？）。</p>

<blockquote><p>UDOO属于开源硬件的一部分，搭载ARM i.MX6 Freescale处理器，主板上同时还带有一颗Arduino DUE出品的ARM SAM3X处理器，能够满足Android和Linux操作系统的性能需求。 其尺寸非常小，只有11cm x 8.5m，功耗也低。</p>

<p>UDOO为开发者提供灵活的开发环境，可以提供Android、Linux、ArduinoTM、Google ADK开发平台，同时其强大的性能还能参与最新的“物联网”开发。通过更换Micro SD，用户可以在数秒之内切换Android和Linux，非常便捷。</p></blockquote>

<h3>开源硬件和移动互联网</h3>

<p>继IPhone开创了智能手机的新纪元，Android创造了开源上的商业奇迹，Arduino使得开源硬件渐渐深入人心，移动互联网又迎来了一种新的创业模识-“硬件创业”，相比于成本低廉，竞争激烈的软件创业，从硬件出发构建有趣的嵌入式设备和应用必将大火（至少会有不少小企业来玩，目前国内很多xxRobot单单是靠出售一些自制的主控板，扩展板，小型机其人就可以活得不错吧，而稍显高端的可穿戴设备是大势所趋了，目前Google Class引领风骚，智能手表研究大热）。再扯远点，在国内半死半活的“互联网”也可以趁机出来攒人气，往智能家居那里拼命靠还是比较靠谱的！</p>

<p>所以想创业的朋友们，不妨考虑从开源硬件入手，其入门的门槛不比开发App高多少，开源硬件平台已经比较成熟了，接下来是应用疯涨期。</p>

<h3>他们说</h3>

<ul>
<li><a href="http://www.csdn.net/article/2013-05-02/2815109-ArduinoUno-vs-BeagleBone-vs-RaspberryPi/1">三大主流开源硬件对比：Arduino vs BeagleBone vs Raspberry Pi</a></li>
<li><a href="http://www.csdn.net/article/2013-05-02/2815109-ArduinoUno-vs-BeagleBone-vs-RaspberryPi/2">三大主流开源硬件对比：如何选择平台</a></li>
<li><a href="http://tech2ipo.com/59224">忘了树莓派，UDOO才是Geek最爱</a></li>
</ul>


<p>The End!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再谈OpenAPI，从WebService说起]]></title>
    <link href="http://hustcalm.me/blog/2013/07/22/zai-tan-openapi%2Ccong-webserviceshuo-qi/"/>
    <updated>2013-07-22T20:51:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/07/22/zai-tan-openapi,cong-webserviceshuo-qi</id>
    <content type="html"><![CDATA[<p>最近对<a href="https://github.com/hustcalm/SNS-Shim">SNS-Shim</a>做了更新，目前支持新浪微博，人人网，QQ互联（包括QQ，Qzone，腾讯微博），豆瓣，网易微博，使用相应的wrapper类可以方便地拿到用户的个人信息，以及发布新的状态。</p>

<p>在开发的过程中，自己对OpenAPI的工作原理有了进一步的理解，同时也激起了对服务提供商如何向开发者提供易用可靠的OpenAPI服务进行研究的好奇心。简单来说，开发者只需要关注如何“使用”，了解了基本的授权流程后，接下来只要按照API进行网络请求即可（使用服务提供商的SDK是最直接的，也可以自己根据相应的请求规范自己实现请求接口，因为本质上都是向某个URL发起HTTP请求）。</p>

<p>而作为服务提供商则要考虑开放平台的建设问题了，这里面涉及到各种关于集群，高并发，大数据，分布式处理的东西（这个时候再看OAuth什么的，只是其中的一个小实现细节）。</p>

<!--more-->


<p>从整个大的层面看开放平台，是服务提供商将自身的一部分业务和服务以Web Service的形式开放出去（比较早的貌似是Yahoo搜索，开发者可以利用其API进行搜索），比较典型的有Facebook，Twitter，Flickr，Google Map，Amazon，Youtube等等。而国内的开放平台的建设和发展也是最近几年的事情，目前几大SNS站点，腾讯，阿里巴巴旗下的淘宝等，豆瓣都顺应潮流推出了自己的平台。不管是跟风也好，炒作也罢，抑或是背后的业务需求，各位大佬们都要面临开放平台的建设问题，从技术角度来考虑，有REST和类RPC两种选择。</p>

<p>由于本身认识有限，就不泼墨了，简单说说Web Service常见的几个概念，然后给出几个好文的链接。</p>

<ul>
<li>Web Service：直观理解，通过Web向外部提供服务。</li>
<li>RPC：Remote Procedure Call，远程过程调用，客户端向服务器端发起一个请求（携带方法和参数），服务器处理后返回结果给客户端。</li>
<li>XML-RPC：基于XML的RPC，也就是客户端和服务器之间消息传递的格式是基于XML的，标准化的XML解析实现数据交换。</li>
<li>SOA：Service Oriented Architecture，面向服务架构，适应Web Service开发的一种架构，请自行Google。</li>
<li>SOAP：Simple Object Access Protocol，对XML-RPC的改进和拓展，却不尽人意。</li>
<li>REST：REpresentation State Transfer，Web Service的一种架构，设计理念和HTTP协议有异曲同工之妙。</li>
</ul>


<p>下面给出几个链接，供大家一起研究：</p>

<ul>
<li><a href="http://www.cnblogs.com/mindsbook/archive/2009/11/17/web_service_RESTvsRPC.html">Web Service实践之REST vs RPC</a></li>
<li><a href="http://oplatform.org/archives/23">OpenAPI出现、起源与现状（连载一）</a></li>
<li><a href="http://oplatform.org/archives/24">OpenAPI出现、起源与现状（连载二）</a></li>
<li><a href="http://www.cnblogs.com/liuxiaojun/archive/2010/08/30/openapi.html">OpenAPI系列文章-如何构建一个OpenAPI平台</a></li>
<li><a href="http://openapi.codeplex.com/">OpenAPI-Open API Platform 一个开源的OpenAPI平台</a></li>
<li><a href="http://www.infoq.com/cn/articles/open-api-practice">Open API分析、实践和思索-阿里 放翁</a></li>
</ul>


<p>感觉<a href="http://blog.csdn.net/cenwenchu79">放翁</a>的文章分析很透彻，他CSDN上也有很多关于开放平台的好文章，建议大家阅读！</p>

<p>刚才又发现一篇不错的post<a href="http://www.blogjava.net/BlueDavy/archive/2009/04/28/267970.html">网站架构相关PPT、文章整理（更新于2009-7-15）</a>，作者是放翁的同事。</p>

<p>感觉有好多东西需要学习，不过很喜欢这种感觉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由安装Windows 8.1谈起，Linux和Windows多系统的安装以及分区和启动项的管理]]></title>
    <link href="http://hustcalm.me/blog/2013/07/01/you-an-zhuang-windows-8-dot-1tan-qi-%2Clinuxhe-windowsduo-xi-tong-de-an-zhuang-yi-ji-fen-qu-he-qi-dong-xiang-de-guan-li/"/>
    <updated>2013-07-01T10:54:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/07/01/you-an-zhuang-windows-8-dot-1tan-qi-,linuxhe-windowsduo-xi-tong-de-an-zhuang-yi-ji-fen-qu-he-qi-dong-xiang-de-guan-li</id>
    <content type="html"><![CDATA[<p>想想自己的Windows XP从09年寒假买了联想的小Y之后就一直在用，期间换过不少次系统，短时间用过Windows 7,也曾经在自己硬盘上安装了Windows + 4个Linux，还包括一个不成功的尝试，在小Y上尝鲜Mac OS X。大四做机器人比赛，由于开发的需要一直不敢折腾自己的电脑（很多开发工具只在Windows XP上表现良好，尤其是一些驱动），读了研究生后，启动越来越慢的XP成了一块心病，无奈懒于折腾，也习惯了XP下的一些工具和操作，当然更不能舍弃Windows这个领好的PC游戏平台！极品和仙剑，到了Linux只能止步了。</p>

<p>不过5分钟的开机启动实在是忍无可忍了，恰巧最近几天，微软放出了Windows 8.1的预览版本（叫做Windows Blue，我猜想，微软内部发布Windows的相关人员可能也喜欢看海贼王，里面的All Blue是一片神奇的海域啊，看看Windows 8.1安装过程中的鱼，更让人浮想联翩了），在把自己的Ubuntu 11.04果断替换为Linux Mint 15 RC 之后，这次再把Windows XP替换为Windows 8.1预览版！</p>

<!--more-->


<p>借着这个机会，再次总结一下关于多系统共存的一些基本问题，更多是给读者一些核心概念，关于某些具体操作，Google会给出更好的答案！Let&rsquo;s Go！</p>

<h2>那些年我们用过的Windows XP</h2>

<p>说真的，XP绝对是一代经典，目前仍然有很大的装机量（我猜测的），即Windows 2000之后，她俨然创造了微软发布的操作系统的一个辉煌，在当时的视觉效果，广泛的软件支持，征服了很多Windows用户。09年寒假，我入手小Y的时候，预装的是Vista，拿到机器的第一件事，就是安装XP！那个时候，番茄花园，深度，雨林木风，ghost之类的在国内大火啊！</p>

<p>现在想想，之所以一直用XP，一是因为兼容性好，绝大多数的驱动支持，丰富的第三方软件，二是因为系统较轻量级，系统资源消耗少，比较适合我的小Y（2009年的Y430,奔腾双核T4200 + G9300的独显），下面简单说说我是怎么用XP的。</p>

<h3>桌面用fences</h3>

<p>最喜欢双击后，整个世界清净了。</p>

<h3>资源管理器用Total Commander</h3>

<p>无需多言，此等神器，应该推广到每一个平台（转到Linux Mint后，发现Linux稍微能用的是muCommander，KDE下的Krusader比较强大，不过在gnome下要安装一堆Qt的库）。Twin-Panel的操作，内置的压缩解压缩支持，FTP支持，文件查看，强大的文件复制，重命名，读者如果在Windows平台下，用上这个软件会爱不释手的说！</p>

<h3>快捷键方案用AutoHotkey + Win+R + Path</h3>

<h4>AutoHotkey</h4>

<p>用AutoHotkey定义一些应用程序的全局启动快捷键，可以用很短的时间进入到自己的“工作空间”，我的一些常用设置，Win+T打开Total Commander，Win+N打开Evernote，Win+V打开Vim，Win+F打开everything，Win+K打开酷我音乐盒，Win+Q打开QQ，读者可以自行发挥想象，用较小的学习成本提高自己的操作效率。</p>

<h4>Win+R</h4>

<p>神器！简约而不简单，常用的操作完全可以在这里搞定了。我常用control进入控制面板，devmgmt.msc进入设备管理器，diskmgmt.msc进入磁盘管理，msconfig进入自启动程序的管理，main.cpl快速调整鼠标的左右手习惯（对于左手鼠标的我这个操作很常用，尤其是偶尔让别人用自己的电脑的时候），%Temp%进入系统临时文件的文件夹，X:\快速进入某个分区（X是分区代号，比如C，D，E等等），command执行自定义的一些可执行程序（一些常用的绿色软件，可以添加到Path中，在Win+R中输入程序名称可以直接调用，比如我把Foxit Reader的可执行文件命名为foxit.exe）。关于Win+R的妙用，大家还可以去看看“善用佳软”上的一些文章，更加专业具体！</p>

<h4>Path</h4>

<p>这个主要是结合Win+R使用，把自己常用的一些绿色软件统一放到一个目录下，比如在非系统盘建一个system32的文件夹，然后添加到Path中，推荐大家把Sysinternals Suit里面的实用工具添加到自己的“工具箱”中，另外的一些贴心小软件也可以放进去，比如procexp，who locks me，depency walker等等。</p>

<h3>文件搜索用Everything</h3>

<p>全硬盘文件索引，支持通配符和正则查找，用用就知道！</p>

<h3>Terminal用Cygwin的MinTTY</h3>

<p>Cygwin和MinGW应该算两个东西，前者旨在提供一个Linux的模拟环境，提供大多数下Linux的实用工具（当然也包括编译器的支持了，gcc），而后者更多的是提供一套工具链，而提供的shell是其次（我个人的理解，不喜勿喷）。两者的最大区别是，Cygwin下用gcc编译的程序不是native可以在Windows下运行的，需要一些dll的支持（尤其是cygwin1.dll，这是整个API模拟层的实现吧，当然可以通过改变编译选项脱离对这些dll的依赖，而其本质是把需要用到的接口函数链接到自己的程序内部，从而增大了程序的体积），而MinGW本质上是cross compiling，编译出来的程序可以native地运行！把MinTTY全屏，很难区分出来你是在什么平台下！</p>

<h3>ssh客户端用Putty</h3>

<p>当然可以在Cygwin里面直接跑一个ssh（可以结合screen使用），不过Putty更符合Windows用户的flavor，不多说了，开个虚拟机，通过Putty ssh过去，就是一个实实在在的Terminal了，不过相比于Cygwin，资源消耗多些（虚拟机的开销）。</p>

<h3>虚拟机用VMware</h3>

<p>不推荐用VB（VirtualBox），不是黑这个产品，而是相比而言，VMware的体验确实更好（如果不喜欢盗版，那还是用VB吧）。</p>

<h3>浏览器用Firefox + Vimperator</h3>

<p>Life Change的插件Vimperator无疑把Firefox用户牢牢抓住（如果使用Vimperator的话），直接set gui=none，你告诉别人你正在使用Chrome Book也未尝不可，一个简单的b键可以把当前打开的标签一览无余，更多关于Vimperator的东东，可以参考我之前写的<a href="http://hustcalm.me/blog/2013/06/09/firefoxli-qi-vimperatorjian-ming-gong-lue/">Firefox利器Vimperator简明攻略</a>。</p>

<p>更加Geek一些的可以考虑用Pentadactyl（和Vimperator本是同源，后来核心开发者撤出后重启炉灶，打造了它，速度更快，可定制性更强）。</p>

<p>用Chrome的用户，稍微委屈下，用Vimium吧！</p>

<h3>邮件客户端用Foxmail或者Thunderbird</h3>

<p>感觉Foxmail比较耗内存，占CPU，但是使用起来比Thunderbird舒服（个人观点）。如果使用Thunderbird，Linux，Mac OS和Windows下都有，减少了熟悉成本。</p>

<h3>IRC客户端用Firefox的插件ChatZilla</h3>

<p>大赞这个插件，打开后的窗口犹如一个本地客户端，命令式的操作效率很高，支持绝大多数主流的IRC Server。</p>

<h3>看电影用KMPlayer</h3>

<p>绿色版的，Win+R输入kmplayer即可！</p>

<h3>听音乐用douban.fm</h3>

<p>这年头，各种青年都玩豆瓣吧。</p>

<h3>小结</h3>

<p>全屏的Firefox + 全屏的MinTTY + TotalCommander + Everything，XP下的效率很高的说！实在离不开Linux，那就开个虚拟机，只要配置跟的上，全屏后犹如本地系统！电脑配置一般的，关掉虚拟机中Linux的GUI，节省一些资源，如果嫌虚拟机窗口和真机之间切换太过麻烦，那就用Putty ssh过去！</p>

<p>简单点说，Windows XP也可以很好用，经过适当打造，也不误Linux的体验！</p>

<h2>关于多系统安装的核心词汇</h2>

<p>以下的关键词，应该是安装Linux和Windows多系统的时候出现频率比较高的，根据个人的理解，罗列如下：</p>

<p>分区管理，MBR，引导分区，启动项管理，Grub，Grub Legacy，Grub2，Grub4Dos，ntloader，BootManager，BCD，EasyBCD，Windows PE，SliTaz，Puppy Linux，系统维护盘，U 盘系统，光盘启动，ISO，刻录&hellip;</p>

<h2>系统安装实例</h2>

<p>多系统安装最麻烦的就是启动项的问题，主要是由于系统安装的先后次序造成的，根据我的经验，一般比较稳妥的安装方法是，低版本的Windows到高版本的Windows，再到Linux，举个例子，你可以先安装Windows XP，然后安装Windows 7,之后安装Ubuntu。另外一个需要注意的问题是分区问题，Windows下分区限制最多4个主分区，而引导分区必须是主分区，其它的可以是逻辑分区（这里不是特别确定了，如果有误，请留言指正）。</p>

<p>下面用两个实例，讲解一下多系统的安装，顺序分别是Windows->Linux，Linux->Windows。我的硬盘的分区情况如下：</p>

<p>一个主分区(Windows所在的分区） + 一个扩展分区(Windows下分了4个逻辑分区）+ 一个Linux根分区 + 一个Swap分区。</p>

<p>更具体点，
C盘 + D盘 + E盘 + F盘 + G盘 + Linux分区 + Swap分区。</p>

<h3>在存在Windows的情况下安装Linux（光盘，U盘，硬盘）</h3>

<p>核心在于引导，这里又分为两种情况：
*   已经存在一个Linux系统，开机即可进入Grub
*   系统只有Windows</p>

<p>有Linux的情况下，直接用Grub引导，如果只有Windows，用Grub4Dos。下载需要安装的Linux的ISO镜像文件，放到Windows一个分区下（推荐放到根目录，方便后续操作），之后在Grub中挂在loop设备，设定Linux kernel和initrd后即可boot到Live CD环境，之后卸载loop设备按照常规流程安装即可！</p>

<h4>只有Windows需要安装Ubuntu</h4>

<p>在Windows给Ubuntu腾出分区，之后可以选择用光盘安装（最方便的，直接光驱启动即可），U盘安装（和光盘类似，只是需要制作U盘启动盘，有专门的制作工具），硬盘安装（用Grub4Dos，具体方法可以Google下）。</p>

<h4>在Windows XP和Ubuntu并存的情况下安装Linux Mint</h4>

<p>有了Ubuntu，就相当于有了Grub，接下来只需要正确地挂在Linux Mint的ISO镜像文件，指定kernel和initrd即可，示例如下：</p>

<pre><code>insmod loopback
loopback loop (hd0,x)/linuxmint-15-cinnamon-dvd-32bi-rc.iso
linux (loop)/casper/vmlinuz boot=casper isoscan/filename=/linuxmint-15-cinnamon-dvd-32bit-rc.iso
initrd (loop)/casper/initrd.lz
boot
</code></pre>

<p>上面的（hd0,x）是下载的ISO文件所在的分区，可以通过磁盘管理查看自行推算出，并且把ISO文件放在了分区的根目录。</p>

<h3>在存在Linux的情况下安装Windows（光盘，U盘，硬盘）</h3>

<p>Grub是Linux的专利，理论上chainloader+1引导Windows完全可行，不过前提是有ntloader（如果有错，欢迎指正）。</p>

<h4>只有Ubuntu需要安装Windows</h4>

<p>操作类似，在Ubuntu下为Windows腾出分区，之后用光盘安装或者U盘（启动到Windows PE，虚拟光驱挂载ISO，然后setup.exe），理论上将Windows的ISO文件解压后把相应位置后也可以实现硬盘引导，我对此没有太多研究，不予讨论。</p>

<h4>在Windows XP和Linux Mint共存的情况下安装Windows 8.1</h4>

<p>这里比较棘手的问题，就是安装Windows后，MBR被重写，无法找到Linux的启动项了，这时需要修复Grub！</p>

<p>U盘启动到Windows PE（推荐大家使用天意系统维护盘），虚拟光驱加载Windows 8.1的ISO文件，然后双击setup.exe开始安装，format掉Windows XP所在的分区后一路Next。</p>

<p>Windows 8.1安装成功后，开始修复Grub！由于我用的Linux Mint使用Grub2，因此需要找到一个包含Grub 2的Live CD，我用Ubuntu 12.04进入到Live CD环境下，执行以下操作：</p>

<pre><code>sudo -i
fdisk -l
mkdir /media/rescuegrub
mount /dev/sdax /media/rescuegrub
grub-install --root-directory=/media/rescuegrub /dev/sda
reboot
</code></pre>

<p>其中/dev/sdax是Linux Mint所在的根分区，如果你单独分了boot分区，还需要挂载那个分区：</p>

<pre><code>mount /dev/sday /media/rescuegrub/boot
</code></pre>

<p>重启后进入到Linux Mint，执行：</p>

<pre><code>sudo update-grub2
sudo reboot
</code></pre>

<p>此时再重启，可能会出现error no file found的情况，但是可以正常进入系统，这是由于我使用的Ubuntu 12.04的Grub版本较低，再次进入到Linux Mint，执行：</p>

<pre><code>sudo grub-install /dev/sda
sudo reboot
</code></pre>

<p>问题解决！</p>

<p>除了修复Grub，也可以使用Windows的引导管理器来引导Linux，选择Grub4Dos或者EasyBCD均可！</p>

<h2>总结</h2>

<p>多系统的安装，重点是理解了多系统并存的基本概念，也就是分区和启动项的管理，可以折腾的东西有很多，大家可以根据个人喜好选择自己的方案！需要提醒大家的是，对分区要谨慎操作，数据无价！</p>

<p>全文完，写这篇文章更多是自己的一个小总结，如果对大家有所帮助就再好不过了，有问题随时可以讨论:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[也谈SNS OpenAPI接入-OAuth 2.0和Java SDK]]></title>
    <link href="http://hustcalm.me/blog/2013/06/23/ye-tan-sns-openapijie-ru-oauth-2-dot-0he-java-sdk/"/>
    <updated>2013-06-23T21:10:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/06/23/ye-tan-sns-openapijie-ru-oauth-2-dot-0he-java-sdk</id>
    <content type="html"><![CDATA[<p>由于一个项目的需求，开始接触开放平台的API，已完成客户端的用户接入。参考了一些OpenAPI的相关文章后，开始动手封装国内的几大主流开放平台的Java SDK，下面谈一谈我在封装过程中的体会，也算是对自己工作的一个小结。</p>

<h2>OpenAPI是啥</h2>

<p>简单来讲，就是在UCG之外，服务提供商为了增强自身服务的可用性，为了鼓励开发者开发站内或者第三方应用，提供的应用程序接口（可以联想下Restful）。按照历史顺序来看，facebook和twitter仍然是开山鼻祖，一领OpenAPI的先河，尤其是twitter的t4j在国内被发扬光大了（看看网易微博Java
SDK就清楚了）。再稍微具体点，就是在用户授权的情况下，第三方应用可以操作用户的数据，当然服务提供商会对应用请求有所限制（比如每小时的API请求次数等等）。用户的授权，使用OAuth协议完成，而用户数据的操作通过服务提供商提供的API搞定。</p>

<h2>OAuth是啥</h2>

<!--more-->


<p>一种“时髦”的授权机制和协议，目前是2.0版本，核心目的是第三方应用在不必知道用户的用户名和密码的情况下，可以给用户提供服务。在用户将要使用第三方应用的时候，应用会引导用户到服务提供商的授权页面，待完成用户授权后，第三方应用会拿到一个许可证（Access Token），凭借这个许可证访问用户数据，下面引用一张图片说明具体的授权过程：
<img src="http://www.sinaimg.cn/blog/developer/wiki/oAuth2_01.gif" alt="OAuth授权流程说明" /></p>

<h2>如何接入</h2>

<p>针对各大开发平台，其核心都是授权流程，由于大多都是基于OAuth的，所以大同小异。作为开发者，一般的接入流程是：
*   1. 申请应用，得到appKey和appSecret（也可能是appID及其它，本质都是应用的UIUD）
*   2. 下载开放平台的SDK测试，针对自己开放将要使用的API，最好做一个充分的测试，保证其能工作
*   3. 将SDK封装成简洁的调用接口，供自己的应用调用</p>

<h2>更多信息</h2>

<p>我在github上托管了一个项目<a href="https://github.com/hustcalm/SNS-Shim">SNS-Shim</a>，封装了新浪微博，QQ互联，人人网，豆瓣，网易微博的Java SDK，而且给出了各大开发平台以及OAuth的相关链接，大家可以参考讨论！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox利器Vimperator简明攻略]]></title>
    <link href="http://hustcalm.me/blog/2013/06/09/firefoxli-qi-vimperatorjian-ming-gong-lue/"/>
    <updated>2013-06-09T12:13:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/06/09/firefoxli-qi-vimperatorjian-ming-gong-lue</id>
    <content type="html"><![CDATA[<p>使用Vimperator也有那么一段时间了，着实再次发现CLI的强大和美好，关键是脱离鼠标后，浏览体验大大增强。正如大部分使用者只会使用一个软件大概20%的功能，我觉得我只是在使用Vimperator 10%的功能，不过这10%已经足以应对普通的需求。</p>

<p>正如Vimperator的原始开发者之一，后来另起炉灶开发了Pentadactyl所说，Vimperator更加注重易用性和效率，而Pentadactyl是专门为geek打造。本攻略适合入门级geek，因为Vimperator的学习曲线还是有那么一点陡的（至少得先对VIM比较熟悉）。然而，本文试图去繁就简，给出核心的一些操作，如果需要更加深入的指导，请参考Vimperator的帮助文件或者我托管在Github上的一个<a href="https://github.com/hustcalm/vimperator">Repository</a>。</p>

<h3>核心操作</h3>

<ul>
<li><code>o</code> Open new link in current tab</li>
<li><code>t</code> Open new link in new tab, also you can input keywords for search</li>
<li><code>Tab</code>  select the candinates recycly</li>
<li><code>f</code> Follow hint and open link in current tab, also very useful for locating user input forms</li>
<li><code>F</code> Follow hint and open link in new tab</li>
<li><code>gi</code> Locate the input form quickly</li>
<li><code>Ctrl + A</code>  Move cursor to the beginning of the line in insert mode</li>
<li><code>Ctrl + E</code>  Move cursor to the end of the line in insert mode</li>
<li><code>Ctrl + U</code>  Delete the characters before cursor in insert mode</li>
<li><code>Ctrl + K</code>  Delete the characters after cursor in insert mode</li>
<li><code>gt</code> Jump to right tab</li>
<li><code>gT</code> Jump to left tab</li>
<li><code>g0</code> Jump to first tab</li>
<li><code>g$</code> Jump to last tab</li>
<li><code>H</code>  Navigate back</li>
<li><code>L</code>  Navigate forward</li>
<li><code>d</code>  Close current tab</li>
<li><code>u</code>  Undo and reopen the lastest closed tab</li>
<li><code>/</code>  Search in current page</li>
<li><code>?</code>  Search in current page reversely</li>
<li><code>:</code>  Command mode</li>
<li><code>;c</code> Follow hint and open the right click menu(also called the contextual menu) for links</li>
</ul>


<h3>详细参考</h3>

<p>请参考<a href="https://github.com/hustcalm/vimperator">Vimperator On Github</a>.</p>

<p>有任何问题，欢迎留言讨论！如果觉得Vimperator不够极客，可以拿Pentadactyl玩玩:&ndash;)</p>
]]></content>
  </entry>
  
</feed>
