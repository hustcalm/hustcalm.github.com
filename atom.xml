<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to Pandora's Box]]></title>
  <link href="http://hustcalm.me/atom.xml" rel="self"/>
  <link href="http://hustcalm.me/"/>
  <updated>2014-07-27T20:35:38+08:00</updated>
  <id>http://hustcalm.me/</id>
  <author>
    <name><![CDATA[Lihang Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KGTP中增加对GDB命令“set Trace-buffer-size”的支持 - Week 3]]></title>
    <link href="http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-3/"/>
    <updated>2014-07-27T19:34:52+08:00</updated>
    <id>http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-3</id>
    <content type="html"><![CDATA[<h3>CSDN开源夏令营 &ndash; 第三周工作总结</h3>

<p>这一周主要实现了“set trace-buffer-size”实现的数据通信部分，即完成了GDB和KGTP的数据交互部分，下面简单分析一下实现。在说代码实现之前，还是简单地回顾一下，如何摸清KGTP的脉络。</p>

<h4>1. 如何跟踪KGTP</h4>

<p>我的平台是Fedora，步骤如下：</p>

<pre><code>make D=1
sudo insmod gtp.ko
sudo gdb /usr/lib/debug/lib/modules/3.14.8-200.fc20.x86_64/vmlinux -ex 'target remote /sys/kernel/debug/gtp'
</code></pre>

<!--more-->


<p>此时，进入了gdb的console，可以通过gdb的commands和KGTP通信了。观察KGTP的一个重要的手段则是看printk的信息，由于编译时使用了“make D=1”，因此对应KGTP的代码，比如：</p>

<pre><code> #ifdef GTP_DEBUG                                                                                            
     printk(GTP_DEBUG "gtp_gdbrsp_qtbuffer\n");                                                              
 #endif    
</code></pre>

<p>查看这些的方式则是使用“journalctl -k”，方便起见可以只查看末尾的部分信息，比如“journalctl -k -n 100”，在我的本地输出的部分信息如下：</p>

<pre><code>Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qAttached
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qOffsets
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: g
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: m0,1
Jul 27 06:07:29 localhost.localdomain kernel: gtp_gdbrsp_m: addr = 0x0 len = 1
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: m0,1
Jul 27 06:07:29 localhost.localdomain kernel: gtp_gdbrsp_m: addr = 0x0 len = 1
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qSymbol::
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qTStatus
Jul 27 06:07:29 localhost.localdomain kernel: gtp_gdbrsp_qT: Status
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
Jul 27 06:07:29 localhost.localdomain kernel: gtp_write: qTfP
Jul 27 06:07:29 localhost.localdomain kernel: gtp_gdbrsp_qT: fP
Jul 27 06:07:29 localhost.localdomain kernel: gtp_read
</code></pre>

<p>根据以上信息，可以顺藤摸瓜找到相应被调用的函数，从而屡清楚程序的执行逻辑，这对于理解KGTP的工作原理是非常有帮助的。关于journalctl[1]的使用，请自行“man journalctl”。在非systemd[2]的系统下，可能还需要通过“less /var/log/”这样的方式查看内核的输出，根据你使用的Linux随机应变即可。</p>

<h4>2. GDB和KGTP的通信实现</h4>

<p>利用GDBRSP[3]，即GDB Remote Serial Protocol，GDB远程串行通信协议。关于Remote Serial Protocol，可以参考[4]。简单来说，用于GDB远程调试发包，但是也支持File I/O和Console[5]，而KGTP正是利用了GDBRSP对于File I/O的支持，完成GDB和KGTP的通信，在接受到GDB发送的Packet后，KGTP进行解析。而通信的介质则是通过debugfs或者其他kernel space和user space进行数据交换的接口进行的。</p>

<p>具体的实现，参考gtp.c的函数 <code>gtp_init</code>，部分代码如下：</p>

<pre><code> gtp_dir = debugfs_create_file("gtp", S_IRUSR | S_IWUSR, NULL,
                   NULL, &amp;gtp_operations);
 if (gtp_dir == NULL || gtp_dir == ERR_PTR(-ENODEV)) {
     gtp_dir = NULL;
     goto out;
 }
 gtpframe_dir = debugfs_create_file("gtpframe", S_IRUSR, NULL,
                    NULL, &amp;gtpframe_operations);
 if (gtpframe_dir == NULL || gtpframe_dir == ERR_PTR(-ENODEV)) {
     gtpframe_dir = NULL;
     goto out;
 }
</code></pre>

<p>可以看到，使用DebugFS，建立了相应的文件节点，比如gtp，gtpframe，并且注册了相应的file operations，比如<code>gtp_oprations</code>，<code>gtpframe_operations</code>。</p>

<p>拿前者为例，声明的代码如下：</p>

<pre><code>static const struct file_operations gtp_operations = {
     .owner      = THIS_MODULE,
     .open       = gtp_open,
     .release    = gtp_release,
 #if (LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,6,35))
     .ioctl      = gtp_ioctl,
 #else
     .unlocked_ioctl = gtp_ioctl,
     .compat_ioctl   = gtp_ioctl,
 #endif
     .read       = gtp_read,
     .write      = gtp_write,
     .poll       = gtp_poll,
 };
</code></pre>

<p>而这其中最核心的则是<code>gtp_read</code>和<code>gtp_write</code>，其中<code>gtp_read</code>，用于GDB从KGTP读取数据（<strong>copy_to_user</strong>），gtp_write，则是KGTP从GDB接收数据（<strong>copy_from_user</strong>）。具体的代码，这里就不贴了，大家可以自行分析。</p>

<p>GDB和KGTP通过GDBRSP关联，通过执行<code>target remote /sys/kernel/debug/gtp</code>实现。</p>

<h4>3. 添加“set-trace-buffer-size”的通信支持</h4>

<p>有了以上的理论分析和准备，我们就可以着手实现“set trace-buffer-size”命令的解析了。首先，我们需要知道这个命令对应的GDBRSP的Query Packet以及KGTP利用哪个函数对其进行解析。通过[6]和[7]，我们得知如下信息：</p>

<pre><code>set circular-trace-buffer on
set circular-trace-buffer off
Choose whether a tracing run should use a linear or circular buffer for trace data. A linear buffer will not lose any trace data, but may fill up prematurely, while a circular buffer will discard old trace data, but it will have always room for the latest tracepoint hits.

show circular-trace-buffer
Show the current choice for the trace buffer. Note that this may not match the agent’s current buffer handling, nor is it guaranteed to match the setting that might have been in effect during a past run, for instance if you are looking at frames from a trace file.

set trace-buffer-size n
set trace-buffer-size unlimited
Request that the target use a trace buffer of n bytes. Not all targets will honor the request; they may have a compiled-in size for the trace buffer, or some other limitation. Set to a value of unlimited or -1 to let the target use whatever size it likes. This is also the default.

show trace-buffer-size
Show the current requested size for the trace buffer. Note that this will only match the actual size if the target supports size-setting, and was able to handle the requested size. For instance, if the target can only change buffer size between runs, this variable will not reflect the change until the next run starts. Use tstatus to get a report of the actual buffer size.


‘QTBuffer:circular:value’
This packet directs the target to use a circular trace buffer if value is 1, or a linear buffer if the value is 0.

‘QTBuffer:size:size’
This packet directs the target to make the trace buffer be of size size if possible. A value of -1 tells the target to use whatever size it prefers.
</code></pre>

<p>嗯，有线索了，GDB执行相应地指令，则会通过GDBRSP向KGTP发送相应的Query Packet，注意到“circular-trace-buffer”和“trace-buffer-size”的Packet的格式相同。关于GDB的General Query Packet，参考[8]。<strong>Packets starting with ‘q’ are general query packets; packets starting with ‘Q’ are general set packets. General query and set packets are a semi-unified form for retrieving and sending information to and from the stub.</strong></p>

<p>因此，参考“circular-trace-buffer”的实现是一个很好的突破口，所幸的是，KGTP已经实现了对其的支持。</p>

<h4>4. 添加“set trace-buffer-size”的具体实现</h4>

<p>根据以上分析，我们很快找到了两个关键函数，“gtp_gdbrsp_QT  ”和“gtp_gdbrsp_qtbuffer”。OK，添加对“set trace-buffer-size”的解析，代码如下：</p>

<pre><code>static int
gtp_gdbrsp_qtbuffer(char *pkg)
{
#ifdef GTP_DEBUG
    printk(GTP_DEBUG "gtp_gdbrsp_qtbuffer\n");
#endif

    // Handle QTBuffer:circular:value
    if (strncmp("circular:", pkg, 9) == 0) {
        ULONGEST setting;

        pkg += 9;
        if (pkg[0] == '\0')
            return -EINVAL;
        hex2ulongest(pkg, &amp;setting);

#ifdef GTP_FTRACE_RING_BUFFER
#if (LINUX_VERSION_CODE &gt; KERNEL_VERSION(2,6,38)) \
    || defined(GTP_SELF_RING_BUFFER)
        gtp_circular = (int)setting;
        if (gtp_frame)
            ring_buffer_change_overwrite(gtp_frame, (int)setting);
#else
        if (gtp_circular != (int)setting)
            gtp_circular_is_changed = 1;
#endif
#endif
        gtp_circular = (int)setting;

        return 0;
    }
    // Handle QTBuffer:size:size 
    else if (strncmp("size:", pkg, 5) == 0) {

        ULONGEST size;

        pkg += 5;

        if (pkg[0] == '\0')
            return -EINVAL;
        hex2ulongest(pkg, &amp;size);

        // Handle the new ringbuffer size blow

        return 0;
    }

    return 1;
}
</code></pre>

<p>重新编译，安装模块，然后在GDB中输入“set trace-buffer-size 100”，注意这里的100是十进制的，看下“journalctl -k”的输出，啥也没有。怎么回事，上面分析的不是挺美好的吗？经过几次尝试未果，把问题定位在了GDB对于Remote Packet的处理，不会是没有enable吧？</p>

<p>查看文档[9]，果然，应该使用<code>set remote set-buffer-size on</code>先使能，否则应该是直接被gdbrsp丢掉了。OK，使用<code>set trace-buffer-size 100</code>，输出：</p>

<pre><code>Jul 27 07:18:45 localhost.localdomain kernel: gtp_write: QTBuffer:size:64
Jul 27 07:18:45 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:64
Jul 27 07:18:45 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Jul 27 07:18:45 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Jul 27 07:18:45 localhost.localdomain kernel: gtp_read
</code></pre>

<p>而使用<code>set trace-buffer-size unlimited</code>，输出：</p>

<pre><code>Jul 27 07:19:53 localhost.localdomain kernel: gtp_write: QTBuffer:size:-1
Jul 27 07:19:53 localhost.localdomain kernel: gtp_gdbrsp_QT: Buffer:size:-1
Jul 27 07:19:53 localhost.localdomain kernel: gtp_gdbrsp_qtbuffer
Jul 27 07:19:53 localhost.localdomain kernel: gtp_gdbrsp_QT: return 0
Jul 27 07:19:53 localhost.localdomain kernel: gtp_read
</code></pre>

<p>OK，至此对于“set trace-buffer-size”的通信支持就完成了，接下来需要根据用户设置的size对trace buffer做出调整，接下来的文章会说到如何实现。</p>

<h4>5. 参考链接</h4>

<ul>
<li> [1] <a href="http://www.freedesktop.org/software/systemd/man/journalctl.html">http://www.freedesktop.org/software/systemd/man/journalctl.html</a></li>
<li> [2] <a href="https://wiki.archlinux.org/index.php/systemd">https://wiki.archlinux.org/index.php/systemd</a></li>
<li> [3] <a href="https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html">https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html</a></li>
<li> [4] <a href="http://blog.csdn.net/hmsiwtv/article/details/8759129">http://blog.csdn.net/hmsiwtv/article/details/8759129</a></li>
<li> [5] <a href="https://sourceware.org/gdb/onlinedocs/gdb/File_002dI_002fO-Remote-Protocol-Extension.html#File_002dI_002fO-Remote-Protocol-Extension">https://sourceware.org/gdb/onlinedocs/gdb/File_002dI_002fO-Remote-Protocol-Extension.html#File_002dI_002fO-Remote-Protocol-Extension</a></li>
<li> [6] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html</a></li>
<li> [7] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html</a></li>
<li> [8] <a href="https://www.sourceware.org/gdb/onlinedocs/gdb/General-Query-Packets.html#General-Query-Packets">https://www.sourceware.org/gdb/onlinedocs/gdb/General-Query-Packets.html#General-Query-Packets</a></li>
<li> [9] <a href="https://sourceware.org/gdb/onlinedocs/gdb/Remote-Configuration.html">https://sourceware.org/gdb/onlinedocs/gdb/Remote-Configuration.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGTP中增加对GDB命令“set Trace-buffer-size”的支持 - Week 2]]></title>
    <link href="http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-2/"/>
    <updated>2014-07-27T19:34:48+08:00</updated>
    <id>http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-2</id>
    <content type="html"><![CDATA[<h3>CSDN开源夏令营 &ndash; 第二周工作总结</h3>

<p>这一周在上一周对整体框架的认识和理解之上，开始全面地阅读KGTP的源代码，理解了梗概，很多细节需要再仔细研读，主要参考是其代码仓库：[1]。</p>

<h4>1. KGTP的核心代码文件</h4>

<p>毫无疑问，KGTP最精髓的代码都在gtp.c文件中，约13500行代码，这其中包括了与GDB的通信，具体Query Packets的处理，Trace Points的注册和删除，事件的触发，硬件断点的设置和处理，等几乎所有的KGTP核心事务。在短短1万多行代码中，体现了几乎所有Linux Kernel开发过程中会用到的features，SMP的支持，Linux的list实现，锁和同步，工作队列，tasklet，硬件和软件中断，等等。</p>

<!--more-->


<p>其它辅助文件则有：</p>

<ul>
<li> <code>gtp_rb.c</code>      KGTP自己实现的一套Ring Buffer（默认使用）</li>
<li> <code>perf_event.c</code>  Perf的核心实现，里面也实现Ring Buffer</li>
<li> <code>ring_buffer.c</code> Linux内核为Trace的infrastructure提供的统一的Ring Buffer实现（比如Ftrace）</li>
</ul>


<h4>2. KGTP核心功能实现的源码分析</h4>

<p>按照数据通信流程，<strong>GDB ——>   GDBRSP ——> SYSFS ——> KGTP ——> Kernel</strong>，简单分析如下：</p>

<p><code>GDBRSP</code>是Remote Serial Protocol，用于GDB远程调试发包，但是也支持File I/O和Console，而KGTP正是利用了GDBRSP对于File I/O的支持，完成GDB和KGTP的通信，在接受到GDB发送的Packet后，KGTP进行解析。而通信的介质则是通过debugfs或者其他kernel space和user space进行数据交换的接口进行（参考[2]）。</p>

<p>KGTP接收到了GDB的指令后，基于Kprobes和Uprobes进行内核和用户应用程序的trace，step和watch可以基于hardware-breakpoints实现。</p>

<p>KGTP自己维护了一个ring buffer的，用于Trace Frame的存储，查询及dump。</p>

<h5>（1）KGTP和GDB的通信</h5>

<p>核心函数：</p>

<ul>
<li> <code>gtp_init</code>    建立对应的ProcFS或者DebugFS文件结点</li>
</ul>


<p>以下函数利用GDBRSP完成GDB和KGTP基于packet的通信：</p>

<ul>
<li> <code>gtp_open</code></li>
<li> <code>gtp_release</code></li>
<li> <code>gtp_ioctl</code></li>
<li> <code>gtp_write</code></li>
<li> <code>gtp_read</code></li>
<li> <code>gtp_poll</code></li>
</ul>


<h5>（2）KGTP对GDB数据包的处理</h5>

<p><code>gtp_gdbrsp_*</code> 系列函数完成了对GDB数据包的解析和处理。</p>

<p>比如：</p>

<ul>
<li> <code>gtp_gdbrsp_QT</code>        处理QT的packet</li>
<li> <code>gtp_gdbrsp_qtstart</code>   Start Trace Experiments，注册kprobe，uprobe以及watchpoints，hardware breakpoints等，并分配存储空间</li>
<li> <code>gtp_qdbrsp_qtstop</code>    Stop Trace Experiments，flush work queue，tasklet_kill，以及unregister在qtstart注册的所有probe points和一些回调函数</li>
</ul>


<p>参考的话，就是GDB的官方手册了，比如：</p>

<p>GDB的<a href="https://www.sourceware.org/gdb/onlinedocs/gdb/General-Query-Packets.html">Query Packet</a>.
Packets starting with ‘q’ are general query packets; packets starting with ‘Q’ are general set packets. General query and set packets are a semi-unified form for retrieving and sending information to and from the stub.</p>

<h5>（3）Tracepoints和Breakpoints的注册和删除</h5>

<ul>
<li> <code>gtp_uprobe_register</code></li>
<li> <code>gtp_register_hwb</code></li>
<li> <code>gtp_unregister_hwb</code></li>
</ul>


<h5>（4）TSV的处理</h5>

<p><code>gtp_var_*</code></p>

<p>可以重点看一下<code>gtp_var_special_add_all</code>。</p>

<h5>（5）Ring Buffer的处理</h5>

<p>这里后续再详细分析，Ring Buffer的实现也是KGTP的核心之一。</p>

<h4>3. 阅读源码小技巧&amp;问题总结</h4>

<p>参考<code>LXR</code>[3]，直接使用<code>Identifier Search</code>[4]，遇到不明白的宏定义，函数定义，都可以直接到Linux源码中一探究竟。</p>

<p>以下是我阅读代码过程遇到的一些问题总结：</p>

<p>（1）EXPORT_SYMBOL</p>

<p><a href="http://stackoverflow.com/questions/9836467/whats-meaning-of-export-symbol-in-linux-kernel-code">http://stackoverflow.com/questions/9836467/whats-meaning-of-export-symbol-in-linux-kernel-code</a></p>

<p><a href="http://www.linux.com/learn/linux-training/31161-the-kernel-newbie-corner-kernel-symbols-whats-available-to-your-module-what-isnt">http://www.linux.com/learn/linux-training/31161-the-kernel-newbie-corner-kernel-symbols-whats-available-to-your-module-what-isnt</a></p>

<p>（2）container_of</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/kernel.h#L833">http://lxr.free-electrons.com/source/include/linux/kernel.h#L833</a></p>

<pre><code>/**
827  * container_of - cast a member of a structure out to the containing structure
828  * @ptr:        the pointer to the member.
829  * @type:       the type of the container struct this is embedded in.
830  * @member:     the name of the member within the struct.
831  *
832  */
833 #definecontainer_of(ptr,type, member) ({                      \
834         const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);    \
835         (type *)( (char *)__mptr - offsetof(type,member) );})
</code></pre>

<p>（3）kzalloc</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/slab.h#L649">http://lxr.free-electrons.com/source/include/linux/slab.h#L649</a></p>

<p>（4）kmalloc</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/slab.h#L452">http://lxr.free-electrons.com/source/include/linux/slab.h#L452</a></p>

<p>（5）list</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/list.h">http://lxr.free-electrons.com/source/include/linux/list.h</a></p>

<p>（6）INIT_WORK</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/workqueue.h">http://lxr.free-electrons.com/source/include/linux/workqueue.h</a></p>

<p>（7）vfree</p>

<p><a href="http://lxr.free-electrons.com/source/mm/vmalloc.c#L1490">http://lxr.free-electrons.com/source/mm/vmalloc.c#L1490</a></p>

<p>（8）preempt_disable</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/preempt.h#L38">http://lxr.free-electrons.com/source/include/linux/preempt.h#L38</a></p>

<p>（9）barrier</p>

<p><a href="https://www.kernel.org/doc/Documentation/memory-barriers.txt">https://www.kernel.org/doc/Documentation/memory-barriers.txt</a></p>

<p>（10）local_irq_save</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/irqflags.h#L93">http://lxr.free-electrons.com/source/include/linux/irqflags.h#L93</a></p>

<p>（11）notifier_block</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/notifier.h#L53">http://lxr.free-electrons.com/source/include/linux/notifier.h#L53</a></p>

<p>（12）flush_workqueue</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/workqueue.c#L2641">http://lxr.free-electrons.com/source/kernel/workqueue.c#L2641</a></p>

<p>（13）tasklet_kill</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/softirq.c#L566">http://lxr.free-electrons.com/source/kernel/softirq.c#L566</a></p>

<p>（14）unregister_wide_hw_breakpoint</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/events/hw_breakpoint.c#L536">http://lxr.free-electrons.com/source/kernel/events/hw_breakpoint.c#L536</a></p>

<p>（15）unregister_kprobe</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/kprobes.c#L1668">http://lxr.free-electrons.com/source/kernel/kprobes.c#L1668</a></p>

<p>（16）wake_up_interruptible_nr</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/sched/wait.c#L88">http://lxr.free-electrons.com/source/kernel/sched/wait.c#L88</a></p>

<p>（17）queue_work</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/sched/wait.c#L88">http://lxr.free-electrons.com/source/kernel/sched/wait.c#L88</a></p>

<p>（18）rcu_read_lock</p>

<p><a href="http://lxr.free-electrons.com/source/include/linux/rcupdate.h#L798">http://lxr.free-electrons.com/source/include/linux/rcupdate.h#L798</a></p>

<p>（19）tasklet_init</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/softirq.c#L555">http://lxr.free-electrons.com/source/kernel/softirq.c#L555</a></p>

<p>（20）IPI</p>

<p><a href="http://en.wikipedia.org/wiki/Inter-processor_interrupt">http://en.wikipedia.org/wiki/Inter-processor_interrupt</a></p>

<p>（21）register_die_notifier</p>

<p><a href="http://lxr.free-electrons.com/source/kernel/notifier.c#L544">http://lxr.free-electrons.com/source/kernel/notifier.c#L544</a></p>

<p>（22）EBUSY</p>

<p><a href="http://lxr.free-electrons.com/source/include/uapi/asm-generic/errno-base.h#L19">http://lxr.free-electrons.com/source/include/uapi/asm-generic/errno-base.h#L19</a></p>

<h4>4. KGTP的调试&amp;源码注释</h4>

<p>编译KGTP的时候添加D=1，便以debug的方式编译，在Fedora下可以通过journalctl -k查看其输出，其中-k是指过滤Kernel信息。其它系统下可能是在/var/log之类的文件查看，总之KGTP通过内核接口printfk输出，视具体的系统不同，查看内核信息的方式也会有变化。</p>

<p>关于有注释的代码，请看[5]。</p>

<h4>5. 参考链接</h4>

<ul>
<li> [1] <a href="https://github.com/teawater/kgtp">https://github.com/teawater/kgtp</a></li>
<li> [2] <a href="http://people.ee.ethz.ch/~arkeller/linux/multi/kernel_user_space_howto.html#toc1">http://people.ee.ethz.ch/~arkeller/linux/multi/kernel_user_space_howto.html#toc1</a></li>
<li> [3] <a href="http://lxr.free-electrons.com">http://lxr.free-electrons.com</a></li>
<li> [4] <a href="http://lxr.free-electrons.com/ident">http://lxr.free-electrons.com/ident</a></li>
<li> [5] <a href="https://code.csdn.net/Calmdownba/kgtp/tree/comments-from-scratch">https://code.csdn.net/Calmdownba/kgtp/tree/comments-from-scratch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGTP中增加对GDB命令“set Trace-buffer-size”的支持 - Week 1]]></title>
    <link href="http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-1/"/>
    <updated>2014-07-27T19:34:45+08:00</updated>
    <id>http://hustcalm.me/blog/2014/07/27/kgtpzhong-zeng-jia-dui-gdbming-ling-set-trace-buffer-size-de-zhi-chi-week-1</id>
    <content type="html"><![CDATA[<h3>CSDN开源夏令营 &ndash; 第一周工作总结</h3>

<p>这一周主要对KGTP的实现进行了简单的熟悉和分析，主要参考的资料在：[1]。</p>

<h4>1.什么是KGTP</h4>

<p>T大把KGTP称为Linux内核中的GDB快刀，其全称是Linux kernel GDB tracepoint module，是一个灵活轻量级实时的Linux调试器和跟踪器。</p>

<p>Linux的tracer infrastructure五花八门，包括Ftrace，Utrace等，建议大家参考一下这篇paper，【Ptrace, Utrace, Uprobes: Lightweight, Dynamic Tracing of User Apps】，下载链接在：[2]。Tracer在收集信息的时候不停止Linux内核，但是不能被GDB控制。</p>

<!--more-->


<p>而在调试Linux内核的时候，我们也有很多选择，比如KDB，KGDB等，Debugger将停止Linux内核，但是可以被GDB控制。</p>

<p>那么KGTP做了什么事情呢？Yes，作为Tracer和Debugger的一个桥梁，从而做到不停止Linux内核，且可以被本地或者远程的GDB控制。</p>

<p>目前，KGTP支持X86-32，X86-64，MIPS和ARM，支持Linux内核2.6.18到upstream，直接Android（因为Android底层仍然是Linux Kernel）。</p>

<h4>2. KGTP的实现</h4>

<p>KGTP的大部分trace功能基于Kprobe，而用户态应用程序的trace功能则依赖Uprobe，对于使用Kprobe的情况，使用Kprobes-optimization还可提高Kprobe的速度。</p>

<p>作为Debugger和Tracer之间的桥梁，KGTP通过GDB的RSP协议与GDB通信，完成数据的交换和用户命令的解析，具体的信息可以看GDB的文档，比如：<a href="https://www.sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html">GDB Remote-Protocol</a>。KGTP内核态和用户态的数据交换，通过DebugFS或者ProcFS暴露给用户态的GDB。在接收到相关的GDB命令数据包后，完成相关的解析工作，设置对应的Tracepoint，在用户开始trace后（tstart），开始在Ring Buffer采集数据，结束后（tstop）可以供用户查看（tfind）。</p>

<p>KGTP作为一个内核module存在，只需要编译KGTP后insmod，而不需要重新编译内核，因此非常灵活，当不需要KGTP的时候，直接rmmod即可。</p>

<p>KGTP的数据分析主要使用GDB，因此代码中不需要很多数据分析的部分，核心源代码文件gtp.c，仅有13000行左右。</p>

<p>总结起来，KGTP是一个灵活且轻量级的实现，可以实时地对Linux进行跟踪和调试，这对于线上服务器的问题处理是非常有用的。</p>

<h4>3. KGTP的hack需要具备哪些知识</h4>

<p>C语言功底+一定的Linux内核开发基础，具体的点总结如下：</p>

<ul>
<li> （1）Linux内核的同步机制（锁，信号量等）</li>
<li> （2）字符驱动程序的实现原理，主要是GDB和KGTP的通信需要用到</li>
<li> （3）Linux内核module的编写，因此KGTP是以一个module的形式存在的</li>
<li> （4）Linux内核的tasklet和workqueue，KGTP的后台进程是一个守护进程gtpd</li>
<li> （5）Ring buffer的实现，Linux内核trace的RB的实现以及KGTP自身RB的实现</li>
<li> （6）Linux tracer的实现原理，因为KGTP是基于Kprobe和Uprobe实现的</li>
<li> （7）GDB的基本原理，尤其是GDBRSP</li>
</ul>


<h4>4. 如何增加对GDB命令“set trace-buffer-size”的支持</h4>

<ul>
<li> （1）实现命令包的解析，参考[3][4]</li>
<li> （2）实现Ring Buffer数据的拷贝和其他处理（主要针对新分配缓冲区小于原有缓冲区的情况）</li>
</ul>


<h4>5. 如何部署KGTP</h4>

<p>强烈建议采用“一键安装”的方式，KGTP提供了部署脚本[kgtp.py]，十分方便。</p>

<p>Kernel需要相应地debug info，因此如果是自己编译内核，则需要：</p>

<pre><code>General setup —&gt;
[*] Kprobes
[*] Enable loadable module support —&gt;
Kernel hacking —&gt;
[*] Debug Filesystem
[*] Compile the kernel with debug info
</code></pre>

<p>如果是Distro，需要安装Linux内核调试镜像和Linux内核源码包和开发包。</p>

<p>只有这样，Kernel才能被GDB加载调试。</p>

<p>以Fedora为例，当完成了以上步骤后，直接</p>

<pre><code>sudo gdb /usr/lib/debug/lib/modules/3.14.8-200.fc20.x86_64/vmlinux -ex 'target remote /sys/kernel/debug/gtp'
</code></pre>

<p>根据使用内核版本的不同，加载的kernel image路径会有稍许区别，比如上面的<code>3.14.8-200.fc20.x86_64</code>。</p>

<p>至此，部署完毕。</p>

<h4>6. 如何使用KGTP</h4>

<p>请参考KGTP的使用手册，具体链接见：[5]和[6]。</p>

<h4>7. 参考链接</h4>

<ul>
<li> [1] <a href="http://teawater.github.io/kgtp/index.html">http://teawater.github.io/kgtp/index.html</a></li>
<li> [2] <a href="http://kernel.org/doc/ols/2007/ols2007v1-pages-215-224.pdf">http://kernel.org/doc/ols/2007/ols2007v1-pages-215-224.pdf</a></li>
<li> [3] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Starting-and-Stopping-Trace-Experiments.html</a></li>
<li> [4] <a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html">https://sourceware.org/gdb/current/onlinedocs/gdb/Tracepoint-Packets.html</a></li>
<li> [5] <a href="http://teawater.github.io/kgtp/kgtp.html">http://teawater.github.io/kgtp/kgtp.html</a></li>
<li> [6] <a href="http://teawater.github.io/kgtp/kgtpcn.html">http://teawater.github.io/kgtp/kgtpcn.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Raspberry Pi Robotic Projects - From a Technical Perspective]]></title>
    <link href="http://hustcalm.me/blog/2014/06/21/review-of-raspberry-pi-robotic-projects-from-a-technical-perspective/"/>
    <updated>2014-06-21T19:15:15+08:00</updated>
    <id>http://hustcalm.me/blog/2014/06/21/review-of-raspberry-pi-robotic-projects-from-a-technical-perspective</id>
    <content type="html"><![CDATA[<p>After being the reviewer for the <a href="http://hustcalm.me/blog/2014/02/10/review-of-beaglebone-robotic-projects-from-a-technical-perspective/">BeagleBone Robotic Projects</a>, I&rsquo;m honored to be the reviewer for another book about robotic projects named <a href="http://bit.ly/1hrlCQP">Raspberry Pi Robotic Projects</a>. I will go no further to talk about the differences about <code>BeagleBone</code> and <code>Raspberry Pi</code>, all I know is that they are both cool and amazing. To start to play with <code>Raspberry Pi</code>, I suggest that you
can list the book <a href="http://bit.ly/1hrlCQP">Raspberry Pi Robotics Projects</a> as an option.</p>

<p>In this post, I will give you a very quick overview of the book and tell why it&rsquo;s worth it.</p>

<!--more-->


<h4>Getting Started with Raspberry Pi</h4>

<p>Have no idea what is really <code>Raspberry Pi</code>? Well, just treat it as your <code>Mini Computer</code>. The truth is, it got almost everything what a PC should be equipped with. What&rsquo;s more, it runs Linux which means you can do tons of things with it!</p>

<p>Yes, yes, <code>Raspberry Pi</code> is leading the <code>open hardware community</code> somehow, people design, manufacture, develop and play. Geeks use it for their geek life!</p>

<p>In <strong>chapter 1</strong>, you will be informed the hardware and software of <code>Raspberry Pi</code> and begin to be friends with her.</p>

<h4>Programming Raspberry Pi</h4>

<p>As you want to make <code>Raspberry Pi</code> do something really amazing, you should know how to talk to her. Well, you program to talk. So in <strong>chapter 2</strong>, we will show you how to get comfortable with the way <code>talking(programming)</code>. Besides to knowing <code>Linux</code>, use <code>Python</code> and <code>C/C++</code> is cool:&ndash;)</p>

<h4>Providing Speech Input and Output</h4>

<p>What? You want to talk to her, really. I mean by <code>speaking</code>. Well, that should not be problem. Let&rsquo;s give our robot <code>ears</code> and <code>mouth</code>. <strong>Chapter 3</strong> will show you how to use <code>PocketSphinx</code> to accept your voice commands and utilize <code>Espeak</code> to make <code>Raspberry Pi</code> talk in a robot voice.</p>

<h4>Adding Vision to Raspberry Pi</h4>

<p>How can a beautiful girl be blind! So to make <code>Rasberry Pi</code> see the amazing world, <strong>chapter 4</strong> will tell you how to connect the USB cemara to <code>Raspberry Pi</code> and begin to use <code>OpenCV</code>, which is a fully featured vision library to detect colored objects.</p>

<h4>Creating Mobile Robots on Wheels</h4>

<p>Let&rsquo;s roll! To see the beatiful world around, we need to make our robot able to move. <strong>Chapter 5</strong> will show you how to add motor controller to <code>Raspberry Pi</code> and let her run at free will.</p>

<h4>Making the Unit Very Mobile &ndash; Controlling the Movement of a Robot with Legs</h4>

<p>A girl should really walk, doesn&rsquo;t it? No problem, <strong>chapter 6</strong> tells how to get started with <code>servos</code> and make your mobile platform truly mobile just as a person.</p>

<h4>Avoiding Obstacles Using Sensors</h4>

<p>Oh, there is a wall in front, danger! Don&rsquo;t worry, our <code>Raspberry Pi</code> knows everything and will avoid it easily. <strong>Chapter 7</strong> shows how to use an <code>infrared sensor</code> and <code>USB sonar sensor</code> with <code>Raspberry Pi</code>, also how to use a <code>servo</code> to move a single sensor to make our sening range large enough.</p>

<h4>Going Truly Mobile &ndash; The Remote Control of Your Robot</h4>

<p>You will not always be around with your <code>Raspberry Pi</code>, right? To make sure your <code>Pi</code> is always with you, <strong>Chapter 8</strong> demonstrates how to connect wireless devices to <code>Pi</code> thus enabling us to talk to her remotely. Use a <code>wireless USB keyboard</code>, or <code>a wireless LAN</code> or <code>a ZigBee device</code>, choose as you like.</p>

<h4>Using a GPS Receiver to Locate Your Robot</h4>

<p>No one wants to be told that his <code>Raspberry Pi</code> is lost. Fortunately, we got <code>GPS</code> nowadays for almost free. Connecting <code>Raspberry Pi</code> to a <code>GPS</code> device and accessing the <code>GPS</code> programmatically is mainly covered in <strong>chapter 9</strong>.</p>

<h4>System Dynamics</h4>

<p>Get tired with so much coding for each dedicated task? <strong>Chaper 10</strong> will free you from hell by creating a general control structure. Also you can enable complex functionalities by using the structure of the <code>Robot Operating System</code>.</p>

<h4>By Land, Sea, and Air</h4>

<p>Maybe you don&rsquo;t just want a <code>Raspbery Pi</code>, you really want is a <code>Quadrotor</code>, or a <code>submarine</code> or a <code>mini ship</code>! Nothing is impossible, <strong>Chapter 11</strong> will be a good starting point to creat something really amazing.</p>

<p>I hope that you like <code>Raspberry Pi</code> and the book will do some good. Happy playing and hakcing with <code>Raspberry Pi</code>!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Socket Anyway?]]></title>
    <link href="http://hustcalm.me/blog/2014/04/17/what-is-socket-anyway/"/>
    <updated>2014-04-17T21:05:06+08:00</updated>
    <id>http://hustcalm.me/blog/2014/04/17/what-is-socket-anyway</id>
    <content type="html"><![CDATA[<p>I bet you&rsquo;ve heard of <code>socket</code> for a while, but do you really know what is a <code>socket</code>?</p>

<p>This post is a quick getting-started for figuring out the basic concepts of socket and hopefully enpowers you to begin writing simple network programming snippets. It aims to bootstrap your understanding to socket and network programming and serves as a good starting point to truth. From definition to practice and deep into research, let&rsquo;s start the venture!</p>

<!--more-->


<h2>The definition</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Berkeley_sockets">Berkeley sockets</a></li>
</ul>


<p>Let history and standards tell everything.</p>

<h2>Unix or Internet</h2>

<ul>
<li><a href="http://lists.freebsd.org/pipermail/freebsd-performance/2005-February/001143.html">unix domain sockets vs. internet sockets</a></li>
</ul>


<p>See what the freebsd gurus say.</p>

<h2>Unix socket deeper</h2>

<ul>
<li><a href="http://www.thomasstover.com/uds.html">Demystifying Unix Domain Sockets</a></li>
</ul>


<p>Code tells the truth.</p>

<h2>Network Programming Go</h2>

<ul>
<li><a href="http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html">Beej&rsquo;s Guide to Network Programming Using Internet Sockets</a></li>
</ul>


<p>Practices make best.</p>

<h2>What&rsquo;s Next</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/176409/how-to-build-a-simple-http-server-in-c">How to Build a simple HTTP server in C</a></li>
</ul>


<p>Wonder how to implement a HTTP server, like <code>Apache</code> or <code>Nginx</code>, you&rsquo;d better implement a simple, stupid but your own one.</p>

<ul>
<li><a href="http://www.kegel.com/c10k.html">The C10K problem</a></li>
</ul>


<p>Well, this is really where it hurts. Catch up with the paper, conquer it or give up early!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build PTAM on Fedora 20 the Easy Way - 10 Minutes Tutorial]]></title>
    <link href="http://hustcalm.me/blog/2014/04/17/build-ptam-on-fedora-20-the-easy-way-10-minutes-tutorial/"/>
    <updated>2014-04-17T19:21:41+08:00</updated>
    <id>http://hustcalm.me/blog/2014/04/17/build-ptam-on-fedora-20-the-easy-way-10-minutes-tutorial</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since the last post <a href="http://hustcalm.me/blog/2013/09/27/ptam-compilation-on-linux-howto/">PTAM Compilation on Linux-HowTo</a> about playing with PTAM. And now Isis Innovation has released the source code under GPLv3 and put it on <a href="https://github.com/Oxford-PTAM/PTAM-GPL">Github</a>.</p>

<p>Last time, we demostrate detailed instructions on how to get PTAM running on Debian derived systems(Linux Mint 15 and Ubuntu 12.04), now I want talk about building the source code on Fedora 20. It won&rsquo;t be long, since I just want to talk about the key components, thus the mandatory dependencies(<strong>TooN, libCVD, Gvars3, OpenGL, libjpeg, libpng, libtiff</strong>, etc).</p>

<!--more-->


<p>As the PTAM source code use the GNU autoconf tools, so the typical way to install is <code>./configure &amp;&amp; make &amp;&amp; sudo make install</code>, however, to make sure that certain third libs are correctly configured and can found when running <code>configure</code>, you may want to have a look at the output after <code>configure</code> and install any key dependency which is missed.</p>

<p>Whenever you are not sure, see the <strong>Official Website</strong> for sure!!!</p>

<h2>Install Dependencies</h2>

<h3>TooN</h3>

<p><a href="http://www.edwardrosten.com/cvd/toon.html">TooN</a> is a numerics library used by libCVD. Since they are just a bundle of header files, installation is trivial.</p>

<pre><code>sudo yum install liblapack-devel
sudo yum install libblas-devel

./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>

<h3>libCVD</h3>

<p><a href="http://www.edwardrosten.com/cvd/">libCVD</a> is a very portable and high performance C++ library for computer vision, image, and video processing.</p>

<p>This is the key component for building PTAM, thus should be careful. Make sure you installed OpenGL correctly, also for the video source, if you are using a UVC webcam, check if <code>v4l2</code> is working. Or if you are using a IEEE1394 camera, get libxx1394 series libs installed which can drive your camera. For Image I/O, always have libjpeg, libpng and libtiff.</p>

<p>See the output after running <code>configure</code> and ensure all the options related are OK.</p>

<pre><code>sudo yum install freeglut-devel

./configure

make

sudo make install
</code></pre>

<h3>GVars3</h3>

<p><a href="http://www.edwardrosten.com/cvd/gvars3.html">GVars3</a> is a configuration library which integrates well with TooN. Not much to worry when buiding.</p>

<pre><code>./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>

<h2>Build PTAM</h2>

<h3>Run ldconfig</h3>

<p>The libs built above may reside in <code>/usr/local/lib</code> when using the default directorys in their Makefiles, to make the system aware of the newly installed libs.</p>

<pre><code>sudo vi /etc/ld.so.conf
add /usr/local/lib to the file
sudo ldconfig
</code></pre>

<h3>Prepare for Makefile</h3>

<pre><code>cd the_PTAM_Directory
cp Build/Linux/* .
vi Makefile
add -lGLU -lGL -llapack to the linker commands
</code></pre>

<h3>Fix usleep declaration</h3>

<pre><code>vi Tracker.cc
add #include &lt;unistd.h&gt; to the first line
</code></pre>

<h3>Build</h3>

<pre><code>make
</code></pre>

<p>If nothing wrong, you are done!</p>

<h2>Run PTAM</h2>

<p>Simply invoke <code>CameraCalibrator</code> to calibrate your camera. Then invoke <code>PTAM</code> for real fun.</p>

<p>If you use UVC webcam using <code>v4l2</code>, you may want to install:</p>

<pre><code>sudo yum install v4l-utils
</code></pre>

<p>Use <code>v4l2-ctl</code> to play with your camera.</p>

<h2>Trouble Shooting</h2>

<p>As the orinigal <a href="http://www.robots.ox.ac.uk/~gk/PTAM/README.txt">README.txt</a> says, PTAM works well with Nvidia display card, I got <code>Segmentation Fault as soon as ... got video source</code> as I&rsquo;m using a display card shipped with an Intel motherboard.</p>

<p>However, I think the root cause is that the display card driver does not know how to handle the color space coming from the webcam, so I&rsquo;m planning to deep into the mechanism and try to find out why. <a href="http://ewokrampage.wordpress.com/troubleshooting-faq/">George Klein</a> says that a nvidia display card and driver combo works fine after all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Look Inside Mongoose - an Easy to Use Web Server Implementation]]></title>
    <link href="http://hustcalm.me/blog/2014/04/09/look-inside-mongoose-an-easy-to-use-web-server-implementation/"/>
    <updated>2014-04-09T20:22:54+08:00</updated>
    <id>http://hustcalm.me/blog/2014/04/09/look-inside-mongoose-an-easy-to-use-web-server-implementation</id>
    <content type="html"><![CDATA[<p>I come across with Network Programming recently and find it really charming. Afer reading the book &ldquo;Advanced Linux Programming&rdquo;, I&rsquo;m more curious about how to implement a basic http server or web server.</p>

<p>The source code of chapter 11 of &ldquo;ALP&rdquo; does tell the key idea, thus communicating through sockets between client and server, for HTTP compliance, just implement the HTTP protocal(<a href="https://tools.ietf.org/html/rfc2616">RFC
2616</a>). To know the things better, I&rsquo;d like to know how to implement a core and basic HTTP server. You may know &lsquo;Apache&rsquo;, &lsquo;NginX&rsquo; and &lsquo;Lighttpd&rsquo; for a while, and they do lead the main tread. Basically, they are heavy enough to begin to know a basic HTTP server implementation.</p>

<!--more-->


<p>After googling around, I find <a href="http://stackoverflow.com/questions/176409/how-to-build-a-simple-http-server-in-c">this link on stackoverflow</a> is valuable and a good starting point to follow. From there, I decide to dig into <a href="https://code.google.com/p/mongoose/">mongoose</a>. To walk through what mongoose does and provides, I will present some comments of core source code.</p>

<h2>Be aware of the Protocal Stack</h2>

<p>Many people get confused by <code>HTTP</code>, <code>FTP</code>, <code>TCP/IP</code>, <code>SMTP</code>, etc. To get all these stuff clear of your head, do please spend several miniutes to learn the <code>Internet communication model</code>, like the <code>OSI 7-layer model</code> or the <code>TCP/IP 4-layer model</code>.</p>

<p>Once you know the <code>phsical</code>, <code>data-link</code>, <code>network</code>, <code>transportation</code>, <code>application</code> what&rsquo;s all about, trust me, you will find all the confused words gone:&ndash;)</p>

<h2>HTTP Basics</h2>

<p>A web server, basicly implements the <code>HTTP</code> protocol to define how <code>the client interacts with the server</code>, thus enabling the communication of varies of devices. But aware that <code>HTTP</code> is an application protocol, built upon <code>TCP/IP</code> which handles the real transportation of data, in the perspective of programming, that is <code>Socket</code>.</p>

<p>Give the references a shot:</p>

<ul>
<li><a href="http://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html">HTTP(HyperText Transfer Protocol) Basics</a></li>
<li><a href="http://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177">HTTP: The Protocol Every Web Developer Must Know</a></li>
<li><a href="http://www.jmarshall.com/easy/http/">HTTP Made Really Easy</a></li>
<li><a href="http://www.slideshare.net/sanjoysanyal/http-basics">HTTP basics &ndash; slideshare</a></li>
</ul>


<h2>Socket Basics</h2>

<p>In a word, <code>socket</code> is the <code>API</code> of <code>TCP/IP</code> provided to programmers.
See my blog <a href="http://hustcalm.me/blog/2014/04/17/what-is-socket-anyway/">What Is Socket Anyway?</a>.</p>

<h2>Cross Platform development concerns</h2>

<p>Wow, <code>Mongoose</code> works on Windows, Mac, UNIX/Linux, iPhone, Android eCos, QNX and many other platforms, what an amazing software!</p>

<p>Well, the basic idea behind <code>cross platform development</code> is to abstract another layer to adapt to the different implementations to the same task on different <code>OS and platforms</code>, my personal understanding, sorry:&ndash;)</p>

<p>When you see the source code of <code>Mongoose</code>, be prepared to come across with lots of <code>#ifdef</code> and <code>#ifndef</code>, etc. Things got really complicated when dealing with <code>cross platform development</code>, there are even specifed books and literatures talking about it.</p>

<p>OK I&rsquo;m also newbie to this, so please <code>RTFSC</code>.</p>

<h2>HTTP features kept in mind</h2>

<p>As an <code>embedded</code> web server, <code>Mongoose</code> needs not to implement everything, just the core functionalities, however really powerful enough. Like <code>CGI, SSI, SSL, Digest auth, Websocket, WEbDAV, Resumed download, URL rewrite, file blacklist, Custom error pages, Virtual hosts, IP-based ACL, Windows service</code>, even <code>Lua Server Pages</code>.</p>

<p>As <code>HTTP</code> is an application protocol, so every feature is really related to the description in the <code>RFC</code>s along with many more extensions like <a href="http://datatracker.ietf.org/doc/rfc2818/">HTTPS &ndash; HTTP over TLS</a>.</p>

<p>Though many heavy web servers like <code>Apache</code> or <code>Nginx</code> does not implement everything of <code>HTTP</code>, so <code>keep it simple and work</code>.</p>

<h2>The programming paradigm</h2>

<p>There is not any <code>class</code> defined in <code>Mongoose</code>, though it can be compiled using <code>C++</code>, so the source code is <code>pure C</code> actually. The underlying dirty work will be handled by <a href="https://github.com/cesanta/net_skeleton">net_skeleton</a>, like the <code>management of socket connections</code> and <code>sending and receiving data packets</code>.</p>

<p>To be clear, <code>object</code> is implemented through the use of <code>struct</code>, like <code>mg_server</code>, <code>mg_connection</code>. Get a good knowledge of <code>C programming language</code> before you decide to dig into <code>Mongoose</code>, period.</p>

<h2>I/O Models to know</h2>

<p><code>Blocking I/O</code> or <code>Asynchronous I/O</code>?</p>

<p>See the following references for good:</p>

<ul>
<li><a href="http://www.madwizard.org/programming/tutorials/netcpp/5">NetworkingCPP &ndash; I/O Models</a></li>
<li><a href="http://www.kegel.com/c10k.html">The C10K problem</a></li>
<li><a href="http://www.ibm.com/developerworks/linux/library/l-async/">Boost application performance using asynchronous I/O</a></li>
</ul>


<p><code>Mongoose</code> is using the traditional <code>select()</code>, serving many clients with each thread, and using nonblocking I/O as illustrated in the function <code>ns_server_poll</code> implemented in <code>net_skeleton</code>.</p>

<h2>The core of Mongoose</h2>

<p>Let the journey begin!</p>

<h3>Net Skeleton</h3>

<p>Quote from <a href="https://github.com/cesanta/net_skeleton">here</a>:</p>

<blockquote><p>Net Skeleton is a networking library written in C. It provides easy to use event-driven interface that allows to implement network protocols or scalable network applications with little effort. Net Skeleton releives developers from the burden of network programming complexity and let them concentrate on the logic. Net Skeleton saves time and money.</p></blockquote>

<figure class='code'><figcaption><span>Core interfaces provided by net_skeleton</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">ns_server_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_server_poll</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">milli</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_server_wakeup</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_server_wakeup_ex</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="n">ns_callback_t</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_iterate</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="n">ns_callback_t</span> <span class="n">cb</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">param</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="nf">ns_add_sock</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="n">sock_t</span> <span class="n">sock</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_bind</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_set_ssl_cert</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ssl_cert</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_set_ssl_ca_cert</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ssl_ca_cert</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="nf">ns_connect</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">host</span><span class="p">,</span>
</span><span class='line'>                                 <span class="kt">int</span> <span class="n">port</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ssl</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">connection_param</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_send</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_printf</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_vprintf</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="kt">va_list</span> <span class="n">ap</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Utility functions</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">ns_start_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">f</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_socketpair</span><span class="p">(</span><span class="n">sock_t</span> <span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_socketpair2</span><span class="p">(</span><span class="n">sock_t</span> <span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="kt">int</span> <span class="n">sock_type</span><span class="p">);</span>  <span class="c1">// SOCK_STREAM or SOCK_DGRAM</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_set_close_on_exec</span><span class="p">(</span><span class="n">sock_t</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">ns_sock_to_str</span><span class="p">(</span><span class="n">sock_t</span> <span class="n">sock</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_hexdump</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dst_len</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Core data structures used in net_skeleton</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">ns_server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">server_data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sock_t</span> <span class="n">listening_sock</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="n">active_connections</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ns_callback_t</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SSL_CTX</span> <span class="o">*</span><span class="n">ssl_ctx</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SSL_CTX</span> <span class="o">*</span><span class="n">client_ssl_ctx</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sock_t</span> <span class="n">ctl</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">ns_connection</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="n">prev</span><span class="p">,</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="n">server</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sock_t</span> <span class="n">sock</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="n">socket_address</span> <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">iobuf</span> <span class="n">recv_iobuf</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">iobuf</span> <span class="n">send_iobuf</span><span class="p">;</span>
</span><span class='line'>  <span class="n">SSL</span> <span class="o">*</span><span class="n">ssl</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">connection_data</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">time_t</span> <span class="n">last_io_time</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define NSF_FINISHED_SENDING_DATA   (1 &lt;&lt; 0)</span>
</span><span class='line'><span class="cp">#define NSF_BUFFER_BUT_DONT_SEND    (1 &lt;&lt; 1)</span>
</span><span class='line'><span class="cp">#define NSF_SSL_HANDSHAKE_DONE      (1 &lt;&lt; 2)</span>
</span><span class='line'><span class="cp">#define NSF_CONNECTING              (1 &lt;&lt; 3)</span>
</span><span class='line'><span class="cp">#define NSF_CLOSE_IMMEDIATELY       (1 &lt;&lt; 4)</span>
</span><span class='line'><span class="cp">#define NSF_ACCEPTED                (1 &lt;&lt; 5)</span>
</span><span class='line'><span class="cp">#define NSF_WANT_READ               (1 &lt;&lt; 6)</span>
</span><span class='line'><span class="cp">#define NSF_WANT_WRITE              (1 &lt;&lt; 7)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define NSF_USER_1                  (1 &lt;&lt; 26)</span>
</span><span class='line'><span class="cp">#define NSF_USER_2                  (1 &lt;&lt; 27)</span>
</span><span class='line'><span class="cp">#define NSF_USER_3                  (1 &lt;&lt; 28)</span>
</span><span class='line'><span class="cp">#define NSF_USER_4                  (1 &lt;&lt; 29)</span>
</span><span class='line'><span class="cp">#define NSF_USER_5                  (1 &lt;&lt; 30)</span>
</span><span class='line'><span class="cp">#define NSF_USER_6                  (1 &lt;&lt; 31)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Data structures and interfaces for I/O used for sending and receiving data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">iobuf</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">iobuf_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">iobuf</span> <span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">initial_size</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">iobuf_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">iobuf</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">size_t</span> <span class="nf">iobuf_append</span><span class="p">(</span><span class="k">struct</span> <span class="n">iobuf</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">data_size</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">iobuf_remove</span><span class="p">(</span><span class="k">struct</span> <span class="n">iobuf</span> <span class="o">*</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">data_size</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Event handling in net_skeleton</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Net skeleton interface</span>
</span><span class='line'><span class="c1">// Events. Meaning of event parameter (evp) is given in the comment.</span>
</span><span class='line'><span class="k">enum</span> <span class="n">ns_event</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NS_POLL</span><span class="p">,</span>     <span class="c1">// Sent to each connection on each call to ns_server_poll()</span>
</span><span class='line'>  <span class="n">NS_ACCEPT</span><span class="p">,</span>   <span class="c1">// New connection accept()-ed. union socket_address *remote_addr</span>
</span><span class='line'>  <span class="n">NS_CONNECT</span><span class="p">,</span>  <span class="c1">// connect() succeeded or failed. int *success_status</span>
</span><span class='line'>  <span class="n">NS_RECV</span><span class="p">,</span>     <span class="c1">// Data has benn received. int *num_bytes</span>
</span><span class='line'>  <span class="n">NS_SEND</span><span class="p">,</span>     <span class="c1">// Data has been written to a socket. int *num_bytes</span>
</span><span class='line'>  <span class="n">NS_CLOSE</span>     <span class="c1">// Connection is closed. NULL</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Callback function (event handler) prototype, must be defined by user.</span>
</span><span class='line'><span class="c1">// Net skeleton will call event handler, passing events defined above.</span>
</span><span class='line'><span class="k">struct</span> <span class="n">ns_connection</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">ns_callback_t</span><span class="p">)(</span><span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">enum</span> <span class="n">ns_event</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">evp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Besides the interfaces provieded, there are lots of <code>private</code> functions to make everything possible, these are all implemented in <code>net_skeleton.c</code> as <code>static</code> functions.</p>

<h3>Mongoose</h3>

<p>Well, here finally comes the main character! As the dirty work has been done by <code>net_skeleton</code>, <code>mongoose</code> can focus on the real job.</p>

<figure class='code'><figcaption><span>Core interfaces of mongoose</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Server management functions</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="nf">mg_create_server</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">server_param</span><span class="p">,</span> <span class="n">mg_handler_t</span> <span class="n">handler</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_destroy_server</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">**</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">mg_set_option</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">opt</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_poll_server</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">milliseconds</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="nf">mg_get_valid_option_names</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">mg_get_option</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="n">server</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_set_listening_socket</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">sock</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_get_listening_socket</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_iterate_over_connections</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="n">mg_handler_t</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_wakeup_server</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="nf">mg_connect</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Connection management functions</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_send_status</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">status_code</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_send_header</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_send_data</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data_len</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_printf_data</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_websocket_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="n">opcode</span><span class="p">,</span>
</span><span class='line'>                       <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">data_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Deprecated in favor of mg_send_* interface</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_printf</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="n">conn</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...);</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">mg_get_header</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="nf">mg_get_mime_type</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">default_mime_type</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_get_var</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="n">conn</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">var_name</span><span class="p">,</span>
</span><span class='line'>               <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">buf_len</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_parse_header</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">hdr</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">var_name</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_parse_multipart</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">buf_len</span><span class="p">,</span>
</span><span class='line'>                       <span class="kt">char</span> <span class="o">*</span><span class="n">var_name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">var_name_len</span><span class="p">,</span>
</span><span class='line'>                       <span class="kt">char</span> <span class="o">*</span><span class="n">file_name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">file_name_len</span><span class="p">,</span>
</span><span class='line'>                       <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">data_len</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Utility functions</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="nf">mg_start_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">),</span> <span class="kt">void</span> <span class="o">*</span><span class="n">param</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="nf">mg_md5</span><span class="p">(</span><span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">33</span><span class="p">],</span> <span class="p">...);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mg_authorize_digest</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_expansion</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">keyword</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">handler</span><span class="p">)(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">mg_template</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>                 <span class="k">struct</span> <span class="n">mg_expansion</span> <span class="o">*</span><span class="n">expansions</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Core data structures</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// This structure contains information about HTTP request.</span>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_connection</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">request_method</span><span class="p">;</span> <span class="c1">// &quot;GET&quot;, &quot;POST&quot;, etc</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">uri</span><span class="p">;</span>            <span class="c1">// URL-decoded URI</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">http_version</span><span class="p">;</span>   <span class="c1">// E.g. &quot;1.0&quot;, &quot;1.1&quot;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">query_string</span><span class="p">;</span>   <span class="c1">// URL part after &#39;?&#39;, not including &#39;?&#39;, or NULL</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="n">remote_ip</span><span class="p">[</span><span class="mi">48</span><span class="p">];</span>         <span class="c1">// Max IPv6 string length is 45 characters</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">local_ip</span><span class="p">[</span><span class="mi">48</span><span class="p">];</span>          <span class="c1">// Local IP address</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">remote_port</span><span class="p">;</span> <span class="c1">// Client&#39;s port</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">local_port</span><span class="p">;</span>  <span class="c1">// Local port number</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num_headers</span><span class="p">;</span>            <span class="c1">// Number of HTTP headers</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">mg_header</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>         <span class="c1">// HTTP header name</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>        <span class="c1">// HTTP header value</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">http_headers</span><span class="p">[</span><span class="mi">30</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">content</span><span class="p">;</span>              <span class="c1">// POST (or websocket message) data, or NULL</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">content_len</span><span class="p">;</span>         <span class="c1">// Data length</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">is_websocket</span><span class="p">;</span>           <span class="c1">// Connection is a websocket connection</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">status_code</span><span class="p">;</span>            <span class="c1">// HTTP status code for HTTP error handler</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">wsbits</span><span class="p">;</span>                 <span class="c1">// First byte of the websocket frame</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">server_param</span><span class="p">;</span>         <span class="c1">// Parameter passed to mg_add_uri_handler()</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">connection_param</span><span class="p">;</span>     <span class="c1">// Placeholder for connection-specific data</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">callback_param</span><span class="p">;</span>       <span class="c1">// Needed by mg_iterate_over_connections()</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">mg_server</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_server</span> <span class="n">ns_server</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="n">socket_address</span> <span class="n">lsa</span><span class="p">;</span>   <span class="c1">// Listening socket address</span>
</span><span class='line'>  <span class="n">mg_handler_t</span> <span class="n">event_handler</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">config_options</span><span class="p">[</span><span class="n">NUM_OPTIONS</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Local endpoint representation</span>
</span><span class='line'><span class="k">union</span> <span class="n">endpoint</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>                     <span class="c1">// Opened regular local file</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="n">nc</span><span class="p">;</span>   <span class="c1">// CGI or proxy-&gt;target connection</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Event handling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">enum</span> <span class="n">mg_event</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">MG_POLL</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>  <span class="c1">// Callback return value is ignored</span>
</span><span class='line'>  <span class="n">MG_CONNECT</span><span class="p">,</span>     <span class="c1">// If callback returns MG_FALSE, connect fails</span>
</span><span class='line'>  <span class="n">MG_AUTH</span><span class="p">,</span>        <span class="c1">// If callback returns MG_FALSE, authentication fails</span>
</span><span class='line'>  <span class="n">MG_REQUEST</span><span class="p">,</span>     <span class="c1">// If callback returns MG_FALSE, Mongoose continues with req</span>
</span><span class='line'>  <span class="n">MG_REPLY</span><span class="p">,</span>       <span class="c1">// If callback returns MG_FALSE, Mongoose closes connection</span>
</span><span class='line'>  <span class="n">MG_CLOSE</span><span class="p">,</span>       <span class="c1">// Connection is closed, callback return value is ignored</span>
</span><span class='line'>  <span class="n">MG_LUA</span><span class="p">,</span>         <span class="c1">// Called before LSP page invoked</span>
</span><span class='line'>  <span class="n">MG_HTTP_ERROR</span>   <span class="c1">// If callback returns MG_FALSE, Mongoose continues with err</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">mg_handler_t</span><span class="p">)(</span><span class="k">struct</span> <span class="n">mg_connection</span> <span class="o">*</span><span class="p">,</span> <span class="k">enum</span> <span class="n">mg_event</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Find something? Yes, <code>mongoose</code> is heavily using the underlying <code>net_skeleton</code>, as <code>ns_server</code> in <code>mg_server</code> suggests.</p>

<p>Or look at this:</p>

<figure class='code'><figcaption><span>Mongoose is just a wrapper for application built upon net_skeleton?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">mg_poll_server</span><span class="p">(</span><span class="k">struct</span> <span class="n">mg_server</span> <span class="o">*</span><span class="n">server</span><span class="p">,</span> <span class="kt">int</span> <span class="n">milliseconds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">ns_server_poll</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ns_server</span><span class="p">,</span> <span class="n">milliseconds</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To be really aware of what is heppening under the hood, the functions below is the key:</p>

<figure class='code'><figcaption><span>The key functions to implement the basic web server</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">ns_add_to_set</span><span class="p">(</span><span class="n">sock_t</span> <span class="n">sock</span><span class="p">,</span> <span class="n">fd_set</span> <span class="o">*</span><span class="n">set</span><span class="p">,</span> <span class="n">sock_t</span> <span class="o">*</span><span class="n">max_fd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">sock</span> <span class="o">!=</span> <span class="n">INVALID_SOCKET</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">FD_SET</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span> <span class="n">set</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">max_fd</span> <span class="o">==</span> <span class="n">INVALID_SOCKET</span> <span class="o">||</span> <span class="n">sock</span> <span class="o">&gt;</span> <span class="o">*</span><span class="n">max_fd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="o">*</span><span class="n">max_fd</span> <span class="o">=</span> <span class="n">sock</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">ns_server_poll</span><span class="p">(</span><span class="k">struct</span> <span class="n">ns_server</span> <span class="o">*</span><span class="n">server</span><span class="p">,</span> <span class="kt">int</span> <span class="n">milli</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">ns_connection</span> <span class="o">*</span><span class="n">conn</span><span class="p">,</span> <span class="o">*</span><span class="n">tmp_conn</span><span class="p">;</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tv</span><span class="p">;</span>
</span><span class='line'>   <span class="n">fd_set</span> <span class="n">read_set</span><span class="p">,</span> <span class="n">write_set</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">num_active_connections</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>   <span class="n">sock_t</span> <span class="n">max_fd</span> <span class="o">=</span> <span class="n">INVALID_SOCKET</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">time_t</span> <span class="n">current_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">listening_sock</span> <span class="o">==</span> <span class="n">INVALID_SOCKET</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>       <span class="n">server</span><span class="o">-&gt;</span><span class="n">active_connections</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">read_set</span><span class="p">);</span>
</span><span class='line'>   <span class="n">FD_ZERO</span><span class="p">(</span><span class="o">&amp;</span><span class="n">write_set</span><span class="p">);</span>
</span><span class='line'>   <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">listening_sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>   <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">conn</span> <span class="o">=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">active_connections</span><span class="p">;</span> <span class="n">conn</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">tmp_conn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">tmp_conn</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>     <span class="n">ns_call</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">NS_POLL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">current_time</span><span class="p">);</span>
</span><span class='line'>     <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_CONNECTING</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">write_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">send_iobuf</span><span class="p">.</span><span class="n">len</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_BUFFER_BUT_DONT_SEND</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">ns_add_to_set</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">write_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">max_fd</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_CLOSE_IMMEDIATELY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">ns_close_conn</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">tv</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">milli</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="n">tv</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">=</span> <span class="p">(</span><span class="n">milli</span> <span class="o">%</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">select</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">max_fd</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">write_set</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="c1">// Accept new connections</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">listening_sock</span> <span class="o">!=</span> <span class="n">INVALID_SOCKET</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>     <span class="n">FD_ISSET</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">listening_sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// We&#39;re not looping here, and accepting just one connection at</span>
</span><span class='line'>   <span class="c1">// a time. The reason is that eCos does not respect non-blocking</span>
</span><span class='line'>   <span class="c1">// flag on a listening socket and hangs in a loop.</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">((</span><span class="n">conn</span> <span class="o">=</span> <span class="n">accept_conn</span><span class="p">(</span><span class="n">server</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">conn</span><span class="o">-&gt;</span><span class="n">last_io_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// Read possible wakeup calls</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">INVALID_SOCKET</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>     <span class="n">FD_ISSET</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'>   <span class="n">recv</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>   <span class="n">send</span><span class="p">(</span><span class="n">server</span><span class="o">-&gt;</span><span class="n">ctl</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">conn</span> <span class="o">=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">active_connections</span><span class="p">;</span> <span class="n">conn</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">tmp_conn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">tmp_conn</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">FD_ISSET</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">read_set</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">conn</span><span class="o">-&gt;</span><span class="n">last_io_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>
</span><span class='line'>         <span class="n">ns_read_from_socket</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">FD_ISSET</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">sock</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">write_set</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_CONNECTING</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">ns_read_from_socket</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_BUFFER_BUT_DONT_SEND</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">conn</span><span class="o">-&gt;</span><span class="n">last_io_time</span> <span class="o">=</span> <span class="n">current_time</span><span class="p">;</span>
</span><span class='line'>           <span class="n">ns_write_to_socket</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">for</span> <span class="p">(</span><span class="n">conn</span> <span class="o">=</span> <span class="n">server</span><span class="o">-&gt;</span><span class="n">active_connections</span><span class="p">;</span> <span class="n">conn</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">tmp_conn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">tmp_conn</span> <span class="o">=</span> <span class="n">conn</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>     <span class="n">num_active_connections</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">conn</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">NSF_CLOSE_IMMEDIATELY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="n">ns_close_conn</span><span class="p">(</span><span class="n">conn</span><span class="p">);</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="c1">//DBG((&quot;%d active connections&quot;, num_active_connections));</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">num_active_connections</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Feel something? Go dig yourself for much more fun:&ndash;)</p>

<h2>Good References</h2>

<ul>
<li><a href="http://tinyhttpd.sourceforge.net/">tinyhttpd</a></li>
<li><a href="http://www.ibm.com/developerworks/systems/library/es-nweb/#icomments">nweb: a tiny, safe Web server (static pages only)</a></li>
<li><a href="https://users.cs.jmu.edu/bernstdh/web/common/lectures/slides_http-server-example_java.php">Design and Implementation of an HTTP Server in Java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我对IT书籍阅读的一点感悟]]></title>
    <link href="http://hustcalm.me/blog/2014/03/04/wo-dui-itshu-ji-yue-du-de-yi-dian-gan-wu/"/>
    <updated>2014-03-04T09:54:25+08:00</updated>
    <id>http://hustcalm.me/blog/2014/03/04/wo-dui-itshu-ji-yue-du-de-yi-dian-gan-wu</id>
    <content type="html"><![CDATA[<p>最近读书比较多，想着尽快把自己的短板补一补，读的过程中有点自己的感悟，发现IT书籍也是口味各异，都能跟文学书籍类比一下了，在此扯淡几句，图个乐子。</p>

<p>要是说文学书籍，大家可能会想到“散文”，“议论文”，“记叙文”，“诗歌”，“回忆录”之类的。而说到IT书籍，诸如编程语言，操作系统，嵌入式，Web开发框架，设计模式，面向对象等等之类的书可能会立马涌上心头。当下电子书给传统的纸质书造成了很大的冲击，在这种情况下，更要合理地调整自己的阅读习惯。在琳琅满目的书籍面前，每个人都面临选择，该购买哪本书，如何在有限的时间内吸收书中的精华，达到自己的阅读目的？下面就我自己的阅读经历分析一下以上问题。</p>

<!--more-->


<hr />

<h3>充分调研再选书，优先经典，适合自己</h3>

<p>现在的出版行业已经发达到“是个人都能出书”的地步了。所以在对某一类的书或者某本特别的书产生阅读欲望的时候，一定先要仔细评估一下，经过评估后才会买到对自己来说有价值的书，避免“被作者误导”。在学习方面，如果你不确定，我还是建议向“权威”学习，尤其是在计算机行业，同样是讲C++的书，我会毫不犹豫地优先选择“C++之父”的著作，他发明了C++，相比而言当然更有资格讲解并传授给他人。</p>

<p>既然说是IT书籍了，那就从技术书籍入手。举个例子，你想入门C语言了，怎么办？本科的时候，大家都知道“谭浩强”了，但是那本书很大程度上是被选择的，而不是我们自愿的。现在大家都有了独立思考的能力，自然会去Google搜索一下“C语言入门书籍”，看一些高质量的帖子，再问问身边一些C语言水平还可以的同学或者同事，基本上就可以甄别出什么才是“真正的C语言入门书籍”或者“C语言学习书籍”。基本上大家应该都比较推崇C语言三驾马车，即《C和指针》，《C陷阱和缺陷》，《C专家编程》。而这三本书又风格各异，虽然都是讲C语言的，但是就入门来说，《C和指针》当属首选，它讲解比较系统，循序渐进，初学者容易接受；而《C专家编程》正如书名所说，比较适合进阶学习；而对于《C陷阱和缺陷》，我个人感觉比较适合查漏补缺。</p>

<p>以上提到的三本书应该都是“C语言学习”领域还算经典的书，而最经典的莫过于“C语言之父”的《The C
Programming》，为啥不推荐这个小手册呢？虽说要靠近经典，但是也要因地制宜，“C语言”本身的核心是其编译器，而“C语言之父”的经典书籍是对语言本身的规范说明，类似产品说明书，我想给编译器开发者看比较合适，而对于试图学习如何使用这门语言的新手显然不是特别合适（当然也有例外，计算机背景特别强，编程天赋良好的人也许看看这本书就足够了）。</p>

<p>计算机本身是美国的专利，因此很多书籍开始都是“英文书籍”，社会发展到如今，主流的计算机书籍已经都有了“中译本”，那么读原版还是译本？这要看个人，英文功底允许的话，强烈推荐看原版，很多专业词汇在原著中表达地更加自然，有助于对技术本身的理解；英文跟不太上的话，看中译本也无妨，但是要提前做好思维上的准备，不要被译者的一些主观理解误导了（这种情况肯定存在，但好在不是很多）。</p>

<p>好了，我们定下了选择书籍的基调，如果有的选，就要“经典”的，甚至说“正统”的，耐心阅读，基本上可以把某一个领域的技术涵盖完全；一定要避免读了好几本烂书，没学到知识反而被误导了不少，就本科的C语言学习来说，这种情况是存在着的。尽量读英文原版，尽管不想承认，IT技术是被美国支配的，习惯阅读英文资料可以在一定程度上减少信息传播的延迟。</p>

<p>有了这个基调之后，我们还要选择“适合自己”的书籍，这在《Essential C++》的作者序言中也得到了有力的支撑，作者试图找一本能够“快速入门”Perl的小书，并强调存在这么一本小书是多么地必要。总的来讲，我觉得“适合自己”的书需要符合你的“阅读目的”。如果是想深入研究，那么买一本透彻讲解的书再好不过，比如《C++
Primer》；而为了快速上手，解决实际问题，那么一本小小的“handbook”可能就是你要找的；假如不太想偏技术，喜欢看看哲学讨论，那么看看“ESR”的书还是不错的。</p>

<p>选择正是你的品味的体现，相信随着阅读量的增大，你的阅读品味也会随之提高，并且更加适合自己。</p>

<p>时间是宝贵的，不要把它浪费在“一本烂书”上。</p>

<hr />

<h3>正确的阅读方法会事半功倍</h3>

<p>我们已经选好了书，是不是已经迫不及待地想开始阅读旅程？很多时候，我们不是缺书，我们是没有找到“正确且适合自己的”阅读方法。</p>

<p>有些人喜欢一口气图个痛快，有些人喜欢按部就班一天读一小段，而有些人直捣黄龙，找自己最关心的那一部分细细品味。是不是有点读文学书籍的意思了？就像文章开头说的，IT书籍也是风格各异，不同的书适合不同的读法，同时阅读方法需要紧密地和你的“阅读目的”联系起来。通读也好，略读也罢，只求书中之精华能为我所用，达到融会贯通之境界。</p>

<p>IT书籍大体可分为“工具入门类”，“理论原理类”，“实战经验总结类”，“技术文集类”，“面试备战类”等等。先说一些“散文”类的，比如Paul
Graham的《黑客与画家》，此类书是其多年的文章荟萃而成，因此非常适合跳读，找到自己感兴趣的略读；对于“工具入门”，比如语言入门，软件使用入门，最好按部就班，一步一个脚印地踏实学习，才能修成正果；而对于“实战”类，实际操作才是王道；“理论原理”则需要仔细琢磨，慢慢推敲，理解其原理后需要能够举一反三，解决实际问题；而“面试”类书籍，在我看来尽可以当成快餐书籍，短时间内研读。</p>

<p>在这里举个例子吧，比如你要学习Linux，想找一些参考书籍，比如《Running Linux》，《Linux In a Nutshell》，《The Linux Command Line》，《Advanced Linux Programming》之类的。那么这四本书的阅读方法一定是不同的，拿《Running
Linux》来说，它全书分为四个部分，包括“Linux使用”，“系统管理”，“Linux编程”和“Linux服务器”。阅读的时候选自己想读的部分即可，即当成“参考书”。而后面两本更甚，《Linux In a Nutshell》就像是一个Linux的“字典”或者“百科全书”，《The Linux Command Line》相对精简，但也重“参考”。相反，《ALP》则专注开发，适合系统地学习。</p>

<p>说到这里，再补充一下“书籍选择”的问题吧，更多的是在“电子书籍”和“纸质书籍”之间的折中。我个人觉得“电子书”一定是未来的大方向，符合现代生活节奏和生活理念。我个人的策略是，对于工具类和参考类的书籍，尽量用电子版，一来参考起来十分方便，在文件中搜索即可，二来不费钱也不占地方（目前来看，很多IT书籍存在不用出纸质版的必要的嫌疑，它们的出版很可能是由于工业惯性）。而对于经典的原理类书籍，需要仔细推敲，则买回来纸质版仔细研读是最合适不过的了。
而对于任何一本书，我比较推荐从大体上先有一个宏观的认识，即浏览一下书籍的目录结构，掌握书籍的脉络和行文风格，看看是否符合自己的学习习惯，如果不符合，大可以自己调整看的顺序，对于《程序员的自我修养》这本书，我个人的阅读顺序为4，1，2，3。前言我也是非常推荐大家看的，从这里面可以比较准确地把握作者在书中试图表达什么以及其成书的目的。每每阅读书的前言，我都会觉得很有意思，比如正在阅读的《松本行弘的程序世界》一书，就能切身感受到作者的幽默。</p>

<p>读书自然是抱着自己的目的的，时刻不要忘记了，你阅读是为了什么，带着问题去阅读，去思考，取其精华。单纯地享受阅读的乐趣，我也是不反对的，有时我就是这样的吧。</p>

<hr />

<h3>善于总结，让知识沉淀</h3>

<p>选了书，读了书，不能就这么算了。你的时间投入需要得到应有的回报，而阅读一本书最好的回报无异于“知识转化，为我所用”。大多数情况下，由人类的记忆特性决定的，阅读过程中的一些体会和醍醐灌顶，冷却一段时间后便又无影无踪。因此，阅读之后是一定要写点什么的，最好是边读边写，一边阅读一边记笔记会一定程度影响阅读速度，但是效率奇高。如果是纸质书，也可以直接在书上记下自己的心得和理解，阅读之后再写个书评，效果更佳。</p>

<p>还有一点就是在有可能的情况下，多跟身边的人交流阅读心得，我觉得“读书会”是一个很好的方式，无奈当下生活节奏过快，线下的“读书会”难以组织，那么线上的一些评论网站就是不二的选择了。我个人目前比较推荐豆瓣读书，我的个人读书页面在<a href="http://book.douban.com/people/hustcalm/">这里</a>。</p>

<p>这两天读了“多看阅读”上一本小书，叫做“独立博客”，由简书出品，虽然有点广告性质，但是里面独立博主的一些感想很有启发性。当下大环境下，独立博客更像是互联网中的孤岛，是博主自娱自乐的地方。希望在我的自娱自乐中能够带给大家一些帮助，如果你能到达我的孤岛的话:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of BeagleBone Robotic Projects - From a Technical Perspective]]></title>
    <link href="http://hustcalm.me/blog/2014/02/10/review-of-beaglebone-robotic-projects-from-a-technical-perspective/"/>
    <updated>2014-02-10T11:07:55+08:00</updated>
    <id>http://hustcalm.me/blog/2014/02/10/review-of-beaglebone-robotic-projects-from-a-technical-perspective</id>
    <content type="html"><![CDATA[<p>I&rsquo;m lucky to be a reviewer for the book <code>Beaglebone Robotic Projects</code> few months ago released by <a href="http://www.packtpub.com/">PACKT</a>. And I&rsquo;d like to recommend this book to readers who would like to play with <code>Beagle</code> for a while and start their own robotic projects. Below I&rsquo;ll talk a little bit about this book from a technical perspective.</p>

<!--more-->


<p>First of all, here is the cover of <a href="http://www.packtpub.com/beaglebone-robotic-projects/book">BeagleBone Robotic Projects</a>:</p>

<p><a href="http://www.packtpub.com/beaglebone-robotic-projects/book"><img src="http://hustcalm.me/images/blog_images/books/9329OT_BeagleBone_Robotic_Projects_cov.jpg"></a></p>

<h3>What you will learn from this book</h3>

<h4>What is BeagleBone Black</h4>

<p>As a <code>mini PC</code> or something, it is compared to <code>Raspberry Pi</code> sometimes. Some people would play with them as toys, some would like to do some amazing projects. It is a typical representative of <code>open source hardware</code>! And it runs the incredible <code>Linux</code>. Chapter 1 will guide you through to get your BeagleBone to work with a fully functioning desktop.</p>

<h4>Talk with BeagleBone Black through programming</h4>

<p>To be able to get started with BeagleBone and do what you want, some background in <code>Linux</code>, <code>Python</code> and <code>Programming</code> will be required. The 2nd chapter of the book will show you the basic Linux commands, brief tutorial for Python, etc.</p>

<h4>Simple speech recognition and make the robot speak</h4>

<p>Chapter 3 shows us how to make your robot speak as a robot utilizing <code>eSpeak</code> and how to do simple speech recognition using <code>PocketSphnix</code>. Also to test the <code>USB sound device</code>, we use <code>AlsaMixer</code> built upon <code>ALSA</code> libraries.</p>

<h4>Use camera as the Robot&rsquo;s eyes</h4>

<p>In chapter 4, the book first shows how to connect a USB camera to BeagleBone and viewing the images with <code>GUVCViewer</code>. After that is guide for installing a full-featured vision library &ndash; <code>OpenCV</code>. Then is a demo for detecting colored objects using <code>OpenCV</code>.</p>

<h4>Make it run by using Servos and Motors</h4>

<p>Chapter 5 will tell you how to make a <code>wheeled</code> robot and chapter 6 will show how a <code>legged</code> robot is made. The instructions for hooking up the wires and demos for controlling the servos and motors would definitely help a lot.</p>

<h4>Sense the environment to make some intelligence</h4>

<p>For avoiding obstables, we use a <code>USB sonar sensor</code> in chapter 7, or people will call it <code>ultrasonic sensor</code>. And for letting your robot know where it is, the book shows how to use a <code>GPS</code> module in chapter 9.</p>

<h4>Remote control for more fun</h4>

<p>Chapter 8 shows how to hook up a <code>LCD</code> display to your BeagleBone and control your robot with a <code>2.4GHz Keyboard</code>. Just imagine how it would be fun to see your robot running around whereas you just sitting there.</p>

<h4>Impossible is nothing</h4>

<p>Want something more? Chapter 10 will teach you how to integrate all the parts and skills covered in previous chapters to make a whole system. For more fun, chapter 11 is a good starting point. Want a sailing robot, flying robot or a submarine robot? This chapter will help a lot.</p>

<hr />

<h3>Highlights</h3>

<p>For the highlights of the book, I want to say that it covers a lot for a typical <code>embedded system</code> and will be very helpful tutorials for hobbiests to get started with their robotic projects. Not only hardware, but also open source software are widely used, instructions are clear and easy to read. To summarize,</p>

<ul>
<li>You will know basic Linux through this book</li>
<li>Python will be your handy programming language for doing robotic projects</li>
<li>Getting to know various useful software packages(eSpeak, PocketSphinx, OpenCV, GUVCViewer, etc)</li>
<li>Know the actuators for typical robots(servos and motors)</li>
<li>Have a basic understanding of sensors(ultrasonic, camera, GPS, etc)</li>
<li>Good starting point to make something big(multicopter maybe)</li>
</ul>


<hr />

<p>In a word, you may as well give the book a try and hope it can help:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing OpenCV on Mac OS X - 10 Minutes Tutorial]]></title>
    <link href="http://hustcalm.me/blog/2014/01/24/installing-opencv-on-mac-os-x-10-minutes-tutorial/"/>
    <updated>2014-01-24T00:03:00+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/24/installing-opencv-on-mac-os-x-10-minutes-tutorial</id>
    <content type="html"><![CDATA[<p>A simple tutorial to get OpenCV set up on Mac OS X. I get this done on my Macbook Pro with Mavericks OS. Luckily enough, you will success following the instructions blow.</p>

<hr />

<h3>Prerequisites</h3>

<h4>Source Code</h4>

<p>You can download the source code from <a href="http://opencv.org/">OpenCV Official Site</a>, I prefer to pull the source using <code>git</code> however.</p>

<pre><code>git clone https://github.com/Itseez/opencv.git
</code></pre>

<!--more-->


<h4>Build Tools</h4>

<p>I use <a href="http://brew.sh/">Homebrew</a> as my package manager, to install <code>Homebrew</code>, use:</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></pre>

<p>After brew installed, get <code>CMake</code> by:</p>

<pre><code>brew install cmake
</code></pre>

<hr />

<h3>Build and Install OpenCV</h3>

<p>Now the recipes are ready, let&rsquo;s cook:</p>

<pre><code>cd opencv
mkdir build
cd build
cmake -G "Unix Makefiles" ..
make -j8
sudo make install
</code></pre>

<hr />

<h3>Verify Installation</h3>

<p>Let&rsquo;s rock by building a simple sample:</p>

<pre><code>cd opencv/samples/cpp
g++ edge.cpp -o edge `pkg-config --cflags --libs opencv`
./edge
</code></pre>

<p>You should see a window pop up and demo the <code>Canny edge detection</code>.</p>

<hr />

<p>Happy playing with OpenCV, drop me a line if you got problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Know Your Website Better Using Google Webmaster Tools, Analytics and Authorship]]></title>
    <link href="http://hustcalm.me/blog/2014/01/23/know-your-website-better-using-google-webmaster-tools-analytics-and-authorship/"/>
    <updated>2014-01-23T19:05:43+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/23/know-your-website-better-using-google-webmaster-tools-analytics-and-authorship</id>
    <content type="html"><![CDATA[<p>I happened to get to know <code>Google Webmaster Tools</code>, <code>Google Analytics</code> and <code>Google Authorship Markup</code> when I try to tweak my <code>Octopress</code> website. Found that Google is really doing lots of interesting things for our websites, I will share some useful tips and links here.</p>

<hr />

<h3>Google Webmaster Tools</h3>

<p>Go to <a href="http://www.google.com/webmasters/">Official Webmasters</a> to get started, first try to look around to know what <code>Webmasters</code> aims to do. After that, login to <a href="https://www.google.com/webmasters/tools">Webmaster Tools</a> , add your website by clicking <code>Add Website</code>, then verify the website according to the hints.</p>

<!--more-->


<p>As long as you have claimed the owership of your website, you can see the dashboard for detailed information. You can submit your <code>sitemap</code>, see the <code>search query</code> statistics, the status of your website.</p>

<p>Explore more to find something more exciting:&ndash;)</p>

<p>To be more professional, see <a href="https://support.google.com/webmasters/answer/35769?hl=en">Webmaster Guidelines</a>.</p>

<hr />

<h3>Google Analytics</h3>

<p>Even better, <a href="http://www.google.com/analytics/">Google Analytics</a> will let you know every single click from users to your website. See <a href="http://www.google.com/analytics/features/index.html">Analytics features</a> for complete lists to know what <code>Analytics</code> can do. Initially set up for commercial use or marketing promotion, we can adapt this technique to our personal website.</p>

<p>Also, look carefully about <code>your website report</code>, I bet you will find something interesting. For developers, there are <a href="https://developers.google.com/analytics/devguides/?csw=1">Developer Guides &amp; Reference for Google Analytics</a>.</p>

<hr />

<h3>Google Authorship</h3>

<p>Well, it would be cool to attribute the article or post to its author, <a href="https://plus.google.com/authorship">Google Authorship</a> is the one who helps.</p>

<p>See the professional article <a href="http://searchengineland.com/the-definitive-guide-to-google-authorship-markup-123218">The Definitive Guide To Google Authorship Markup</a> for details. To test if you have successfully set your authorship, use <a href="www.google.com/webmasters/tools/richsnippets">Google Structured Data Testing
Tool</a>.</p>

<p>As for me, I verified my authorship through my Email related to my domain bought from <a href="https://name.com">name.com</a>. Simple Enable <code>Email Service</code> through the domain dashboard, you can set up a forward Email for your owned domain Email address.</p>

<hr />

<h3>Google FeedBurner</h3>

<p><a href="http://feedburner.google.com">FeedBurner</a> is a service for <code>RSS</code> subscribe. It&rsquo;s flexible enough and ease your pain when switching domains.</p>

<p>After you add your blog to feedburner, it supports <code>RSS readers</code> by default. So if you want your readers to subscribe through their Emails, go to your feeds and click <code>Publicize</code>, then click <code>Email Subscriptions</code>, down the page to click <code>Active</code> to make the service alive.</p>

<p>See other tabs of your feeds, there are really lots of for you to tweak and play with.</p>

<hr />

<p>When you find blogging more interesting and part of your life, it&rsquo;s time to give an eye for your website status and traffic. I used to blog for just expressing myself, but now I also tend to write something that readers would enjoy.</p>

<p>Hope this post would get you to know with the Google tools that you can use and make you a better blogger:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simply Get BOINC Running on CentOS 6.4 and Earn XRP]]></title>
    <link href="http://hustcalm.me/blog/2014/01/22/simply-get-boinc-running-on-centos-6-dot-4-and-earn-xrp/"/>
    <updated>2014-01-22T08:56:56+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/22/simply-get-boinc-running-on-centos-6-dot-4-and-earn-xrp</id>
    <content type="html"><![CDATA[<p>Recently I got to know <a href="http://boinc.berkeley.edu">BOINC</a> from a friend and find it funny to play with. <code>BOINC</code> is an open-source software platform for computing using volunteered resources, which means that people can donate their computing resources to varies of research projects through it. <code>BOINC</code> is an acronym for <code>Berkeley Open Infrastructure for Network Computing</code>. See <a href="http://boinc.berkeley.edu">their website</a> for more details.</p>

<!--more-->


<p>However, <code>BOINC</code> has the client side and the server side, in order to let people know what projects they can contribute to, how about their statistics and rankings, etc, we have <a href="http://worldcommunitygrid.org">World Community Grid</a>, namely the server side. <strong>World Community Grid(WCG)</strong> is an effort to create the world&rsquo;s largest public computing grid to tackle scientific research projects that benefit humanity, Launched on November 16, 2004, it is funded and operated by IBM with client
software currently available for Windows, Linux, Mac OS X and FreeBSD operating systems. Here for the client software, it is the <code>BOINC</code> we refered above. For <strong>WCG</strong> itself, go to <a href="http://worldcommunitygrid.org">their website</a> and also see <a href="http://www.ibm.com/smarterplanet/us/en/business_analytics/article/wcg.html">this article from IBM</a>.</p>

<p>Basically, people just donate their computing resources for free, but we can also donate for good. Here comes the <a href="https://www.computingforgood.org">Computing for Good</a> brought by <a href="http://ripple.com">rippleLabs</a>. They are giving away XRP in exchange for donating computing power to scientific research via World Community Grid. Anyone with an Internet-connected computer or Android device can participate.</p>

<p>So we are going to earn XRP for donating our computing power, for me, on a <code>DELL Optiplex 960</code> running <code>CentOS 6.4 x86_64</code>. Here goes the steps.</p>

<hr />

<h3>Register for World Community Grid</h3>

<p>Go to <a href="http://worldcommunitygrid.org">World Community Grid</a> and click <code>Join Today!</code>, or just click <a href="http://www.worldcommunitygrid.org/reg/viewRegister.do">here</a> for direct portal. Complete the registration form and you are ready to go. For the software, you may download according to your operating system from here, or go to <code>BOINC</code>. I will give installation details in the next section.</p>

<p><strong>After your registration, login and go to settings, then join the team <code>Ripple Labs</code>.</strong></p>

<hr />

<h3>Get BOINC Running</h3>

<p>I will be detailed for my <code>CentOS 6.4 x86_64</code>, for others, refer to <a href="http://boinc.berkeley.edu/wiki/User_manual">BOINC User Mannual</a>.</p>

<h4>Check your repos</h4>

<pre><code>ls -al /etc/yum.repos.d/
</code></pre>

<h4>Add EPEL repo</h4>

<pre><code>wget http://download.fedoraproject.org/pub/epel/x86_64/epel-release-6-8.noarch.rpm
sudo rpm -ivh epel-release-6-8.noarch.rpm
sudo rmp --import /etc/pki/rpm-gpg/RMP-GPG-KEY-EPEL-6
yum clean all
yum list
</code></pre>

<h4>Install BOINC using yum</h4>

<p>Below is the version for Terminal guys, for more details you may want to refer to <a href="http://boinc.berkeley.edu/wiki/Installing_BOINC_on_Fedora">Installing BOINC on Fedora</a>.</p>

<p>The <code>boinc-manger</code> is your case if you prefer using GUI for interfacing, however if working under Terminal, <code>boinc-client</code> is enough. I will install both here:</p>

<pre><code>su -c 'yum install boinc-client boinc-manager'
</code></pre>

<p>Make it an auto-start service:</p>

<pre><code>chkconfig boinc-client on
</code></pre>

<p>Verify the installation:</p>

<pre><code>ps aux | grep boinc
</code></pre>

<p>See what has been installed:</p>

<pre><code>which boinc_client | xargs file
which boinc        | xargs file
which boinccmd     | xargs file
which boinc_gui    | xargs file
which boincmgr     | xargs file
</code></pre>

<p>For help:</p>

<pre><code>man boinc
man boinccmd
man boincmgr
</code></pre>

<p>Set up your accounts:</p>

<pre><code>sudo usrmod -G boinc -a your_username
sudo chmod g+rw /var/lib/boinc
sudo chmod g+rw /var/lib/boinc/*.*
sudo ln -s /var/lib/boinc/gui_rpc_auth.cfg ~/gui_rpc_auth.cfg
</code></pre>

<p>Finally, <strong>logout and login again</strong> to renew your groupship and permission to /var/lib/boinc.</p>

<h4>Attach WCG project to BOINC</h4>

<pre><code>boinccmd --project_attach http://www.worldcommunitygrid.org/ YOUR_ACCOUNT_KEY
boinccmd update
</code></pre>

<p><code>YOUR_ACCOUNT_KEY</code> can be found at your <code>WCG Profile</code>.</p>

<h4>Check the BOINC status</h4>

<pre><code>boinccmd --get_state
</code></pre>

<hr />

<h3>Register Ripple Wallet</h3>

<p>Go to <a href="https://ripple.com">ripple website</a> and register a wallet. Do remember the related keys for security.</p>

<hr />

<h3>Connect your WCG and Ripple Wallet</h3>

<p>Finally, go to <a href="https://www.computingforgood.org">Computing for Good</a> and get your <code>WCG</code> and <code>Ripple Wallet</code> connected.</p>

<p>Just click <code>REGISTER</code>, the guide will get you done very soon, all you need to do is to provide the specified <code>wallet address</code> and <code>WCG account</code>.</p>

<hr />

<p>Happy digging and contributing:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Your Slides the Awesome Way]]></title>
    <link href="http://hustcalm.me/blog/2014/01/12/making-your-slides-the-awesome-way/"/>
    <updated>2014-01-12T00:08:45+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/12/making-your-slides-the-awesome-way</id>
    <content type="html"><![CDATA[<p>People will always find themselves making varies of slides for demo or promotion or report, whatever. Most would know how to make a slide ,right? <code>PPT</code> would be the first choice to majority of people. For web developers, they would produce their slides in <code>HTML + CSS + Javascript</code>? And for researchers or people in academic area, will they use <code>Latex</code> or the popular <code>beamer</code> class?</p>

<!--more-->


<p>We do have kinds of approaches to make us slids work, but what is the awesome way? To be awesome, I mean the sides should look nice, easy to control its typeset and should maintain the same when playing at different devices or different software. Of course, the way to write your slide could be awesome too:&ndash;)</p>

<p>I will simply go through what choices that we have, what&rsquo;s the advantage disadvantage, and finally choose the way that you think is awesome to you.</p>

<hr />

<h3>Choices for making slides</h3>

<h4>The normal way &ndash; PPT or Keynote</h4>

<p>I bet that this is the most adaptive way for people to get presentations done. On Windows and Linux, we use Office, specifically speaking the <code>Powerpoint</code> or <code>Impress</code> shipped with LibreOffice.</p>

<p>On Mac, people use <code>Keynote</code> a lot.</p>

<p>I won&rsquo;t make it long, see this for a fabulous discussion at:</p>

<ul>
<li><a href="http://readingsml.blogspot.com/2009/11/keynote-vs-powerpoint-vs-beamer.html">Keynote vs. Powerpoint vs. Beamer</a></li>
</ul>


<h4>Cool way utilizing browser &ndash; HTML + CSS</h4>

<p>Yes, yes, we only need Browers and Terminals for our computer, right? Exaggerated enough, but browsers are really doing everything for us, including showing the slides, go to <a href="http://www.slideshare.net">slideshare</a> for a vivid experience. However, the slides showed on <code>slideshare</code> is powered by <code>Flash</code>, so do others who provide similar services.</p>

<p>No Flash, let&rsquo;s see how to make slides using just <code>HTML</code> and <code>CSS</code>.</p>

<p>A good tutorial goes here:</p>

<ul>
<li><a href="http://net.tutsplus.com/tutorials/html-css-techniques/how-to-create-presentation-slides-with-html-and-css-2/">How to Create Presentation Slides with HTML and CSS</a></li>
</ul>


<h4>Awesome way using Latex &ndash; beamer</h4>

<p>Geek enough, but maybe mostly used by hackers and researchers, Latex &ndash; beamer is definitely awesome. It&rsquo;s like you are composing a literature when writing your slides.</p>

<p>For getting started with Latex &ndash; beamer, See:</p>

<ul>
<li><a href="http://jeromyanglim.blogspot.com/2010/08/getting-started-with-beamer-tips-and.html">Getting Started with Beamer: Tips and Tricks for LaTeX Presentations</a></li>
<li><a href="http://www.productivescholar.com/2008/03/15/how-to-use-the-latex-beamer-class-for-great-looking-presentations/">How-To Use the LaTeX Beamer Class for Great-Looking Presentations</a></li>
<li><p><a href="http://lucatrevisan.wordpress.com/2010/11/18/presenting-a-beamer-talk-the-right-way/">Presenting a Beamer Talk the Right Way</a></p></li>
<li><p><a href="http://www.math-linux.com/latex-26/How-to-make-a-presentation-with">How to make a presentation with Latex &ndash; Introduction to Beamer</a></p></li>
<li><a href="http://www.uncg.edu/cmp/reu/presentations/Charles%20Batts%20-%20Beamer%20Tutorial.pdf">A Beamer Tutorial in Beamer</a></li>
<li><a href="http://www.tug.org/pracjourn/2005-4/mertz/mertz.pdf">Beamer by Example</a></li>
<li><a href="http://www.informatik.uni-freiburg.de/~frank/ENG/latex-course/latex-course-3/latex-course-3_en.html">examples of beamer class</a></li>
<li><a href="http://heather.cs.ucdavis.edu/~matloff/beamer.html">Norm Matloff&rsquo;s Quick Tutorial on the Beamer Package for Slide Making in LaTeX</a></li>
<li><a href="http://www.math.umbc.edu/~rouben/beamer/quickstart.html">A Beamer Quickstart</a></li>
<li><a href="http://zrno.fsb.hr/katedra/download/materijali/1082.pdf">Beamer Class Tutorial &ndash; Warsaw University of Technology</a></li>
</ul>


<hr />

<h3>Awesome way for making slides</h3>

<p>To me, the awesome would be to use <code>HTML + CSS</code> or <code>beamer</code>. Why? Simply because they are cross platform naturely and it&rsquo;s really flexible when creating slides by writing plain markup files or something like that.</p>

<hr />

<h3>Choose your awesome way</h3>

<p>Most of the times, you will find the ways or methods are not the essential things, the contents and the way you represent is the key. So just choose the right way for you, making it your awesome way. I believe everyone will make a perfect job once he gets skillful enough.</p>

<hr />

<h3>Other Useful Links</h3>

<ul>
<li><p><a href="http://johnmacfarlane.net/pandoc/demo/example9/producing-slide-shows-with-pandoc.html">Producing slide shows with Pandoc</a></p></li>
<li><p><a href="http://www.forbes.com/sites/allbusiness/2013/11/25/7-principles-for-making-powerpoint-slides-with-impact/">5 Principles For Making PowerPoint Slides With Impact &ndash; 1</a></p></li>
<li><a href="http://www.forbes.com/sites/allbusiness/2013/11/25/7-principles-for-making-powerpoint-slides-with-impact/2/">5 Principles For Making PowerPoint Slides With Impact &ndash; 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Getting Started - Methodologies and Practices]]></title>
    <link href="http://hustcalm.me/blog/2014/01/06/linux-getting-started-methodologies-and-practices/"/>
    <updated>2014-01-06T22:22:00+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/06/linux-getting-started-methodologies-and-practices</id>
    <content type="html"><![CDATA[<p>This is basically a topic that I gave to <a href="http://blog-ossclub.rhcloud.com/">Open-CAS</a> group members as a technique share. Since I have known Linux for over 4 years and heavily used it for 2 years more or less, I find myself realy attracted by it.</p>

<p>Also I want others to have the chance to live with a better OS(Unix and Linux, also Mac OS of course), so it&rsquo;s a good time to take the good points out of my mind and let more people know.</p>

<p>It&rsquo;s good to learn from each other especially when there are problems to solve. So I put my mind at a <code>github</code> repo called <a href="https://github.com/hustcalm/linux-getting-started">linux-getting-started</a> and hope that others would join me to make this repo more useful.</p>

<!--more-->


<h3>What&rsquo;s in this repo</h3>

<p>Currently, I&rsquo;m addressing two aspects for <code>Linux Getting Started</code>, namely <code>Methodologies</code> and <code>Practices</code>. I know these are really big words, but they just fit here since I want to tell people <code>how to learn</code> not just <code>what to learn</code>.</p>

<h4>Methodologies</h4>

<p>Know what you are gonna do before you step out. Basically, for Linux beginners, the first step that I recommend is <code>install a Linux distro that you like</code>. Then just <code>use it</code> before you want to know everything about it(seems that no one will never ever). It&rsquo;s an OS after all, you use it for your daily job and solve your problems, not a magic software that just plays magic.</p>

<p>A good book would give you a real quick start, I have divided the books into three levels:</p>

<ul>
<li>[Beginner]</li>
</ul>


<p>Newbies who just get to know Linux &ndash; Learn how to live with shell</p>

<ul>
<li>[Developer]</li>
</ul>


<p>Experienced programmers especially for C/C++ guys &ndash; get used to Linux Platform</p>

<ul>
<li>[Next]</li>
</ul>


<p>Ones who will dive deeper into the most complicated but fun part &ndash; Kernel and Driver</p>

<p><strong>In one word, use it, learn it, dive into it!</strong></p>

<h4>Practices</h4>

<p>Using and Reading will give a quite well understanding for Linux, but not enough for mastering it. To become <code>real Linux users or developers</code>, remember <code>never leave your eyes off the screen and your fingers off your keyboard</code>, practice will just make perfect things and a great Linuxer, believe me:&ndash;)</p>

<p>I address two technical parts currently in this repo, <code>Shell Scripting</code> and <code>Makefile</code>. Other parts will definitely added as long as I maintain this repo.</p>

<h5>Shell Scripting</h5>

<p>Before beginning with <code>Shell Scripting</code>, I suppose you have already been familiar with varies of commands or utilities in shell.</p>

<p>To be straight, <code>shell</code> itself is a program which will interpret user&rsquo;s commands or instructions, convert them to <code>system calls</code> or other things that OS can understand. So basically speaking, <code>shell</code> is the interface between <code>user</code> and <code>OS Kernel</code>.</p>

<p>As a script language, it has its own variables, functions and flow control statements, also it features many other stuff which will ease much pain for system administration but maybe worse if not used properly. When we are writing shell scripts, we are actually dealing with processes and interprocess communication, each process would do its job and we can use <code>pipe</code>, <code>socket</code>, <code>named-pipes</code> or <code>file</code> to let them talk to each other.</p>

<p>You can definitely play some magic with shell scripting by choosing your favorite shell, like <code>Bash</code>, <code>Ksh</code>, <code>Zsh</code>, etc.</p>

<h5>Makefile</h5>

<p>As you get to know <code>shell</code>, you are ready to know something about <code>makefile</code>. Before that, I will talk about <code>make</code>, <code>autotools</code> first.</p>

<p>When we are trying to build a big project, no one want to invoke every single compiling commands by hand which is annoying but also error prone. Here comes <code>make</code> to figure out this problem. So when you download a package with source code, to build it, simply type:</p>

<pre><code>make
sudo make install
</code></pre>

<p>Then you are done!</p>

<p>Is this that easy? Reality will really disappoint us, because the user&rsquo;s OS or environment always will not be consistent with the developer&rsquo;s. So <code>make</code> does not easy the pain for buiding a package or software from scratch, but making it easier to manage a big project.</p>

<p>So what&rsquo;s the solution? Here comes the <code>Autotools</code>, which will generate <code>makefiles</code> automatically according to the configuration of your system. Like you got a third party library A, and one package needs the library for one feature, <code>Autotools</code> will take care of whether you got the library installed, if yes, then build the package with the feature enabled, or just disable it otherwise.</p>

<p>Cool, isn&rsquo;t it? Yes for the users, but maybe no for the developers, I mean all the pain will be transfered to the developers since they got to write <code>Autotools</code> scripts to make things right. Just another wrapper to give a good, cross-platform and generic solution? Some people would quite agree with this opinion.</p>

<p>Thanks to the <code>Autotools</code>, people are getting used to:</p>

<pre><code>./configure
make
sudo make install
</code></pre>

<p>There are many others excellent build systems or tools out there, like <code>CMake</code>, <code>QMake</code>, <code>Scons</code>, <code>Ninja</code> ,etc. Go and try them out!</p>

<hr />

<h3>Where is the slide</h3>

<p>Honestly speaking, the slide is just a chain which helps me to make a clear topic. So you will not find it big, just about 15 pages, however to spread all the sparking mind, you will find it&rsquo;s really a <code>big one</code> again.</p>

<p>If you want, download the slide at <a href="https://github.com/hustcalm/linux-getting-started/blob/master/linux-getting-started-%40hustcalm.pdf">here</a>.</p>

<hr />

<h3>What if I want to see something else</h3>

<p>Cool, buddy, I do hope that we can maintain this repo together and help more people to get started with Linux. So you are welcome to add interesting topics or useful links or good references or books to this repo.</p>

<p>You may either <code>fork</code> this <a href="https://github.com/hustcalm/linux-getting-started">repo</a>, add something interesting, then <code>pull request</code> to me.</p>

<p>Or you can just add what you want to know to the <code>wishList</code> file after <code>fork</code>, maybe shortly I will add stuff about the topic that you care about.</p>

<p>Help others, help yourself:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Qt and Qt Creator]]></title>
    <link href="http://hustcalm.me/blog/2014/01/02/getting-started-with-qt-and-qt-creator/"/>
    <updated>2014-01-02T15:42:00+08:00</updated>
    <id>http://hustcalm.me/blog/2014/01/02/getting-started-with-qt-and-qt-creator</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;m doing a project for the Lab and choose C++ as the programming language, but for the Framework, I considered MFC and Qt at first but choose Qt without hesitation as soon as I recalled the pains when I tried to play with MFC. In short, MFC is just showing too much to the developer and looks a little annoying and more complicated(C++ itself is complicated enough).</p>

<p>To be clear, I did not try Qt before either and totally new to it. But after two months, I wrote a running application which can deal with Cameras, IMU and Inclinometer, also a 6DOF controller. Besides, we have multithreading in it and multiply timers are running simultaneously. To summarize what I have learned and also share my experience to you is the desire to write this post.</p>

<!--more-->


<p>I also find that Qt Creator is really cool with the plugin <code>FakeVim</code> enabled(It is installed by default ,at least in my Qt Creator 2.8.1 Windows version), a light wight IDE with powerful abilities! So in this post, after talking about how to get started with Qt, I will give some appreciations to Qt Creator:&ndash;)</p>

<hr />

<h3>Beginning with Qt</h3>

<h4>Get to know Qt</h4>

<p>It&rsquo;s essentially a GUI toolkit when fist designed, but after years of development, it has evolved into a framework which is cross platform and popular.</p>

<p>For official introduction, visit <a href="http://qt-project.org/">Qt Project</a>.</p>

<h4>Choosing the way that you use</h4>

<p>I will not talk about the versions ,like 5.x or 4.x. Let&rsquo;s say something about the <code>prebuilt-binaries</code> and <code>source code</code>.</p>

<p>If you choose to build from scratch, it would take a bit of time to do that since Qt is big enough. If using the built binaries, do look at the related compilor, for Windows, you got options for VS 2008, VS 2010, VS 2012 and MinGW stuff. If you are using VS 2008(in my case), choosing this file <a href="http://download.qt-project.org/official_releases/qt/4.8/4.8.5/qt-win-opensource-4.8.5-vs2008.exe">Qt libraries 4.8.5 for Windows (VS 2008, 235 MB)</a>, just for an example,then probably you are good to go when you build your project with VS 2008 as the backend.</p>

<p>For Qt Creator, I prefer to use the perbuilt one too, but if you want to install some specified plugins, build from source code may be needed.</p>

<h4>A good book would help a lot</h4>

<p>I read the book <code>C++ GUI Programming with Qt 4(2nd Edition)</code> not because it&rsquo;s the best book for Qt, just because that we got one Chinese version copy of the book in our Lab. I went through the first 3 chapters and the appendix(mainly to know more about <code>qmake</code>), then referenced other chapters while I got problems when coding.</p>

<p>For the comment that I wrote for the book, you can find it <a href="http://book.douban.com/review/6489896/">here</a>.</p>

<p>However, this book is recommended as the official Qt book. You may want to try it out yourself and make your own judge, if you find another excellent book, do let me know:&ndash;)</p>

<h4>See what the official says</h4>

<p>For the official tutorials, you can refer to their website, like:</p>

<ul>
<li><a href="http://qt-project.org/doc/qt-5/gettingstarted.html">Getting Started with Qt</a></li>
<li><a href="http://qt-project.org/doc/qt-4.8/how-to-learn-qt.html">How to Learn Qt</a></li>
<li><a href="http://qt-project.org/doc/qt-4.7/how-to-learn-qt.html">How to Learn Qt</a></li>
</ul>


<p>You may notice that each Qt version got their own getting started web page, however, don&rsquo;t bother, checkout them all and pick the brilliant part that suits yourself.</p>

<p>As time goes by, there may be new links and the listed links would be out of date. Go to the official website and find the real links then.</p>

<hr />

<h3>Qt Creator as your Swiss Army Knife</h3>

<p>Yes, it is just an IDE, compared with Eclipse, it&rsquo;s dedicated to Qt and C++(Not exactly, it supports Android and even BlackBerry development), so much light-wighted. However, it&rsquo;s flexible and with lots of plugins, see <a href="http://qt-project.org/wiki/Qt_Creator_Plug-in_Gallery">Qt Creator Plugin Gallery</a>.</p>

<p>As I&rsquo;m not expert to Qt Creator either, I will give several examples here.</p>

<h4>FakeVim</h4>

<p>Default shipped with Qt Creator, I&rsquo;m really excited when I find it. Support external <code>.vimrc</code> and give you almost the native vim experience.</p>

<p>I used the default <code>FakeVim</code> key bindings, they are just as same as the official vim, besides that, you may use other short cuts provided by Qt Creator, among them, <code>F2</code> for following the symbol under cursor and <code>F4</code> for switching header and souce file are the most frequently used. For generating source code tags, it&rsquo;s well cared by a background process, however when got large source files, I suffered for temporary <code>Not Responding</code>.</p>

<p>For quick view of the options:
<img src="http://hustcalm.me/images/blog_images/qt_creator-fakevim.png"></p>

<h4>Doxygen</h4>

<p>This plugin uses the standard <a href="http://www.doxygen.org">Doxygen</a> as the backend and give useful utilities for documenting the whole project or a file or a class, function. variable, whatever.</p>

<p>The following links really help a lot:o</p>

<ul>
<li><a href="https://facwiki.cs.byu.edu/HCMI/index.php/Using_doxygen_with_Qt_Creator">Using doxygen with Qt Creator</a></li>
<li><a href="http://dev.kofee.org/projects/qtcreator-doxygen/wiki">QtCreator-Doxygen</a></li>
</ul>


<h4>Version Control</h4>

<p>Qt Creator makes it really easy for integrating with version control tools, an image will tell everything:
<img src="http://hustcalm.me/images/blog_images/qt_creator-versioncontrol.png"></p>

<hr />

<p>Hope this post do a little help for your getting started with Qt Programming:&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/C++-不死的精灵]]></title>
    <link href="http://hustcalm.me/blog/2013/12/21/c-slash-c-plus-plus-bu-si-de-jing-ling/"/>
    <updated>2013-12-21T13:18:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/12/21/c-slash-c-plus-plus-bu-si-de-jing-ling</id>
    <content type="html"><![CDATA[<p>看了《C专家编程》和《Essential C++》后，对C/C++的好奇愈加强烈。作为平台级别的语言，很多操作系统都是基于C/C++构建的，因此要想学好C/C++，我觉得对系统底层的了解是必须的，至少对于一个真正的Programmer需要做到如此。总有一些言论，说现在C/C++程序员都成稀有群体了，现在大家都去玩简单易学的Python，甚至时髦小众的Golang了。呜呼，我想说，C/C++伴我们一路走来，作为不死之精灵，还将陪我们走一段很长的路。</p>

<!--more-->


<h3>前言</h3>

<p>不管是业界惯性也罢，语言本身也好，我觉得这个世界对C/C++的需求是巨大的。底层的操作系统不说，对效率要求极高的游戏产品，大型科学计算程序，都是C/C++的绝佳用武之地。Java提供的JNI机制，一个是从平台本地化考虑，另外一个很大程度上是从效率上考虑的吧。Windows Phone的开发以C#作为GUI主要语言，底层的component大多基于C++编译出来的lib。OOP虽然早在Ada，Smalltalk就被引入，不过真正带给产业届震撼的应该是在C++被发明出来以后。当然这跟一些业界巨头的选择不无关系，比如Microsoft选择了C++作为自己的底层开发语言。</p>

<p>写这篇文章，实则是想让自己整理一下学习的思路，如果能给读者带来一些启发，定倍感荣幸了。从C/C++说起，牵涉到底层的OS实现，Compilor实现，语言本身的描述，CRT，glibc之类的概念，以及ISO标准，Windows API，system call之流。缕清楚了底层的复杂机制，在写C/C++程序的时候会更加成竹在胸了，实现和调试上都会更有针对性和效率。而谈到应用程序的设计，则需要用到各种各样的库，在这些库之上构建程序的功能逻辑，这本质上算是代码重用了。话说回来，在整个计算机开发界，我觉得人类就是不断地向高层抽象，从机器代码到汇编，再到编译型的C/C++语言，动态解释性语言，再往后肯定会有更抽象的语言出现，也许那个时候，人类不是自己编程了，而是计算机自己编程，而人类只需要告诉它需要完成什么任务就行了。Ok，就暂时YY到这里。</p>

<p>既然是整理思路的文章，我准备按照自底向上的方式，进行一些简单的讨论，中间参考了大量的已有博文，我会简单总结一下博文的精神，如果想自己消化，就请移步原文了。</p>

<hr />

<h3>C/C++，Compilor， OS，CRT，Standard Library，API之我见</h3>

<p>感觉很难有几个程序员可以很快把这个几个概念说清楚。这些东东都很有历史，所以一路伴随计算机走来的人会有比较深入的了解。在引入讨论前，我先谈谈自己的体会。</p>

<p>从计算机说起，它到底是个什么东东？A magic Box？Yes，but No！本质上来说，都是“开关”，几个”开关“可以构成”逻辑“，而”逻辑“的”组合“可以做事了。而这个开关的实现就跟技术水平有关系了。最开始的”开关”是用机械装置实现的，到后来是电子管，再到后来是ASIC和VLSI了。</p>

<p>而计算机最核心的部件就属“CPU”了，真正的worker就是它。而CPU的设计也相对单纯，它只负责如实地访问相应的寄存器存取数据，并且取指后执行指令。为了运行逻辑复杂的大型程序，则需要外部存储的辅助，那就是RAM了。而为了持久化，就又需要Hard Disk的帮忙。</p>

<p>所以计算机本身就是一堆电子元器件的组合，但是想做出可以工作的，有用的计算机，其中的细节都是很专业的事情。</p>

<h4>C/C++</h4>

<p>语言本身是一种标准或者描述，说明语言有哪些要素，能够实现哪些功能等等，因此它本身可以在比较短的篇幅内讲完，所以C语言之父Ritchie的著作《The C Programming Language》只有不到200页。</p>

<h4>Compilor</h4>

<p>真正实现语言特性和功能的是编译器，由于语言本身的描述有些地方不是特别死板，或者很多地方跟所用的平台有关系，编译器在实现的时候也会有略微的差异。举个最直观的例子，Microsoft的MSVC和GNU的gcc，甚至SUN的cc，对你写的同一份C/C++源代码会有自身的一些特殊处理。</p>

<p>说到了编译器，就再说一下抽象层这个事情吧。大家可能都知道，最开始的编程使用机器语言，后来到了汇编语言，由汇编器完成中间的翻译工作。后来出现了高级语言，比如C语言（其实在之前有很多其它的语言，C语言不是最早却是最成功的），这个时候由编译器把源代码处理后编译成汇编代码，再由汇编器翻译成机器代码。至于之后的动态语言，比如Python，也是先要使用一种语言实现一个解释器，然后再通过这个解释器来运行用户的脚本或者代码。居于中间的另外一种语言形式可以拿Java举例子，它本身具有静态语言和动态语言的特点，而这一切都是由JVM（Java Virtual Machine）带来的。</p>

<p>纵观几种语言形态，可以发现一种典型的分层结构，源代码->（中间代码）-> 汇编代码 &ndash;> 机器代码。 扯一句淡，“任何的软件问题，都可以通过增加一层抽象层解决”。呵呵。</p>

<h4>OS</h4>

<p>提到Operating System（OS），大多数人可能很快想到Windows，Linux，Mac OS之类，会有少部分专业人员可能会直接想到Kernel。拿Linux来说，它本身就是指代一个操作系统内核的，说到Linux系统，则更为正式的称呼是GNU/Linux，而大家平常用的是各种Linux发行版（Linux Distro）。</p>

<p>OS做了什么？概括地来说，它是用户和硬件资源之间的一个接口，如果只有一个裸机放在用户面前，它本身是没有多少用处的（如果你想在它上面编辑一个文本文档，估计要自己写不少代码先），这个时候需要一个中间层，它能够替代用户管理裸机的各种硬件和资源，呈现给用户一个友好的，可用的，可操作的界面（嗯，就是图形用户界面或者终端界面了）。</p>

<p>那问题来了。OS是用什么写的？最开始的Linux是用C语言和内嵌汇编写的，现代的Windows是用C++写的，至于最开始Multics等鼻祖，我个人推测应该是纯汇编或者使用比较早期的高级语言吧（B语言？）。</p>

<p>那操作系统作为资源总管，需要提供相应的应用程序接口（API）给用户程序使用啊，否则操作系统只管资源，不让大家用，岂有此理！这就是传说中的系统调用（system call）？而且访问资源的时候，用户程序也不能胡来，那就分个界限吧，这就是我们常说的用户态和内核态（User space &amp;&amp; Kernel Space）？对应于CPU的目态和管态？</p>

<p>然而，切换是有开销的。</p>

<h4>CRT</h4>

<p>通俗地来说，应该讲讲Run Time。拿C语言来说，你的程序是从main开始执行的吗？从用户的角度来看，是的;但是从操作系统的角度，不是的。在你的程序能够正常工作之前，有太多的工作需要做，这就是runtime library需要负责的事情，大体上主要是I/O初始化以及内存的分配等等。</p>

<p>这又与应用程序的装载产生了联系，具体的细节一时半会也讲不清楚了。</p>

<h4>Stanard Library</h4>

<p>有了runtime library后，比如说有了C运行时，那么你用C语言写的代码，经过编译链接之后，可以正常运行，但前提是你必须使用C运行时提供的一些函数接口以及你自定义的一些函数接口。然而，在我们的日常事务处理中，有太多的操作是重复性的，可以被抽象出来给大家使用的，这就是语言标准库的由来？在遵循语言标准的基础之上，把一组常用的，通用的操作通过高效的实现写成接口库供用户调用。这无疑对生产力是一个巨大的提升，因为这样一来，你不必再去花心思想着如何去打开一个文件的实现细节了，你只需要用标准库的fopen即可。</p>

<p>像C语言的&lt;stdio.h>，&lt;stdlib.h>就是标准函数库提供的头文件。C++则在兼容C语言的基础之上有自己的标准库，还有大名鼎鼎的STL（Standard Template Library，已经被纳入C++标准）。</p>

<h4>API</h4>

<p>即应用程序接口（Application Interface），然而它本身也是一个普适的概念。在分层的软件架构中，下层提供给上层的接口都可以统称为API（我的个人理解）。</p>

<p>再泛化地来讲，可能需要大家认真去琢磨Interface这个概念了（硬件上，软件上，面向对象上，等等）。</p>

<hr />

<h3>看看他们怎么说</h3>

<p>网上关于CRT，Standard Library，OS的综合讨论并不太多，这里我挑几个典型的分析，简单概括一下原作者的看法。如果跟原文的意思有出入，请原作者包涵啦:&ndash;)</p>

<h4><a href="http://www.codeproject.com/Articles/22642/What-Every-Computer-Programmer-Should-Know-About-W#ContentsofC++StandardLibrary">What Every Computer Programmer Should Know About Windows API, CRT, and the Standard C++ Library</a></h4>

<p>一篇深入浅出的文章，虽然是以Windows平台为例，但是读者大可以举一反三，先来看张作者给出的图片：</p>

<p><img src="http://hustcalm.me/images/blog_images/relationship-between-windowsAPI-CRT-and-C++StandardLibrary.png"></p>

<p>典型的分层架构，清晰明了，虽然还有很多细节值得商榷，但是直观上的理解却是可以这样的。</p>

<p>之后作者还提到了Unicode的细节处理，C++标准库，跨平台，代码复用（静态链接 VS 动态链接）等，是一篇搞清基本概念的入门好文！</p>

<p>读英文有困难的同学，可以移步本文的中文版<a href="http://www.cnblogs.com/menggucaoyuan/archive/2011/06/09/2075910.html">程序员应该知道的关于Windows API、CRT和STL二三事</a>。</p>

<h4><a href="http://blog.csdn.net/lvan100/article/details/7687359">Windows API和C运行时库CRT的关系</a></h4>

<p>感觉本文的作者总是在纠结于<code>先有鸡还是先有蛋</code>的问题，而且对多平台的理解不够深入，更多的是被Windows这个平台限制住了。</p>

<p>C语言本身肯定是与平台无关的，当它跟平台有关的时候就是各个操作系统厂商实现C语言编译器和运行时以及标准库的时候了。操作系统本身用什么写都是可以的，因为最终都要编制成二进制的机器代码，而在开发操作系统的时候用到什么库之类的，则要依赖于开发操作系统本身的平台支持了。又回到了那个问题，在没有出现高级语言之前，大部分软件组件肯定是前辈们用汇编搞定，包括C语言编译器（当然也可能是其它的初级高级语言），一旦实现了成套的基础设施（编译器，链接器，装载器等），再利用这些构建工具去制造现代的软件就是顺理成章的事情了。</p>

<p>这里大家需要搞清楚的是，不管你的源代码写的是什么，计算机只认识机器代码，更加严格的是0和1。</p>

<h4><a href="http://www.cnblogs.com/chio/archive/2007/11/26/972152.html">C Runtime Library来历, API, MFC, ATL关系</a></h4>

<p>在转贴关于C Runtime Library之前的讨论感觉像是在鬼扯，<code>CRT原先是指Microsoft开发的C Runtime Library，用于操作系统的开发及运行</code>，看到这一句，基本注定以下的讨论可以停止了。</p>

<p>分割线下面的关于一些基本概念的解释有一定的可取之处，大家直接看分割线下面的即可，否则被上面那一部分耽误了！</p>

<h4><a href="http://www.cnblogs.com/aguncn/archive/2012/11/12/2766520.html">我自己关于C语言，编译器，标准库，GUN glibc,CRT ，API之类的理解。</a></h4>

<p>作者本人好像对这些概念也停留在一知半解的状态，因此上面的就当看看即可。下面的链接比较有可取之处，给出了C/C++标准库和运行时库的一些链接，首先是标准（出自ISO），之后分别给出了Microsoft和GNU的实现。</p>

<p>如果把文章那些有用的链接抽取出来，这篇文章就不用看了。有用的链接我在下面的资源整理中会给出原出处。</p>

<p><strong>总结：</strong></p>

<p>总得看来，第一篇文章的分析较有说服力，用词专业，对概念的解释也很清晰，但是作为入门级别的文章很难再把问题说得更加具体;而后面的文章的个人见解部分实在不敢恭维，而有用的部分大多又是转载其它文章的只言片语，因此不推荐大家看。</p>

<p>如果想弄清楚以上的概念和相互的关系，大家不必翻箱倒柜找各种文章了，直接看《程序员的自我修养-链接，装载与库》这本书好了。《程序员的自我修养》把程序的结构，编译，链接，装载，运行时之类的概念进行了深入的剖析，并且附带很生动的例子，中间还不时穿插编程中可能困惑你好久的小问题。写这篇文章的时候，我看完了第一部分，暂时跳过了第二，第三部分，正在看第四部分，感觉此书是深入理解系统底层奥秘的绝佳捷径！</p>

<hr />

<h3>C/C++资源一览</h3>

<p>正如C++之父Stroustrup所鼓励的，用库去扩展语言，而保持语言本身的简洁。所以除了C++标准库以外，出现了大量的第三方库，涉及程序开发的各个领域，可谓是百花齐放！</p>

<p>下面给出几个比较好的链接，每一个都值得大家阅读。</p>

<ul>
<li><a href="http://blog.csdn.net/netlinux/article/details/6700505">C/C++ 类库开发库参考</a></li>
<li><a href="http://www.kuqin.com/language/20090215/35005.html">C++资源之不完全导引</a></li>
<li><a href="http://blog.csdn.net/oanqoanq/article/details/7169291"> C++著名程序库的比较和学习经验</a></li>
<li><a href="http://www.kuqin.com/language/20090215/35004.html">C++开源跨平台类库及在VC++.net中应用的配置</a></li>
</ul>


<hr />

<h3>如何学习C/C++</h3>

<p>跟任何一门编程语言一样，大量的练习是必不可少的，但是在练习开始之前，我觉得首先要找到一个比较高效的方法。根据我个人的经验，比较好的学习方式是：</p>

<ul>
<li><p>找到一个学习的需求，为了学习而学习可能只会走马观花，如果实在没有什么需求，那就从写一个实用的小软件开始吧。</p></li>
<li><p>找到正确的入门书籍，谭老师的那本书我是强烈不推荐的，推荐看C语言三剑客《C和指针》，《C陷阱和缺陷》和《C专家编程》。C++的话，个人觉得《Essential C++》适合入门，C++ Primer适合当成参考书籍，其它的《Effective C++》等还没看过，不敢乱说。</p></li>
<li><p>边看边练，加深理解，拿指针为例，一定在从对应的内存关系去理解，就会感觉很自然，它不过是一个整形变量，指代一个内容地址而已;而变量本身就是某一个内存地址的抽象表示嘛。而不管指针的指针，还是什么，顺着下去也就比较好理解了，只是关系繁杂的时候需要仔细缕清楚。</p></li>
<li><p>基本熟悉之后，可以去试试一些框架，比如Qt，体会一下框架是如何在C++之上给开发者抽象了一层应用开发层的。</p></li>
<li><p>后面的，自行发挥想象力吧:&ndash;)</p></li>
</ul>


<hr />

<p><strong>综述：</strong></p>

<p>再次强调一下，写本文的目的，实则是想整理一下自己的思路，便于后面的深入学习。在参考各种文章的时候发现了一些瑕疵，忍不住再经过一反思考后评论一番，免得更多的人被误导。当然本人的水平也十分有限，行文很有可能有很多不到之处甚至错误，一些评论可能也有失偏颇。</p>

<p>如果发现了本文有哪些不足或者可以改进的地方，请留下评论或者联系我。如果本文可以帮助到你，请你把一些有用的地方传播给他人，以期帮助到更多的人！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes About IEEE 1394 AVT Cameras - FirePackage and OpenCV]]></title>
    <link href="http://hustcalm.me/blog/2013/12/10/notes-about-ieee-1394-avt-cameras-firepackage-and-opencv/"/>
    <updated>2013-12-10T21:10:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/12/10/notes-about-ieee-1394-avt-cameras-firepackage-and-opencv</id>
    <content type="html"><![CDATA[<p>I&rsquo;m trying to make AVT 1394 Cameras work with OpenCV using the standard <code>VideoCapture</code> recently but got no luck. Briefly speaking, OpenCV&rsquo;s support for camera input are <code>Operating System</code> and <code>Device Driver</code> aware.</p>

<p>In this post, I will give some basic related concepts related to Firewire(aka IEEE 1394) and AVT software packages, also OpenCV&rsquo;s <code>VideoCapture</code> workflow.</p>

<!--more-->


<hr />

<h3>FireWire</h3>

<p>Aka <a href="http://en.wikipedia.org/wiki/IEEE_1394">IEEE 1394</a>, it&rsquo;s a serial bus interface standard for high-speed communications and isochronous real-time data transfer, developed by <code>Apple</code> in early 1990s and called <code>FireWire</code>. The main competitor nowadays is <code>USB</code>.</p>

<p>For the official introduction part, you can refer to the wikipedia link above, I want to address two points here.</p>

<h4>Standards and versions</h4>

<p>The most used must be <code>1394a</code> and <code>1394b</code>, and to make things work, do pay some attention to your <code>1394 Host Controller</code>.</p>

<p>Unlike USB and USB 2.0, the physical interface between 1394a and 1394b is significantly different. As such, users will need to acquire cables with a 1394a (4-pin or 6-pin) connector on one end and a 1394b (9-pin) connector on the other. And a 1394a device would work connecting to a 1394b bus whereas one would fail vice versa.</p>

<h4>Pins of connector</h4>

<p>As for <code>1394a</code> and <code>1394b</code>, there are three kinds of connectors used: 4-pin, 6-pin and 9-pin. Hence there are kinds of cables connecting different styles of connectors list blow:</p>

<p><img src="http://connector.pinouts.ru/diagram/firewire_cable.gif" alt="FireWire Plug Connector at the cable" />.</p>

<p>Luck is you may get whatever cable to fullfil your need as long as you are connecting your device to a right bus.</p>

<p>For more details about the interface pinout, read this article <a href="http://pinouts.ru/Slots/ieee1394_pinout.shtml">FireWire (IEEE1394) bus interface pinout</a>.</p>

<hr />

<h3>AVT Cameras</h3>

<p><a href="http://www.alliedvisiontec.com">AVT</a> does manufacture so many cameras and provide great technical support. It&rsquo;s kind of a choice for you to choose between the software packages,seriously speaking.</p>

<h4>AVT Software Selector</h4>

<p>Now they are focusing on <a href="http://www.alliedvisiontec.com/apac/products/software/vimba-sdk.html">VIMBA</a> and maintain it actively.</p>

<p>However for the legacy ones, like <code>FirePackage</code>, <code>Universal Package</code>, etc, look into this link <a href="http://www.alliedvisiontec.com/de/produkte/legacy.html">Legacy Software (SDKs, Apps, Adapters, and Interfaces)</a>.</p>

<p>To select the software that suits you, refer to these links:</p>

<ul>
<li><a href="http://www.alliedvisiontec.com/apac/support/downloads/software.html">AVT Software Support</a></li>
<li><a href="http://1stvision.com/avt_downloads.htm">AVT Software Downloads for AVT Cameras</a></li>
<li><a href="http://www.alliedvisiontec.com/fileadmin/content/PDF/Software/AVT_software/AVT_software_stuff/AVTSoftwareSelectorGuide_v3.3.0.pdf">AVT Software Selector Guide</a></li>
</ul>


<h4>Inside FirePackage</h4>

<p>Although called legacy SDKs, FirePackage is widely used currently. For the main idea, you can give quick glimps for the documentation after installation and get a basic knowledge of <code>FireClass</code>, <code>FireCtrl</code>, <code>FireGrab</code> and <code>FireStack</code>.</p>

<p>For the package architecture,see this:
<img src="http://hustcalm.me/images/blog_images/architecture_of_AVT_FirePackage.png"></p>

<h4>AVT and OpenCV</h4>

<p>Bad luck that we can&rsquo;t use AVT cameras just with <code>VideoCapture</code> because that the cameras might use a device driver that OpenCV can&rsquo;t talk to.</p>

<p>However if your camera compliants with <a href="http://www.cs.cmu.edu/~iwan/1394/">CMU 1394 Digital Camera Driver</a>, probably you will be happy again:&ndash;)</p>

<hr />

<h3>OpenCV and Cameras</h3>

<p>Quote from this post <a href="https://pixhawk.ethz.ch/tutorials/camera/getting_started">Getting Started with OpenCV capturing</a>.</p>

<blockquote><p>  Currently two camera interfaces can be used on Windows: Video for Windows (VFW) and Matrox Imaging Library (MIL) and two on Linux: Video for Linux(V4L) and IEEE1394. For the latter there exists two implemented interfaces (CvCaptureCAM_DC1394_CPP and CvCapture_DC1394V2).</p></blockquote>

<p>Generaly speaking, your camera would probably work if it is <code>VFW</code> or <code>MIL</code> compliant under Windows or it suits to standard <code>V4L</code> or <code>IEEE1394</code> driver model.</p>

<p>But if not, you can even sub-class the <code>VideoCapture</code> class, and implement your camera driver to make it work seamlessly with OpenCV.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Httplib Httplib2 Urllib Urllib2-what's the Difference]]></title>
    <link href="http://hustcalm.me/blog/2013/11/14/httplib-httplib2-urllib-urllib2-whats-the-difference/"/>
    <updated>2013-11-14T11:24:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/11/14/httplib-httplib2-urllib-urllib2-whats-the-difference</id>
    <content type="html"><![CDATA[<p>Lots of people may got confused by the Python modules- <code>httplib, httplib2, urllib, urllib2</code>. Judge from their names, we may prefer the x2 module because they may be version 2 of the module and should work better. Maybe you are right for some degree(as for the httplib).</p>

<p>However, things are a little bit complicated which needs a brief explanation indeed.</p>

<!--more-->


<h2>What&rsquo;s the claim</h2>

<p>First, let&rsquo;s see what a specified module&rsquo;s aim. I will quote from the official site:&ndash;)</p>

<h3>httplib</h3>

<p><a href="http://docs.python.org/2/library/httplib.html">Here</a> is a link from <code>The Python Standard Library</code> for <code>Python 2.7.6</code>.</p>

<pre><code>This module defines classes which implement the client side of the HTTP and HTTPS protocols. 
It is normally not used directly — the module urllib uses it to handle URLs that use HTTP and HTTPS.
</code></pre>

<h3>httplib2</h3>

<p><a href="https://code.google.com/p/httplib2/">This</a> is the official website hosted on <code>Google Code</code>. It claims:</p>

<pre><code>A comprehensive HTTP client library that supports many features left out of other HTTP libraries.
</code></pre>

<p>and the <code>Project Goal</code>:</p>

<pre><code>To become a worthy addition to the standard Python library.
</code></pre>

<p>It features <code>HTTP and HTTPS</code>, <code>Keep-Alive</code>, <code>Authentication</code>(support <em>Digest</em>, <em>Basic</em>, <em>WSSE</em>, <em>HMAC Digest</em> and <em>Google Account Authentication</em>), <code>Caching</code>, <code>All Methods</code>, <code>Redirects</code>, <code>Compression</code>, <code>Lost update support</code> and <code>Unit Tested</code>.</p>

<h3>urllib</h3>

<p>Quote from <a href="http://docs.python.org/2/library/urllib.html">here</a>:</p>

<pre><code>This module provides a high-level interface for fetching data across the World Wide Web. 
In particular, the urlopen() function is similar to the built-in function open(), but accepts Universal Resource Locators (URLs) instead of filenames.  
Some restrictions apply — it can only open URLs for reading, and no seek operations are available.
</code></pre>

<h3>urllib2</h3>

<p><a href="http://docs.python.org/2/library/urllib2.html">The Standard Python Library</a> stats that:</p>

<pre><code>The urllib2 module defines functions and classes which help in opening URLs (mostly HTTP) in a complex world — basic and digest authentication, redirections, cookies and more.
It's an extensible library for opening URLs.
</code></pre>

<h2>What&rsquo;s the difference</h2>

<h3>httplibx and urllibx</h3>

<p><code>urllib/urllib2</code> is built on top of <code>httplib</code>. It offers more features than writing to <code>httplib</code> directly.
However, <code>httplib</code> gives you finer control over the underlying connections.</p>

<p>If you&rsquo;re dealing solely with HTTP/HTTPs and need access to HTTP specific stuff, use httplib.
For all other cases, use urllibx(note that <code>urllib and urllib2</code> have different capabilities, thus are always used together).</p>

<h3>httplib and httplib2</h3>

<p>Basically, httplib2 is <code>Google's python httplib implementation</code> but much more powerful.</p>

<p>They actually do the same things utilizing HTTP/HTTPs and other network protocals like FTP, typically we can call them <code>HTTP client library</code>.</p>

<p>If <code>httplib</code> can&rsquo;t fulfill your need(as if you need the <code>Redirects</code> feature), consider switching to <code>httplib2</code> then.</p>

<p>To make things simpler, I&rsquo;d rather using <code>httplib2</code> as my default <code>HTTP client library</code> for Python.</p>

<h3>urllib and urllib2</h3>

<p>Quote from this post <a href="http://www.hacksparrow.com/python-difference-between-urllib-and-urllib2.html">Python: difference between urllib and urllib2</a>:</p>

<p><code>urllib</code> and <code>urllib2</code> are both Python modules that do URL request related stuff but offer different functionalities. Their two most significant differences are listed below:</p>

<ul>
<li><code>urllib2</code> can accept a Request object to set the headers for a URL request, urllib accepts only a URL. That means, you cannot masquerade your User Agent string etc.</li>
<li><code>urllib</code> provides the urlencode method which is used for the generation of GET query strings, urllib2 doesn&rsquo;t have such a function. This is one of the reasons why urllib is often used along with urllib2.</li>
</ul>


<p><strong>Note</strong>:</p>

<p>The urllib module has been split into parts and renamed in Python 3 to <code>urllib.request</code>, <code>urllib.parse</code>, and <code>urllib.error</code>. The 2to3 tool will automatically adapt imports when converting your sources to Python 3. Also note that the urllib.urlopen() function has been removed in Python 3 in favor of urllib2.urlopen().</p>

<h2>Usage</h2>

<ul>
<li><a href="http://docs.python.org/2.7/howto/urllib2.html#urlerror">HOWTO Fetch Internet Resources Using urllib2</a></li>
<li><a href="http://www.pythonforbeginners.com/python-on-the-web/how-to-use-urllib2-in-python/">How to use urllib2 in Python</a></li>
<li><a href="http://adchoices.sinaapp.com/topic/47/python-%E6%A8%A1%E5%9D%97-httplib-urllib%E5%92%8Curllib2%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95">python 模块：httplib、urllib和urllib2的简单用法</a></li>
<li><a href="http://zhuoqiang.me/python-urllib2-usage.html">Python 标准库 urllib2 的使用细节</a></li>
<li><a href="http://httplib2.googlecode.com/hg/doc/html/libhttplib2.html">httplib2 v0.4 documentation</a></li>
</ul>


<h2>Reference</h2>

<ul>
<li><a href="http://www.hacksparrow.com/python-difference-between-urllib-and-urllib2.html">Python: difference between urllib and urllib2</a></li>
<li><a href="http://www.zacwitte.com/resolving-http-redirects-in-python">Resolving HTTP Redirects in Python</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install CentOS 6.4 Minial With Grub2 and a USB Stick - the Simple Way]]></title>
    <link href="http://hustcalm.me/blog/2013/11/04/install-centos-6-dot-4-minial-with-grub2-and-a-usb-stick-the-simple-way/"/>
    <updated>2013-11-04T17:08:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/11/04/install-centos-6-dot-4-minial-with-grub2-and-a-usb-stick-the-simple-way</id>
    <content type="html"><![CDATA[<p>What a shame that I failed over and over to just install CentOS 6.4 minimal to my Desktop PC!!!</p>

<p>I got a broken Ubuntu 12.04 on my hand with a working Grub2, cheers:&ndash;) Also, I luckily have a 4 GB USB stick(who esle dosen&rsquo;t,kidding).</p>

<h2>The Goal</h2>

<p>Install CentOS 6.4 minial with Grub2 and a single USB stick, making no bootable USB stick, but do some tricks with the ISO file instead.</p>

<!--more-->


<h2>Preparation</h2>

<p>In a nutshell, we need a working Grub(or other bootloaders, I use Grub2), a USB Stick with a vfat or ext2 partition and CentOS ISO file.</p>

<h3>Bootloader</h3>

<p>As I have a broken Ubuntu 12.04 and a already working Grub2, I would just go on.</p>

<p>However, you have many choices due to your OS. Such as:</p>

<ul>
<li>Grub Legacy</li>
<li>Grub4dos</li>
<li>EasyBCD</li>
</ul>


<h3>ISO</h3>

<p>Download it from a mirror that&rsquo;s close enough to you. Check out the <a href="http://isoredirect.centos.org/centos/6/isos/x86_64/">Mirror List</a> and I choose <a href="http://mirrors.163.com/centos/6.4/isos/x86_64/">mirrors.163.com</a>.</p>

<p>Save the <code>CentOS-6.4-x86_64-minimal.iso</code> to your hard drive.</p>

<h3>USB Stick</h3>

<p>According to the CentOS wiki, the installer will recognize ext2 or vfat. I choose vfat in my case.</p>

<p>My device on my Linuxmint shows /dev/sdb and the partition shows /dev/sdb1. Just ensure that you have a VFAT partition, other things don&rsquo;t matter too much really.</p>

<p>To play with device and partitions, you can use <code>fdisk</code> and <code>mkfs.*</code> or other tools that you favor.</p>

<h3>Extract Files</h3>

<p>I put the ISO file under <code>~/Downloads</code>. And I follow the instructions below:</p>

<pre><code>mkdir /mnt/centos
sudo mount -o loop -t iso9660 ~/Downloads/CentOS-6.4-x86_64-minimal.iso /mnt/centos
mkdir /mnt/usbdisk
mount /dev/sdb1 /mnt/usbdisk
cp -r /mnt/centos/isolinux /mnt/centos/images /mnt/usbdisk
sudo umount /mnt/centos
cp ~/Downloads/CentOS-6.4-x86_64-minimal.iso /mnt/usbdisk
sudo umount /mnt/usbdisk
</code></pre>

<p>After this, we have <code>CentOS-6.4-x86_64-minimal.iso</code>,<code>isolinux</code> and <code>images</code> on our USB Stick.</p>

<h2>Installation</h2>

<p>Now use Grub2 to boot into CentOS installation environment and complete the installation. I have a SATA hard disk locally and do remember <strong>CentOS installer will make your local hard disk to sdb or sdc, but not sda. The USB Stick will be sda during the installation.</strong></p>

<p>To enter Grub2 command line, press <code>SHIFT</code> when your PC boots, or you may miss the menu entry due to <strong>HIDDEN_TIMEOUT</strong> configruration. Then press <code>c</code> to get a command line.</p>

<p>Then follow the instructions below, you may adjust a little to suit your own PC.</p>

<pre><code>linux (hd1,msdos1)/isolinux/vmlinuz
initrd (hd1,msdos1)/isolinux/initrd.img
boot
</code></pre>

<p>When you prompt to select <code>Installation Method</code>, use <code>Hard Drive</code> and select <code>sda1</code>, follow the routine procedures and you are done:&ndash;)</p>

<p><strong>I tried <code>URL Method</code> but failed, either <code>mirrors.163.com</code> nor <code>mirrors.sohu.com</code> would work:&ndash;(</strong></p>

<h2>Summary</h2>

<p>All the essentials reside in Grub2 and isolinux or you may say bootloader and ISO stuff. Check them out and deep it for deep is the best way to solve varies of problems related to boot, installation and rescue.</p>

<p>You may install by other methods, CD-ROW, bootable USB Stick or whatever you like.</p>

<p>Enjoy the struggling and enjoy the gain!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing With Xen Under Centos6.4 to Build Your Own VPS]]></title>
    <link href="http://hustcalm.me/blog/2013/10/14/playing-with-xen-under-centos6-dot-4-to-build-your-own-vps/"/>
    <updated>2013-10-14T10:28:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/10/14/playing-with-xen-under-centos6-dot-4-to-build-your-own-vps</id>
    <content type="html"><![CDATA[<p>Believe it or not, we are under an age called Cloud Computing.</p>

<p>I used to be curious about VPS(Virtual Private Server), how they work, how to build them, etc. As far as I know, AWS, GCE or whatever else solutions depend heavily on Virtualization Technologies and AWS is definitly playing with Xen currently.</p>

<p>I would like very much to have a trial for building my own VPS and blow are my steps doing it. You may need to read some basic wikis about Xen, <a href="http://wiki.xen.org/wiki/Xen_Overview">Xen Overview</a> and <a href="http://wiki.xen.org/wiki/Xen_Beginners_Guide">Xen Beginners Guide</a> should do some help:&ndash;)</p>

<!--more-->


<h2>Getting a working Dom0 on Centos6.4</h2>

<h3>Install Centos</h3>

<p>Use whatever way you like, remember a <strong>minimal install</strong> is recommended.</p>

<h3>Install Xen</h3>

<p>Thanks to <strong>Xen4Centos</strong> Project, we can get Xen installed in several simple commands(log in as root).</p>

<pre><code>yum -y update
yum install centos-release-xen
yum install xen
/usr/bin/grub-bootxen.sh
reboot
</code></pre>

<p>After your machine comes to alive, simply type:</p>

<pre><code>uname -r
xl list
</code></pre>

<p>to verify that Xen Dom0 is running.</p>

<h3>Config network</h3>

<p>I use DHCP to get a valid IP for my box and there is a trick if you can&rsquo;t ping each other when two machinea are in the same LAN(probably the routing table is not working for you and just delete the record from your routing table).</p>

<p>As me, for example, my laptop got a IP, say 192.168.0.10 and my VPS got 192.168.0.11, but they can&rsquo;t talk to each:&ndash;(</p>

<p>First, check your routing table,</p>

<pre><code>route
</code></pre>

<p>Then, delete the record that is evil,</p>

<pre><code>route del -net 192.168.0.0 netmask 255.255.255.0
</code></pre>

<p><strong>Please substitute the parameters to suite your own networking</strong>.</p>

<p>After that, ping each other,</p>

<pre><code>ping 192.168.0.11
</code></pre>

<p>to verify the networking is good to go.</p>

<p>In order to give our DomUs valid IPs, we may use a network bridge, do as follows:</p>

<pre><code>yum -y install bridge-utils
cp /etc/sysconfig/network-scripts/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-xenbr0
</code></pre>

<p>My modified and working scripts look like this, for ifcfg-xenbr0:</p>

<pre><code>DEVICE=xenbr0
#HWADDR=00:24:E8:46:CC:C9
TYPE=bridge
#UUID=ff0ab497-0303-4dc3-b6f3-4a6cbd90466b
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=dhcp
</code></pre>

<p>And for ifcfg-eth0:</p>

<pre><code>DEVICE=eth0
HWADDR=00:24:E8:46:CC:C9
TYPE=Ethernet
UUID=ff0ab497-0303-4dc3-b6f3-4a6cbd90466b
ONBOOT=yes
NM_CONTROLLED=no
#BOOTPROTO=dhcp
BRIDGE=xenbr0
</code></pre>

<p><strong>For static IP configuration, please refer to Xen wiki page!</strong></p>

<p>Then, make the configuration work:</p>

<pre><code>service network restart
</code></pre>

<p>If you got errors such as <code>error:check cable</code>, do this manualy:</p>

<pre><code>ifup xenbr0
</code></pre>

<p>Verify it works by issuing:</p>

<pre><code>ifconfig xenbr0
</code></pre>

<h3>Diable SELinux</h3>

<p>Honestly speaking, I don&rsquo;t know WTF the real reason to do this, but people say <code>SELinux can really interfere with Xen</code>.</p>

<pre><code>sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
setenforce 0
</code></pre>

<p>You are good to go with a damn working Dom0 and congratulations!</p>

<h2>Bringing Your DomUs Up</h2>

<p>It&rsquo;s up to you to use PV or HVM, personally, I prefer to PV due to higher performance. But if you want a Windows(and other OS whose kernel can&rsquo;t be modified), HVM is your only choice.</p>

<p>As for me, I want 3 DomUs, namely Debian, Fedora and Arch Linux.</p>

<h3>Xen4Cli or Xen4Libvirt</h3>

<p>Xen4Cli(xm and xl, currently xm deprecated) are intended for advanced users looking to hand setup the network, the backing filestore and the xen environment. While Xen4Libvirt are for newbies looking for the easiest install path.</p>

<p>I prefer <code>xl</code> since I want to know what exactly is happening, and <code>xl</code> works for Debian and Arch Linux. However for Fedora, <code>Libvert</code> seems to be the right way(using <code>virt-install</code>).</p>

<p>To install Libvirt,</p>

<pre><code>yum install libvirt python-virtinst libvirt-daemon-xen
</code></pre>

<p>After the install, restart your Dom0 machine.</p>

<h3>File or LVM based backend</h3>

<p>Since Centos6.4 is shipped perfectly with LVM and also the default partition schema using LVM during OS Installation, I prefer <code>LVM</code>.</p>

<p>As for me, I do the following:</p>

<pre><code>lvresize -L -200G vg_centos6/lv_home -r
lvcreate -L 30G -n fedora vg_centos6
lvcreate -L 30G -n debian vg_centos6
lvcreate -L 30G -n archlinux vg_centos6
</code></pre>

<p>Then verify the Logical Volumes using:</p>

<pre><code>lvdisplay
</code></pre>

<p>Or</p>

<pre><code>lvs
</code></pre>

<p>If you are not familiar with LVM, search Google for a good tutorial first.</p>

<h3>Bridge, Routing or NAT</h3>

<p>Three networking modes are provided and choose one according to your own networking environment.</p>

<p>I got bridge working for me as described in above section.</p>

<p>For choosing other modes, you can modify <code>/etc/xen/xend-config.sxp</code> or explicitly passing as parameters when creating DomUs.</p>

<h3>Let DomUs fly</h3>

<h4>Debian</h4>

<p>I choose debian7.1 netinst.iso due to my poor bandwidth,</p>

<pre><code>wget -c http://mirrors.sohu.com/debian-cd/7.1.0/amd64/iso-cd/debian-7.1.0-amd64-netinst.iso
mount -o loop /path/to/debian-7.1.0-amd64-netinst.iso /mnt/debian
cp /mnt/debian/install.amd/xen/debian.cfg /etc/xen/
cd /etc/xen/
vi debian.cfg  ## Make modifications according to the comments
xl create -c debian.cfg
</code></pre>

<p>Then install Debian as a very normal one.</p>

<h4>Arch Linux</h4>

<p>I download archlinux-2013.10.01-dual.iso by issuing:</p>

<pre><code>wget http://mirrors.sohu.com/archlinux/iso/latest/archlinux-2013.10.01-dual.iso
</code></pre>

<p>Then create a arch.cfg file in <code>/etc/xen/</code> similar like:</p>

<pre><code># Refer to https://wiki.archlinux.org/index.php/Xen#Configuring_a_paravirtualized_.28PV.29_Arch_domU

name = "arch"
kernel = "/mnt/arch/arch/boot/x86_64/vmlinuz"
ramdisk = "/mnt/arch/arch/boot/x86_64/archiso.img"
extra = "archisobasedir=arch archisolabel=ARCH_201310"
memory = 512
disk = [ "phy:/dev/vg_centos6/archlinux,sda1,w", "file:/root/isos/arch/archlinux-2013.10.01-dual.iso,sdb,r" ]
vif = [ '' ]
</code></pre>

<p>After that, bring the DomU up by:</p>

<pre><code>mount /path/to/archlinux-2013.10.01-dual.iso /mnt/arch
cd /etc/xen/
xl create -c arch.cfg
</code></pre>

<p>Install your Arch Linux as you like since it&rsquo;s really a highly customized distro.</p>

<h4>Fedora</h4>

<p>Again I got Fedora-20-Alpha-x86_64-netinst.iso by issuing:</p>

<pre><code>wget http://download.fedoraproject.org/pub/fedora/linux/releases/test/20-Alpha/Fedora/x86_64/iso/Fedora-20-Alpha-x86_64-netinst.iso
</code></pre>

<p>However, nightmares begin since I want to install it using the Debian way. <code>xl</code> just fails to boot normally but <code>virt-install</code> does the job.</p>

<p>Using the <code>virt-install</code> method:</p>

<pre><code>virt-install --virt-type xen -n fedora19 -r 512 --vcpus=2 -f /dev/vg_centos6/fedora19 --location http://mirrors.163.com/fedora/releases/19/Fedora/x86_64/os/ --os-type linux --accelerate --nographics --network=bridge:xenbr0
</code></pre>

<p>Or you can download the ISO file first, then issuing your own httpd locally, thus making it:</p>

<pre><code>mount -o loop /path/to/fedora.iso /mnt/fedora
yum -y install httpd
service httpd start
ln -s /mnt/fedora /var/www/html
service iptables stop
virt-install --virt-type xen -n fedora19 -r 512 --vcpus=2 -f /dev/vg_centos6/fedora19 --location http://your.http.server.ip.address.here/ --os-type linux --accelerate --nographics --network=bridge:xenbr0
</code></pre>

<p>Remember this is for full Fedora installation, if you are using a netinst, you need to copy all the files to /var/www/html instead of creating a symbolic link and modify the .treeinfo file. No warrants here, since I did&rsquo;t try it myself.</p>

<h2>References</h2>

<ul>
<li><a href="http://wiki.centos.org/HowTos/Xen/Xen4QuickStart">Xen4 CentOS6 QuickStart</a></li>
<li><a href="http://wiki.centos.org/HowTos/Xen/Xen4QuickStart/Xen4Libvirt">Xen4 Libvirt for CentOS 6</a></li>
<li><a href="http://drewsymo.com/cloud-computing/install-xen-on-centos-and-create-a-fedora-debian-vm/">Install Xen 4 with Libvirt / XL on CentOS 6 (2013)</a></li>
<li><a href="http://www.howtoforge.com/virtualization-with-xen-on-centos-6.2-x86_64-paravirtualization-and-hardware-virtualization">Virtualization With Xen On CentOS 6.2 (x86_64) (Paravirtualization &amp; Hardware Virtualization)</a></li>
<li><a href="http://wiki.xen.org/wiki/Xen_Configuration_File_Options">Xen Configuration File Options</a></li>
<li><a href="http://xenbits.xen.org/docs/unstable/man/xl.cfg.5.html">XL Domain Configuration File Syntax</a></li>
<li><a href="http://wiki.xen.org/wiki/Network_Configuration_Examples_(Xen_4.1%2B">Network Configuration Examples (Xen 4.1+)</a>)</li>
<li><a href="http://wiki.xen.org/wiki/Debian_Guest_Installation_Using_Debian_Installer">Debian Guest Installation Using Debian Installer</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Xen">Xen For Arch Linux Wiki page</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Installation_Guide">Arch Linux Installation Guide</a></li>
<li><a href="http://bderzhavets.wordpress.com/2009/01/10/install-fedora-10-pv-domu-at-xen-331-centos-52-dom0-xen-330-intrepid-server-dom0-novells-xen-inified-kernel-via-local-apache-mirror/">Install Fedora 10 PV DomU at Xen 3.3.1 CentOS 5.2 Dom0 &amp; Xen 3.3.0 Intrepid Server Dom0 (Novell’s Xen-ified Kernel) via local Apache Mirror</a></li>
<li><a href="https://lists.fedoraproject.org/pipermail/xen/2012-November/005938.html">Installing a domU without virt-install Fedora-xen</a></li>
<li><a href="http://www.centos.bz/2012/03/centos-6-install-deploy-xen/">CentOS 6安装配置Xen</a></li>
<li><a href="http://www.cnblogs.com/hseagle/p/3299713.html">Archlinux 简明安装指南</a></li>
<li><a href="http://blog.csdn.net/holdsky/article/details/8497764">archlinux （2012.12.01-dual） i686 硬盘安装</a></li>
<li><a href="http://en.wikipedia.org/wiki/Xen">Xen</a></li>
<li><a href="http://wiki.xen.org/wiki/Choice_of_Toolstacks">Choice of Toolstacks</a>

<ul>
<li><a href="http://wiki.xen.org/wiki/XL_vs_Xend_Feature_Comparison">XL vs Xend Feature Comparison</a></li>
</ul>
</li>
</ul>


<hr />

<p>I do believe you will get lots of annoying problems while playing with Xen. Enjoy the problems and enjoy Xen:&ndash;)</p>
]]></content>
  </entry>
  
</feed>
