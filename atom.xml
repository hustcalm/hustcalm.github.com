<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to Pandora's Box(Why)]]></title>
  <link href="http://hustcalm.me/atom.xml" rel="self"/>
  <link href="http://hustcalm.me/"/>
  <updated>2013-05-05T22:42:20+08:00</updated>
  <id>http://hustcalm.me/</id>
  <author>
    <name><![CDATA[CALM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初识Go-Erlang-Dart]]></title>
    <link href="http://hustcalm.me/blog/2013/05/05/chu-shi-go-erlang-dart/"/>
    <updated>2013-05-05T21:38:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/05/05/chu-shi-go-erlang-dart</id>
    <content type="html"><![CDATA[<h2>Preface</h2>

<p>今天Beijing GDG的活动是编程语言沙龙，一口气了解了3种对我来说比较陌生的编程语言(Go, Erlang和Dart），感觉心情比较舒爽，感谢GDG的分享(@许士伟，@连城，@韩国恺，@各位组织者）。趁着脑子还有点热，写点东西谈谈自己的想法吧:-)</p>

<h2>Go</h2>

<p>跟Unix很有缘分，因为打造Go语言的那些大牛曾经参与过Unix操作系统的开发，C语言在Bell实验室内部的时候，他们也是最早的受众用户吧；后来，Plan 9操作系统的开发，他们也在其列，可惜Plan 9没火起来（在Unix编程艺术里面得知，Unix有一个低迷期，不知道是不是跟当时的大环境有关系）。然后，Unix中的精髓，在Go语言中体现为连接和组合，本质上还是管道和文本话协议吧，按照我的理解。</p>

<!--more-->


<p>讲师@许士伟，是七牛云存储的CEO，他们的产品是用Go打造的，在生产环境下经受得起考验，是对Go本身的最佳证明了。本来编程语言的Topic就不太好讲，许老师没有把重点放在实战上，而是就哲学层面展开叙述，主要讨论“连接和组合”是如何在Go中体现的，以及为何说Go是多种编程范式的。听了这个演讲，并不能马上上手Go，但是对于引发我们对编程语言设计哲学的思考是很有好处的。Go在刚推出的时候，主打自己是System Programming级别的，现在貌似是主打自己是作为通用语言设计的，也许是感觉自己的设计理念优秀吧，我个人研究不多，不敢妄加评论。目前Go的GC有停顿的现象，被某些反对者所诟病，不过，相信其GC会在后续的版本中得以增强！</p>

<p>等把《Unix编程艺术》读完了，再回过头来看看Go的设计，应该启发更大:-)</p>

<h2>Erlang</h2>

<p>很大程度上，今天是冲着Erlang去的，这学期的《多处理器系统编程》听得云里雾里，想看看有实际工程经验的人对应对“并发”会如何阐述。而今天不妄此行，讲师@连城显然对于Erlang有比较多的研究，从Erlang的历史，到核心理念和设计，以及OTP，涉及到很多有意思的东西。而从苛刻的电信生产环境中催生的Erlang，容错性和并发能力都是超一流的，其核心，在我看来是Isolate的理念以及消息传递的机制。故障隔离可以保证整个系统不会由于局部的罢工而停止运转，有效的故障隔离和修复，把复杂的系统分离开来，上层的hypervisor只执行简单的逻辑，以最大程度保证其逻辑的正确性，而实际的worker进程受到hypervisor的管辖，执行真正的处理任务，出了故障可以被hypervisor隔离或者修复（比如进程状态重置，又想起了七龙珠里面的那个boss了，连城的那个比喻很贴切）。讲到这里的时候，我很自然地联想到了Soalris的FMA（Fault Manager Architecutre，S10引入的新特性），其核心也是故障隔离以及自己修复（通过更换FRU或者重启Service，这里会跟SMF发生交互）。进程的通信不是简单的“共享内存”，而是拷贝式的消息传递，这里理解得不是很深入，就不多说了。</p>

<p>非SMP VM，64 bit，16GB RAM可以轻松跑700万进程，Erlang天然的并发处理能力可想而知，而这都是源于其优良的设计吧！之后讲到了Functional Programming的东西，简单说了Erlang对函数式编程的支持；后来的OTP，回忆不起来太多内容了，我的理解是，这是一个通用的，很nb的并行编程框架！忘了GC了，相对于JVM和Go的VM，Erlang的VM的GC实现算法更加高效，不过没怎么听懂&#8230;</p>

<p>时间关系，跳过了Q&amp;A环节，只能会后去问我的问题，“Erlang的设计在多处理器以及多核方面是如何考虑的？”。在Erlang出现的年代，多处理器还不太流行，因此对多处理器和多核的支持应该最近才添加进去。容易想到，有Erlang VM在中间，进程的调度全权尤其搞定，因此对于多处理器和多核的支持应该也是在VM那里下文章吧，具体不是很清楚，如果也是Isolate的原则+拷贝式消息传递，是不是Lockfree的呢？</p>

<p> 合影的时候，一个豆瓣的开发者（做平台的）简单给我讲了下Erlang对于多处理器和多核的支持，后来借机，问了些豆瓣的信息:-) 对那位帅哥说声感谢:-)</p>

<h2>Dart</h2>

<p>2009年才对外公布的语言，Chrome V8团队的新作，新的Dart VM比V8快了50%，而据Dart VM的作者说，Dart的速度应该是JavaScript的两倍（如果不准确，请韩老师指正）。</p>

<p>Dart应该是提供了Web开发的整个Stack了，从编程语言，到运行环境VM，调试环境Dartium（Chrome+Dart VM），再到Dart Editor(IDE)，一站式服务了:-) 不仅如此，还提供了dart2js，在于不支持Dart的环境中，可以编译成JavaScript运行，而且提供Source Map。感觉加以时日，Dart应该会超越JavaScript，受到web开发者的追捧！</p>

<p>韩老师介绍了Dart的很多feature，对OO的支持，数据和行为的一致性(不知道这样描述是否准确），getter/setter,语法本身的易上手（尽量采用大家已经熟悉的语法规则）。时间原因，韩老师讲的比较快，现在回忆不了太多了，等拿到了slides，自己再消化一下:-)</p>

<h2>Conclusion</h2>

<p>总体来讲，今天的编程语言沙龙让自己受益颇多，在C/C++，Java之外，大大拓展了自己的视野，也再一次坚定了自己尽快学习一门Functional Programming Language的决心！</p>

<p>再次感谢GDG的精彩活动，期待下一次技术分享会！自己作为一个学生，要努力接触并吸收新知识，有一天能够站在GDG的讲台上，给大家带来有趣有用的分享：-）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acronyms in Debian]]></title>
    <link href="http://hustcalm.me/blog/2013/05/01/acronyms-in-debian/"/>
    <updated>2013-05-01T23:27:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/05/01/acronyms-in-debian</id>
    <content type="html"><![CDATA[<p>Some acronyms in Debian world, confusing at first sight, hope this article can do some help:-)</p>

<h2>Roles</h2>

<ul>
<li>DPL: Debian Project Leader</li>
<li>DD: Debian Developer</li>
<li>DM: Debian Maintainer</li>
</ul>


<h2>Bugs</h2>

<ul>
<li>RFP: Request For Packaging</li>
<li>RFS: Request For Sponsor</li>
<li>ITP: Intent To Packagge</li>
</ul>


<!--more-->


<ul>
<li>RFH: Request For Help</li>
<li>RFA: Request For Adoption</li>
<li>O: Orphan</li>
<li>ITA: Intent To Adoption</li>
<li>WNPP: Work-Needing and Prospective Packages</li>
</ul>


<h2>Others</h2>

<ul>
<li>FTBFS: Failed To Build From Source</li>
<li>NMU: Non-Maintainer Upload</li>
<li>NM Process: New Maintainer Process</li>
<li>QA: Quality Assurance</li>
<li>i18n, i10n, m17n : internationalization, localization, multilingualization</li>
<li>.d.o: .debian.org</li>
<li>CVE: Common Vulnerabilities and Exposures</li>
<li>LP: launchpad</li>
</ul>


<h2>4Fun</h2>

<ul>
<li>IMHO: In My Humble Opinion</li>
<li>LOL: Laughing Out Loud</li>
</ul>


<p>If you have any to share, do leave a comment and I will add them to the article:-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 ABU Roboncon 国内赛总结]]></title>
    <link href="http://hustcalm.me/blog/2013/04/30/2012-abu-roboncon-guo-nei-sai-zong-jie/"/>
    <updated>2013-04-30T01:50:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/04/30/2012-abu-roboncon-guo-nei-sai-zong-jie</id>
    <content type="html"><![CDATA[<p>ABU的赛场离我已经快一年之久了，而这一年的任何一天都可以真切地回忆起备战的节奏，在地下室的紧张调试，在502的欢乐夜宵。2013的战役即将打响，主场是国防科大，不知道今年的格局又会是什么样，列强是否依旧强劲，弱旅中会不会杀出黑马！</p>

<p>为华中科大机器人团队祈祷，希望大家能够低调奋进，在最后的一个多月时间里面有所突破，不能说是弥补去年的缺憾，而是去争取自己的荣耀！</p>

<p>下面再把我在2012比赛后的个人总结贴到博客上，警醒自己，和，自己的队友和兄弟。</p>

<p><strong>正文开始：</strong></p>

<p>从败给国防科学技术大学的那一刻开始，脑子里不停地盘旋着机器人的身影，喝醉后的梦里，第二天的哈工大交流，T238次列车上，以及在北京的三天。多少次，我还固执地认为，比赛还没有结束，C机器人会不会再出什么问题？手动操作手的状态是否良好？可一切都结束了，就这么结束了，没什么不甘的其实，即使华中科大击败了国防科技大学，面对行云流水的电子科技大学，恐怕会沦为一个可笑的对手，即使侥幸拿到冠军，我们凭什么代表中国出战？</p>

<!--more-->


<p>痛定思痛，比赛的结束只能是意味着新的开始，回顾自己在华中科大CCTV机器人团队的一年，回忆和队友，和机器人一路走来，回想起和师兄的讨论甚至争执，更多的是反思和些许的遗憾，自己的遗憾和2012的遗憾。一直想要写些什么东西，在北京的时候就要动笔了，可是一直思忖再三，觉得思想还不成熟。之后就疯狂看队友的总结，看其它学校的总结，看到自己头晕看不下去了，这个时候才渐渐缕清思路，准备写点什么了。</p>

<p>无奈，回到学校还有让人万分DT的毕业设计，幸好12小时之内秒掉了。昨晚，队内总结会，老余凭着几张干巴巴的PPT拿我开刀，第一个发言，也罢，恰好可以打开思路，也起到抛砖引玉的效果。</p>

<p>废话少序，以下是我对华中科大CCTV机器人团队的一些想法，归到到底的终极目标是打造出一支强凝聚力，重情谊，骁勇善战的王牌之师！一切都才刚刚开始，希望华中科大CCTV机器人团队的路越走越宽！</p>

<h3>1、  队内沟通</h3>

<p>不多说，2012的伤悲之处。各个机器人的控制组和机械组人员之间，控制组人员之间都存在严重的沟通不足，更别说机器人和机器人之间的交流了，这就形成了一种各自为战的氛围，大大削弱了机器人团队的战斗力。自始至终，团队都没有很好地拿出应有的凝聚力和战斗力，当然在哈尔滨备赛时的团队风貌还是很不错的，但是为时已晚！</p>

<p>那么是什么导致我们沟通不畅呢？是人员配备不足，忙不完自己的工作吗？是都可以胜任自己的工作，不需要沟通吗？都不是，都是借口，归根到底是没有沟通的意识和热情，态度决定一切，有什么话都闷在心里，对自己，对他人，对团队都是一种极大的伤害。</p>

<p>因此，良好的沟通机制是保障团队高效的战斗力的基本保障，在入队之时，老队员需要有意地去引导大家进行沟通，形成一种良好的沟通机制，慢慢变成机器人团队的一种文化！</p>

<h3>2、  规范培训</h3>

<p>真的不能说去年的培训不合格，而是去年基本就没有培训，这对于团队今后的工作是埋下了地雷的。最后的结果就是浮沙筑高台，控制组调试机器人的过程中遇到各种问题，再回过头去学习，这样必然浪费了宝贵的调试时间，大大降低了调试的效率。</p>

<p>我的想法，培训分为技术培训和文化培训。其中技术培训分为基本的模块培训以及对新一年研发的规划，技术培训需要有一个规范化的手册，可以当成培训的教材，日后也可以成为队内的一个FAQ。至于技术培训的形式的话，讲座加实践，相应的理论讲过之后，就要求队员实际上手，对着上一届的机器人开始简单调试。除了掌握技术，还有些规范性的东西需要强调，比如烧写程序的时候注意不要断电，还有在调试过程中经常碰到的一些小bug，程序中的一些小陷阱。对于机械上的培训，可以从一些机构讲起，控制出身的我就不多说了。</p>

<p>文化培训对于组队的过程至关重要，初步想法是从上一届的比赛视频开始，从小组赛到淘汰赛认真地过一遍，增加对ABU比赛的感性认识，并带给队友一种紧张感和刺激感。另外，为了增加临场的感觉，针对某些经典比赛，把当年的老队员请过来，讲讲历史，让队员从历史中感受团队文件和ABU的精神！</p>

<h3>3、  慎重招新</h3>

<p>很认同胡雨滨的那句话，招新进来的不只是队友，还有敌人。这说明招新是多么关键，不得不慎重！ABU招新，既要找到技术牛人，也要找到勤勤恳恳之人，核心在于如何招到合适的人，能下定决心拼10个月的人。</p>

<p>根据以往招新的经验和教训，今年的招新有以下举措：</p>

<h4>（1）       加快招新的节奏</h4>

<p>比赛完之后就应该着手下一届的准备工作了，这一点对于一个想保持战斗力的队伍是必须的！因此今年把招新时间提前，分为前期小规模的兴趣小组招新以及后期的全校选拔！</p>

<h4>（2）       加大宣传力度</h4>

<p>低调归低调，为了招到对比赛有热情的人，招新宣传的覆盖面还是要做到位，比较理想的形式是搬着机器人做现场展示，有提问和互动，有的队友可能会认为这有点SB或者掉价。No，我觉得这正说明了机器人团队求贤若渴，总之比赛期间低调奋进，想招到人，就可以适当高调起来！</p>

<h4>（3）       精心选拔队友</h4>

<p>说实话，很难在几分钟完全认清一个人，但是有经验的招新人员的辨别能力普遍强一些！因此，招新的笔试需要提高质量，侧重技术点的同时，考察思维能力，这对方案的制定很重要。面试的时候务必请老队员过来把关，严格面试，进行压力面试，考察面试者的心理素质和反应能力。提问的时候可以问一些习惯问题，比如迟到，比如学习效率，比如大四除了比赛有没有别的安排，这样一来可以保证面试者的基本素质，二来可以确定面试者能否全身心投入，而后者往往更是比赛需要的。</p>

<p>如果条件允许的话，针对目前的技术积累和确定的研发方向，可以有目的地去招一些有特长的队员，这对于整个队伍的技术传承很有效果，每年机器人团队能有一项新的技术普及，几年积累下来是相当可观的。</p>

<h4>（4）       控制招新规模</h4>

<p>经过讨论，15个人的规模是比较理想的，按照三台机器人来计算，每台机器人4个人，2个控制组，2个机械组，另外3个电路组。但是为了队伍的弹性，适当多招3~5人。</p>

<h4>（5）       建立末位淘汰制</h4>

<p>为了增加队员的责任感，应该适当提高机器人团队的门槛，对于表现差的队员并屡教不改的，果断淘汰，合理的招新规模为末位淘汰制创造了条件。那么会不会出现淘汰多了，人手不足的情况？我相信，来报名参加比赛，并且通过我们招新的，混的毕竟是少数吧！</p>

<h3>4、  队内管理</h3>

<p>去年加入团队之后，小康反复说过几次，ABU这个比赛就是个工程项目！现在看来，我在一定程度上是认同的。应着项目管理的思维，我觉得既然是一个项目，就应该有相应的项目经理，有开发经理和测试经理，对应于团队角色恐怕就是队长和组长了。</p>

<p>但是ABU的这个团队尤其自身的很多特点，需要核心骨干的存在，去不断推动团队向前，但是任命队长或者组长难免出现不能服众的情况，即使任命技术大牛，也难免队员心里有疙瘩，有不爽。看到其它学校的总结，队长这个角色多少感到比较尴尬。</p>

<p>因此，ABU的队内管理是游走于自我管理和组织管理之间，看感觉又要有规矩，这种管理机制需要在建队的过程中队员之间形成默契。</p>

<h3>5、  技术积累</h3>

<p>比赛完第二天去哈工大参观交流，我被他们工作室墙壁上的海报吸引了。各种技术积累赫然出现在我眼前，并明显感觉到一种传承！应了那句话，比赛不只是你们这一年，比赛是多少代人的积累和沉淀，因此我们需要HUST ABU库，机械上表现为标准件，加工标准等等，而控制上变现为函数库和统一的API。</p>

<p>为了保持机器人团队技术的活力，下面罗列一些技术方向，所有的方向都需要一个长期的开发和积累过程。</p>

<h4>（1）       视觉</h4>

<h4>（2）       全向轮、麦轮</h4>

<h4>（3）       差速轮</h4>

<h4>（4）       激光雷达</h4>

<h4>（5）       Kinect</h4>

<h4>（6）       并联机械手</h4>

<h4>（7）       CAN总线分布式系统</h4>

<h4>（8）       寻线模块</h4>

<h4>（9）       气动技术</h4>

<h4>（10）   驱动器</h4>

<h4>（11）   陀螺仪</h4>

<h4>（12）   各种激光传感器</h4>

<h3>6、  团队发展</h3>

<p>团队的成长应该是伴随着技术的积累和提升，以及文化的沉淀！每年都力争有一些新的技术开发，唯有这样，才能保持团队的竞争力。</p>

<p>经费是限制团队发展的一个关键因素，现状是经费可以支撑我们做比赛，但是为了能够不停尝试新技术，并且给一些犀利的方案提供足够的资金支持，我觉得以后机器人团队自给自足必然是大势所趋！</p>

<p>无意间看到一句话，ABU团队管理与创业管理无异。先不讨论这个是否有道理，多多少少，我感觉备战ABU跟创业十分相似，一群疯子疯狂地追求自己的成功！机器人正在慢慢渗透到我们的生活中，最直观地，为企业输送技术（貌似产品级的东西咱们还不够档次），和企业合作，通过实际在机器人上运用改进其技术（武大用的驱动器貌似解决了厂家不少bug）。最理想的是，我们可以输出自己的产品，这样一来，貌似就是一个团队走向公司化了。有点乱，这个议题还是和大家继续讨论吧。</p>

<h3>7、  指导团队</h3>

<p>每一届新的比赛，决定今年能走多远的，指导团队的影响作用至少会占到30%，从招新到培训，到团队建设，到方案制定，再到联调指导，比赛策略制定，整个备赛和比赛的过程总会充满指导团队的身影，其重要程度不言而喻！</p>

<p>指导团队很重要的一点是如何和新队员沟通，亟其所需，在前期如何快速地指引他们上手，在技术上有所提升，并开始认同ABU的文化，很关键。而一旦新队员顺利上手了，这个时候指导团队应该果断退居二线，让新一届的队员们去做真正属于自己的比赛了。这个时候指导团队在新的团队困难的时候及时站出来，在他们需要督促的时候及时提醒，在他们取得成绩的时候适当鼓励，有没有觉得跟刚爹妈一样！没错，就是这样，作比赛辛苦，指导团队同样不轻松，甚至更辛苦！</p>

<p>更多地指导团队还是引导的作用吧，千万不要事事躬亲，也不要急躁，做好自己的引导作用，适当干预新团队的事务是ok的，过于干预的话只会招致反感。</p>

<h3>8、  方案定制</h3>

<p>单元验证，单元验证！你要做一台车出来，肯定不是一蹴而就的，根据功能点分解，看看每一个部分自己的设想有没有问题，能不能实现功能，够不够快，够不够稳。口说无凭，太多的理论计算也看不出什么，这是时候一定要做实验，有什么想法，尽管去做实验，各种实验，看看自己的这个方案设计是否靠谱！大家可能觉得这会耽误制作机器人的进度啊什么的，恰恰相反，磨刀不误砍柴工，单元验证做得好，出了机器人效果定当立竿见影，机器人制作过程中太多的想当然，最后只能是一台问题叠着问题，漏洞百出的机器人！</p>

<p>上一届比赛的机器人不拆，一来留给新队员上手用，二来可以用作单元验证！一代车不出加工件，基本完成了任务，再往下的路会顺畅很多，方案上才有可能越来越好！</p>

<h3>9、  外校交流</h3>

<p>知己知彼百战不殆！备赛的过程中积极地与其它学校交流，不经意地可能对我们方案上就有所冲击和启发，技术上的一些问题也可以跟他们交流，我想各个学校还是比较开明的，不至于做到技术保守什么的，关键还是看怎么交流！</p>

<p>这个最好专人去做，或者专门的小组去做，具体如何交流，就要看具体的比赛情况啦。</p>

<h3>10、              团队制度</h3>

<p>无规矩不成方圆，CCTV机器人团队需要有自己规范性的制度，主要总结以下几点：</p>

<h4>（1）       放假和请假制度</h4>

<p>一周的周日下午统一放假（当然时间需要新队员去协商），队员每个月最多可以请假三次，一次不超过半天，三次可以连着请，即可以一次请一天半。放假和请假需要根据机器人制作和调试的进度来，可以适当灵活。</p>

<h4>（2）       奖惩制度</h4>

<p>迟到是一只老虎，对团队建设很有害处！初步的奖惩如下，如果有队员迟到，全队一起做俯卧撑！如果队员提前或者超额完成任务，可以有一定自由自配的时间作为奖励！对每个队员进行绩效考核，进行贡献度的计算，奖惩分明，并与末位淘汰制结合起来。</p>

<h4>（3）       队员相互促进的机制</h4>

<p>制作队员面板，贴上队员照片和完成工作之类的。制作签到表，外出注明事项，方便机器人制作人员时间的协调，具体实施需要看试运行的效果！</p>

<h4>（4）       协调员的引入</h4>

<p>电科每台机器人都是有协调员的，具体什么工作职责也不是特别清楚，这方面可以先和电科的交流一下！</p>

<h4>（5）       联调规范性</h4>

<p>无须多说，联调的时候需要规范，严肃，尽量去模拟真实的比赛环境！单场联调，换场联调，干扰联调，模拟比赛，如果每一个环节都认真去做了，那么到了比赛场上我们的机器人不会惧怕任何一个对手！</p>

<h3>11、              杂记</h3>

<h4>（1）       机械上拉线和轴承盒的改进，考虑同步带或者其它结构</h4>

<h4>（2）       如何有效解决四轮着地的问题？</h4>

<h3>12、              待补充</h3>

<p><strong>言胜于行，执行力，执行力！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[彻底搞懂字符集和字符编码(Cooked from other posts)]]></title>
    <link href="http://hustcalm.me/blog/2013/04/06/che-di-gao-dong-zi-fu-ji-he-zi-fu-bian-ma-cooked-from-other-posts/"/>
    <updated>2013-04-06T12:08:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/04/06/che-di-gao-dong-zi-fu-ji-he-zi-fu-bian-ma-cooked-from-other-posts</id>
    <content type="html"><![CDATA[<p>ASCII,ANSI,Unicode,UTF-8,BOM,UCS,GB2312,GBK,GB18030,BIG5,Code Page&#8230; Blabla&#8230;</p>

<p>对于以上概念，你是否都理解了呢？下面，带着大家彻底搞懂字符集和字符编码的相关知识。我是读了别人的posts，然后cook出来，整理思路，所以需要大家边读边仔细阅读相应的post哦～</p>

<h2>入门篇</h2>

<p>首先，简单了解一下。</p>

<ul>
<li><a href="http://www.imkevinyang.com/2009/02/%E5%AD%97%E7%AC%A6%E7%BC%96%E8%A7%A3%E7%A0%81%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88ascii%EF%BC%8Cansi%EF%BC%8Cunicode%EF%BC%8Cutf-8%E5%8C%BA%E5%88%AB%EF%BC%89.html">字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）</a></li>
</ul>


<p>这篇文章，以类似《明朝那些事儿》的文笔，向大家介绍了”编码“的简史。</p>

<ul>
<li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">字符编码笔记：ASCII，Unicode和UTF-8</a></li>
</ul>


<p>阮一峰的博客，重点描述了ASCII和Unicode，并强调“<strong>UTF-8是Unicode的实现方式之一</strong>”，Little endian和Big endian的典故也说到了。跟上篇文章一样，适合入门。</p>

<h2>初级篇</h2>

<p>入门之后，需要搞清楚究竟“字符集”和“字符编码”是什么东东。</p>

<!--more-->


<ul>
<li><a href="http://www.iteye.com/topic/97803">深入了解字符集和编码</a></li>
</ul>


<p>这篇文章，给出了“字符集”和“字符编码”的“<strong>定义</strong>”，并对ANSI编码有了比较合理的解释（使用2个字节来代表一个字符的各种汉字延伸编码方式，称为ANSI编码。 在简体中文系统下，ANSI编码代表GB2312编码，在日文操作系统下，ANSI编码代表JIS编码。 ）这里也提到了BOM的概念，在“<strong>编程语言与编码</strong>”那里描述了编程语言对于内部字符串是如何进行编码的。</p>

<h2>中级篇</h2>

<p>在基本了解了“字符集”和“字符编码”是什么东东后，让我们再仔细看看主流的“字符集和编码”。</p>

<ul>
<li><a href="http://space.itpub.net/55022/viewspace-713849">各种字符集和编码详解</a></li>
</ul>


<p>本文也是按照“<strong>字符编码的历程</strong>”来展开，ASCII，ISO8859-1，GB2312，GBK，GB18030，BIG5，UCS，Unicode都说到了。而在编码方面，重点说了UTF-8，UTF-16，UTF-32，UTF-7。此外，提到了MIME（多用途网际邮件扩充协议），是现在邮件编码方式的主流，其中定义了两种编码方法Base64和QP（Quote-Pritable）。</p>

<h2>高级篇</h2>

<p>下面，更加细致地了解下“编码”是如何存储的，以及分析下优缺点。</p>

<ul>
<li><a href="http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html">字符集和字符编码（Charset &amp; Encoding）</a></li>
</ul>


<p>本文知识点比较系统，在看了以上的文章后，可以“<strong>系统</strong>”地整理下思路了。本文在描述了“ASCII字符集&amp;编码&#8221;,&#8221;GBXXXX字符集&amp;编码”以及“BIG5字符集&amp;编码”后，提出了“<strong>伟大的创想Unicode</strong>”。之后，又说到了“互联网传输”的编码问题，Accept-Charset/Accept-Encoding/Accept-Language/Content-Type/Content-Encoding/Content-Language。</p>

<h2>拾遗篇</h2>

<p>了解“<strong>字符集</strong>”和“<strong>字符编码</strong>”的主线了，可能还对一些常见的概念疑惑。下面的链接就一些概念进行了简明的解释。</p>

<ul>
<li><a href="http://bbs.chinaunix.net/thread-3610023-1-1.html">中文字符编码标准+Unicode+Code Page</a></li>
</ul>


<p>这里是想重点了解“<strong>Code Page</strong>”的，跟操作系统的实现有关。</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Code_page">Code page</a></li>
</ul>


<p>Code page is another term for character encoding. It consists of a table of values that describes the character set for a particular language. The term code page originated from IBM&#8217;s EBCDIC-based mainframe systems,[1] but many vendors use this term including Microsoft, SAP,[2] and Oracle Corporation.[3] Vendors often allocate their own code page number to a character encoding, even if it is better known by another name (for example UTF-8 character encoding has code page numbers 1208 at
IBM, 65001 at Microsoft, 4110 at SAP).</p>

<ul>
<li><a href="http://hi.baidu.com/kumosheng/item/0864400782d3df7abfe97e87">区位码和内码，外码，国标码</a></li>
</ul>


<p>我国“技术专家”的智慧结晶！看看汉字是怎么被编码的！～</p>

<ul>
<li><a href="http://www.htmer.com/article/232.htm">输入法中全角/半角的区别以及切换方法</a></li>
</ul>


<p>刚学输入法的时候，就一直被“全角”和“半角”折磨着，现在终于搞明白了！</p>

<h2>总结篇</h2>

<p>输入，编码，显示，存储，读取，解码，输出。</p>

<p>看来，不管什么东西，还是要从“操作系统”的层面去认识！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BIOS是如何被加载并执行的]]></title>
    <link href="http://hustcalm.me/blog/2013/03/13/biosshi-ru-he-bei-jia-zai-bing-zhi-xing-de/"/>
    <updated>2013-03-13T22:32:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/03/13/biosshi-ru-he-bei-jia-zai-bing-zhi-xing-de</id>
    <content type="html"><![CDATA[<p>最近在上杨立祥老师的《操作系统高级教程I》，主要讲述Linux 0.11是如何被加载到内存，并且开始接管计算机。那么系统是如何被加载并执行的呢？</p>

<p>基本上分为三步：</p>

<ul>
<li>（1）启动BIOS，准备实模式下的中断向量表和中断服务程序</li>
<li>（2）从启动盘加载操作系统到内存，加载操作系统程序的工作，由第一步准备好的中断服务程序完成</li>
<li>（3）为执行32位的main函数做过渡工作</li>
</ul>


<p>杨老师的书中，在BIOS启动之后的讲解都很清楚，唯一在BIOS启动那里，有点“犹抱琵琶半遮面”的感觉。我个人的理解是，整个计算机里面只有处理器（也就是CPU）可以“干活”，所以BIOS的启动肯定需要CPU的参与，那么指令执行的地方在哪里呢？本质上，指令执行都是在CPU的寄存器和运算单元那里完成的，为了完成复杂的运算，需要保存很多数据，所以需要内存访问的支持。</p>

<!--more-->


<p>而BIOS是被固化在EEPROM里面的，通过总线连接着主板上的南桥芯片（貌似现在已经取消了，anyway，BIOS是可以被CPU通过总线访问的）供CPU访问。问题是目前内存可用么？答案应该是不可用，因为需要初始化“memory
controller”，才能访问内存。那么代码在哪里执行呢？有个“就地执行”的概念，我本科在嵌入式组的时候，对这个东西只是感到神奇，并没有真正理解。现在看了汇编的一些东西，加上x86微机原理的东西，感觉“只要能够被CPU寻址，并且提供访问driver的存储器，理论上都可以执行代码”，记得“任何执行都发生在CPU内部”。</p>

<p>既然软件环境还没建立好，那么BIOS是如何开始被执行的呢？直觉上，想到了硬件的自启动。也就是加电后，CPU立即开始执行BIOS的代码，至于CPU如何知道运行那里的代码呢？涉及到硬件的东西，一时说不清楚。这里需要留意一个概念，就是CPU寻址和存储器编址，再具体来讲，就是ROM和RAM是如何统一编址的。现在还没要搞清楚具体机制，需要进一步的学习。</p>

<p>参考了stackoverflow上的一个<a href="http://stackoverflow.com/questions/5300527/do-normal-x86-or-amd-pcs-run-startup-bios-code-directly-from-rom-or-do-they-cop">讨论</a>：</p>

<p>It both directly executes from ROM and copies stuff into RAM.</p>

<p>On a modern x86 processor, the chipset memory controller is uninitialized at initial power-up, so there is no RAM available.</p>

<p>A modern BIOS is usually divided into two parts:</p>

<ul>
<li>Boot Block (early POST)</li>
<li>Compressed Area (mid-to-late POST)</li>
</ul>


<p>When the processor comes out of reset, it begins executing instructions at a fixed address in memory, called the &#8220;reset vector&#8221;. The BIOS flash chip is mapped to this address in memory. The processor simply starts executing instructions from this address.</p>

<p>The &#8220;Boot Block&#8221; refers to the BIOS code starting at the reset vector (plus a few JMPs). This is executed directly from ROM (memory controller isn&#8217;t up yet), so it is very slow.</p>

<p>The BIOS Boot Block generally does the following:</p>

<ul>
<li>1.Initialize the memory controller. (If you get a &#8220;memory not detected&#8221; beep code from a motherboard, it happens here.)</li>
<li>2.Perform a checksum on the Compressed Area to make sure the rest of the BIOS is free of corruption.</li>
<li>3.Jump into a Recovery Mode if any corruption is detected.</li>
<li>4.If the checksum passes, decompress the rest of the BIOS into RAM somewhere (typically below the 1MB boundary).</li>
<li>5.Jump to the decompressed code in RAM and continue with boot.</li>
</ul>


<p>A long road to go&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git和github的哲学和艺术]]></title>
    <link href="http://hustcalm.me/blog/2013/03/02/githe-githubde-zhe-xue-he-yi-zhu/"/>
    <updated>2013-03-02T11:27:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/03/02/githe-githubde-zhe-xue-he-yi-zhu</id>
    <content type="html"><![CDATA[<p>用git和github也有一段时间了，不过还是处于菜鸟阶段。基本上git涉及到version control的方方面面，而github就是程序员的集体智慧结晶和开源社会的伟大力量的体现了。</p>

<p>下面给出一些链接，涉及到git和github的入门，github的哲学，基于github和octopress搭建博客，git workflow，希望对大家有用。</p>

<ul>
<li><a href="http://www.yangzhiping.com/tech/git.html">Git与Github入门资料</a></li>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">octopress-像黑客一样写博客</a></li>
<li><a href="http://www.yangzhiping.com/tech/github.html#q5">如何高效利用GitHub</a></li>
<li><a href="http://scottchacon.com/2011/08/31/github-flow.html">GitHub Flow</a></li>
<li><a href="https://sandofsky.com/blog/git-workflow.html">Understanding the Git Workflow</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a></li>
</ul>


<p>Watch and Learn:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转来的，我每次看都有收获]]></title>
    <link href="http://hustcalm.me/blog/2013/01/31/zhuan-lai-de-%2Cwo-mei-ci-kan-du-you-shou-huo/"/>
    <updated>2013-01-31T18:27:00+08:00</updated>
    <id>http://hustcalm.me/blog/2013/01/31/zhuan-lai-de-,wo-mei-ci-kan-du-you-shou-huo</id>
    <content type="html"><![CDATA[<p>好久不更新blog了，说忙是撒谎，最近自己越发地想多思考些东西，偶然在网上看到这篇文章，现在抄一遍，给自己一个思考的空间。</p>

<p>1、98年 马化腾等一伙凑了50万创办了腾讯 没买房； 98年 史玉柱 借了50万搞脑白金 没买房； 99年 丁磊用50万创办了163.com 没买房； 99年 陈天桥炒股赚了50万 创办盛大，没买房；99年 马云等18人凑了50万 注册阿里巴巴 没买房。 如果当年他们用这50万买了房，现在估计还在还着银行的贷款吧。</p>

<p>2、年轻的我们必须懂得：1、你不勇敢，没人替你坚强。2、没有伞的孩子必须努力奔跑！3、自己选择的路，跪着也要把它走完。4、不要生气要争气，不要看破要突破，不要嫉妒要欣赏，不要拖延要积极，不要心动要行动。5、宁愿跑起来被绊倒无数次，也不愿意规规矩矩走一辈子。就算跌倒也要豪迈地笑。</p>

<p>3、人生三大遗憾：不会选择，不坚持选择，不断地选择；人生三不斗：不与君子斗名，不与小人斗利，不与天地斗巧；人生三修炼：看得透想得开，拿得起放得下，立得正行得稳；人生三大陷阱：大意，轻信，贪婪；人生三大悲哀：遇良师不学，遇良友不交，遇良机不握。人生三大不争：不与领导争锋，不与同事争宠，不与下级争功。</p>

<p>4、一个人，如果不逼自己一把，你根本不知道自己有多优秀。一个人，想要优秀，你必须要接受挑战；一个人，你想要尽快优秀，就要去寻找挑战。一个人，敢听真话，需要勇气；一个人敢说真话，需要魄力。一个人的知识，通过学习可以得到；一个人的成长，必须通过磨练。</p>

<!--more-->


<p>5、【最温暖的八种食物】（1）早上醒来后的一个煎蛋;（2）上班出门前塞在包里的一个苹果；（3）加班深夜回家后的一碗热汤；（4）睡觉前的一杯牛奶；（5）伏案工作时的一杯热茶；（6）生病卧床时的一碗白粥；（7）喝闷酒的时候一碟小菜；（8）酒醒后的一碗清汤面。《你吃到过几样呢？》</p>

<p>6、网易CEO丁磊说：“千万不要以为我是抱着一个伟大的理想去创办一个伟大的公司，我从来没有远大的理想，也没要想要成为一个很有钱的人。创办网易时我只是想做一个小老板，就想有个房子有辆汽车，不用准时上班，可以睡懒觉。我的梦想也是那么简单。”丁磊的话很实在。但是，现在创业已经不是那么简单了。</p>

<h2>7、人脉中需有的十一种职业人：（1）票贩子（2）旅行社（3）律师（4）人才市场/猎头公司（5）银行（6）当地公务人员/警察（7）名人（8）保险/金融/理财专家（9）维修人员（10）媒体联络人（11）医生/护士/养生专家。《你认识这十一种人吗？应心经营您的人脉关系！》</h2>

<p>8、【做人的底线】（1）不做第三者，即使再喜欢（2）骗我可以，如果被我知道超过两次，请你有多远滚多远（3）如果你拿我不当回事，我会以同样的方式对你（4）我可以装傻，但别认为窝真傻（5）我可以容忍，但别超过我的底线（6）我不是没脾气，只是不轻易发脾气（7）任何真话，我都能接受。</p>

<p>9、15岁觉得游泳难，放弃游泳，到18岁遇到一个你喜欢的人约你去游泳，你只好说“我不会耶”。18岁觉得英文难，放弃英文，28岁出现一个很棒但要会英文的工作，你只好说“我不会耶”。人生前期越嫌麻烦，越懒得学，后来就越可能错过让你动心的人和事，错过新风景。——蔡康永</p>

<p>10、25岁的英国士兵Barry Delaney穿着鲜亮的绿色吊带短裙和粉红腿套，在同胞好友Kevin Elliott的葬礼上哭得一塌糊涂，他俩是同在阿富汗执行任务的好友，他们之前有一个约定：无论谁先不幸归西，另一个都要穿女装亮相对方的葬礼，为那里灰暗的悲伤带去一丝亮色，很感人，一诺千金。《伟大的友谊，你有这样的朋友么？》</p>

<p>11、慢慢成熟的标志：（1）早上无论多困，也会马上起床上班；（2）喜欢吃家常便饭多于外面的餐馆；（3）喜欢隐身，网络签名长时间不更改；（4）喜欢看新闻多于看八卦；（5）打电话给朋友的次数少了；（6）可以让你开心的人或事，越来越少了；（7）没结果的事情，渐渐就少做了；（8）低落的时候选择一个人呆着。</p>

<p>12、美国旧金山有一老头查克费尼，穿旧衣服，戴烂手表，住出租屋，挤公交车。他为美国教育捐出了近20亿美元，还希望死前把仅有的40亿美金全部捐献给社会。在北京有个大富豪陈五喜，开豪车，住豪宅，吃大餐，手上戴大钻戒，投资房地产，同是还在民政部门领取低保，8年间共得到10万元的社会救助。《中美差异》</p>

<p>13、1931年的1月30日是世界现代史上灾难的一天，阿道夫·希特勒被任命为德国总理。他的名言：“消灭一个民族，首先瓦解它的文化；要瓦解它的文件，首先消灭承载它的语言；要消灭这种语言，首先从他们的学校里下手。”当今的中国大学里无论什么专业，英语是必修课，汉语却不是。</p>

<p>14、尼古拉斯·科波拉，它的亲叔叔叫弗朗西斯·科波拉，名满天下的《教父》的导演。这个小伙子后来去好莱坞混，为了以自己的实力打天下，故意改名叫尼古拉斯·凯奇。不想沾任何叔叔的光。中美文化的差异就在于此。《我爸是李刚》</p>

<p>15、【让你成熟至少5岁的8句话】（1）如果你不喜欢现在的工作，要么辞职不干，要么闭嘴不言。（2）学会忍受孤独。（3）不要像玻璃那样脆弱，做个内心强大的人。（4）管住自己的嘴巴。（5）会创造机会。（6）若电话老是不响，你该打出去。（7）不要草率结婚。（8）写出你一生要做的事情，把单子发在皮夹里，经常拿出来看。</p>

<p>16、今年，年仅26岁的Facebook的创始人马克·扎克伯格，以40亿美元身价登上2010福布斯全球最年轻富豪榜榜首。目前已把自己过半财产捐献给慈善事业。扎克伯格拥有亿万身家，但他至今仍和华裔女友普莉希拉·陈生活在一套租来的住房里，每天走路上班或骑自行车上班。</p>

<p>17、澳大利亚老板帕尔默，他说：人每次只能睡一张床，吃一顿饭，架一辆车，跟一个女人一起，所以窝决定分一些给大家。为了感谢员工帮助他将企业扭亏为盈，他送给员工55辆奔驰，让750名员工出国度假，宴请2000名员工及家属。员工们兴奋地说，这样的老板，令我倾120%力量去工作。 《神奇的领导力，无处不在》</p>

<p>18、1992年一艘从中国出发的货船在太平洋上遭遇强烈风暴，船上一个装满2.9万只塑料玩具鸭的集装箱坠入大海。令人难以置信的是，其中一万多只玩具鸭组成的“鸭子舰队”在海洋上漂流了14年之后，竟抵达英国海岸。后来，这些鸭子售价激涨百倍。一个人的价值并不在其出身，而在于他谱写什么样的人生履历。</p>

<p>19、80后/90后的通病：（1）近视；（2）月光族；（3）喜欢Money；（4）从不锻炼身体；（5）一日三餐没有规律；（6）路盲，没有方向感；（7）搞不清楚自己的血型；（8）有一颗狠宅狠宅的心；（9）做事情都是三分钟热度；（10）经常午夜12点以后才睡觉。 《三条没有你就是神了》</p>

<p>20、母亲一生的六个谎言：（1）（童年时）快吃吧，我不饿；（2）（少年时，深夜做针线活）快睡吧，我不困；（3）（高考路上）快喝吧，我不渴；（4）（参加工作，母亲生病时）你赶快去工作吧，我很好；（5）（给母亲寄钱）你用，我有钱；（6）（买房接她住）城里，我不习惯。 愿天下的母亲健康长寿！ 《到了毕业的这个时候，更能体会妈妈的良苦用心，好好去爱她！》</p>

<p>21、【永远都不要做的事】（1）跟知己上床（2）和情人结婚（3）把同事当成朋友（4）到朋友公司打工（5）在上司面前知无不言（6）轻信上司的许诺（7）喜怒哀乐斗挂在脸上（8）在人堆里大声讲手机（9）习惯于给自己找借口（10）超车过去，看开着车有着窈窕背影的MM的脸（11）对MM的字信以为真（12）指望前女友回心转意。</p>

<p>22、【成功者的习惯】（1）微笑（2）气质纯朴（3）不向朋友借钱（4）背后说别人好话（5）听到某人说别人坏话时只微笑（6）过去的事不让人全知道（7）尊敬不喜欢你的人（8）对事无情，对人有情（9）多做自我批评（10）为别人喝彩（11）感恩（12）学会聆听（13）说话时常用我们开头（14）少说话（15）喜欢自己</p>

<p>23、可敬可畏：1、日本电视台用中文进行广播，通知人们地震情况、躲避方式；2、每个家庭都有急救小包，包括药物、手摇式发电收音机；3、9级大震后东京建筑几乎安然无恙，尤其是人们避难时都井然有序的站在道路两侧尽量不阻碍交通，撤离后无一垃圾。日本是个危机意识、集体主义、纪律性极强的国家！</p>

<p> 24、【建立人脉的15个提示】1、学会换位思考；2、学会适应环境；3、学会大方；4、学会低调；5、嘴要甜；6、有礼貌；7、言多必失；8、学会感恩；9、遵守时间；10、信守诺言；11、学会忍耐；12、有一颗平常心；13、学会赞扬别人；14、待上以敬，待下以宽；15、经常检讨自己。</p>

<p> 25、55年前，就读于浙江大学的法国女子丹尼和中国学生袁迪宝相恋，但袁已婚了。1956年，丹尼伤痛中离开了中国。最初还通信，但慢慢就断了来往。去年初，袁试探着给丹尼写信，竟然回复了。9月，两人重逢第三天在厦门结婚，83岁的丹妮第一次穿上了婚纱。爱，它确实存在。《我相信爱情，你呢？》</p>

<p> 26、让你少奋斗10年的工作经验：1不要停留在心灵的舒适区域；2不要把好像、大概、晚些时候、或者、说不定之类的话放在嘴边；3不要拖延工作；4不要认为理论上可以实施就大功告成了；5不要让别人等你；6不要认为细节不重要；7不要表现得消极；8不要把改善工作能力仅寄托在公司培训上；9不要推卸责任。</p>

<p> 27、人平均一辈子只有7次决定人生走向的机会，两次机会间相隔约7年，大概25岁后开始出现机会，75岁以后就不会有什么机会了。这50年里的7次机会，第一次不易抓到，因为太年轻，最后一次也不用抓，因为太老，这样只剩5次了，这5次机会里又有两次不小心错过，所以实际上只有3次机会了。——哈佛的一项调查报告</p>

<p>28、职场情商训练7法:1、把看不顺的人看顺；2、把看不起的人看起；3、把不想做的事做好；4、把想不通的事想通；5、把快骂出的话收回；6、把咽不下气的咽下；7、把想放纵的心收住；——你不需每时每刻这样做，但这样多做几回，你就会：1、情商高了2、职位升了3、工资涨了4、人爽了。</p>

<p> 29、泰勒语录：（1）我拥有一个女人的身体和一个孩子的情感。（2）我只和与我结婚的男人上过床。有多少女人敢这么说？（3）如果有人笨到花100万美元为我拍张照片，我当然不会笨到拒绝他。（4） 成功是一种了不起的除臭剂。它能带走所有你过去的味道。（5）我不会假装是个平凡的家庭主妇。</p>

<p> 30、她原系徐州女排队员，22岁嫁给50岁的cherry获绿卡后离婚、经新男友引荐入读耶鲁大学。96年旅行结识同座的starTV副总，经推荐在香港实习。97年晚宴她将一杯红酒洒在“传媒大亨”默多克身上，3年后他不顾家人反对而离婚并迎娶她。4年后她以高科技为他生下两个继承数十亿美金的女儿。她就是邓文迪。《运气总是留给有预谋的人》</p>

<p> 31、我年轻时曾与我们州最漂亮的女孩约会，但最后没有成功。我听说她后来离过三次婚，如果我们当时真在一起，我都无法想象未来会怎么样。所以，其实你人生中最重要的决定是跟什么人结婚！在选择伴侣上，如果你错了，将让你损失很多。而且，损失不仅仅是金钱上的。（BY巴菲特：结婚才是人生最大投资）</p>

<p> 32、盖茨39岁成世界首富，陈天桥31岁成中国首富，孙中山28岁创办兴中会，王然23岁当局长，孙权19岁据江东，丁俊晖15岁拿世界冠军，邓波儿7岁拿奥斯卡，贝多芬4岁开始作曲，葫芦娃刚出生就打妖怪。你说我们急不急。《我确实着急了！》</p>

<p>33、理查森，男，纽约。从1984年起连续五次投资失败。2007彻底破产，妻离子散，朋友消遁，唯有一条名叫JOOY的狗与其不离不弃，忠伴左右,陪理查森一同在纽约的风雨街头乞讨。从“JOOY”安详恬静的睡姿中看得出它对主人的无限信任和依靠。有的人，在沧海变成桑田时，表现得还不如一条狗。《认识的人多了，我就喜欢了狗》</p>

<p>34、教父经典台词：1、不要让别人知道你的想法。 2、当你说不时，你要使不听上去象是一样好听。 3、让朋友低估你的优点，让敌人高估你的缺点。4、痛苦不象死亡那样无可挽回！5、如果你没有时间和家人在一起，你就永远无法成为真正的男人。 6、永远不要恨你的敌人 ，因为这会影响你的判断力。</p>

<p> 35、觉得自己做得到和做不到，其实只在一念之间。自己要先看得起自己，别人才会看得起你。一切伟大的行动和思想，都有一个微不足道的开始。有理想在的地方，地狱就是天堂；有希望在的地方，痛苦也成欢乐。乐观者在困难中看到机会；悲观者在机会中看到苦难。理想的路总是为有信心的人预备着。－－﹣李嘉诚。</p>

<p>36、女名叫安-德纳姆,生在美国堪萨斯。18岁的安在异族通婚非法的年代嫁给了一个非洲黑人留学生。后来，安和丈夫离婚成了单身母亲，她靠食品优惠券生活，是美国医保系统受害者，在重病时恳求保险公司赔付。然而她的孩子，图片里装扮成海盗的小孩，日后成了美利坚合众国第44任总统，巴拉克-奥巴马。《不要因为出身而看不起任何人！》</p>

<p> 37、阿米尔汗，8岁时出演一部轰动印度的电影，是公认的童星，长大后却一心打网球并获得过网球冠军。21岁爱上邻居家女孩，由于宗教原因两人决定私奔，现在过着幸福美满的生活。他是演员/制片人/导演。81届奥斯卡最佳影片《贫民窟的百万富翁》就是他担当的制片，2009年一部《三个白痴》震惊全球，他45岁。《你相信坚持的力量么？》</p>

<p> 38、陈佩斯，因为央视出版他的小品而不给钱，较真打官司，遂被彻底封杀。此后陈消失，陈夫妇上山种树，脸朝黄土背朝天，两年获利30万。陈佩斯哭了，还想再演戏，可依旧被封杀，就砸30万改演话剧，第一部舞台喜剧《托儿》，在全国各地连续演出达120场，票房近4000万元，创造了当今话剧界无法超越的神话。《我就想说一句话：是金子在哪都发光。。。》</p>

<p> 39、她，37岁，癌症晚期。他，42岁，为筹钱给她治病，盗窃一辆电动自行车而入狱，刑期4年。2010年11月12日，他两人在监狱里举行了简单的婚礼，但这场童话般的婚礼，却让在场的数百位嘉宾感动得潸然泪下。偷辆电动车刑期4年，李刚儿子撞死人才3年。无语！一条人命还不如架电动单车。《生活在这个让人苦恼的社会》</p>

<p> 40、天下只有两种人。比如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留到最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里最好的；第二种人应该悲观，因为他每吃一颗都是吃剩的葡萄里最坏的。不过事实却适得其反，缘故是第二种人还有希望，第一种人只有回忆。——钱钟书。《你是哪种人？》</p>

<p> 41、他出身于书香门第，父亲是大学教授。他为爱妻，20年来从不上CCAV；他是个好爸爸；他顾家，厌恶应酬，滴酒不沾；他才华横溢，琴棋书画样样精通，学生时是体育全能，探戈高手；他饱读诗书，季羡林赞他可胜任北大的研究生导师，曾与钱钟书是忘年之交，他说他只是个戏子。他就是陈道明。一个很给力的男人。</p>

<p> 42、旧上海黑社会老大杜月笙的经典语录：1、做人有三碗面最难吃：人面、场面、情面。2、头等人，有本事没脾气；二等人，有本事有脾气；末等人，没本事大脾气。3、人可以不识字，但不能不识人。4、钱财用的完，交情吃不光。所以别人存钱，我存交情。存钱再多不过金山银海，交情用起来好比天地难量。</p>

<p>43、成功根本没有秘诀，如果有的话，就只 有两个：第一个是坚持到底，永不放弃；第二个就是当你想放弃的时候，请回过头来再照着第一个秘诀去做。——丘吉尔</p>

<p> 44、他，21岁，生意失败。22岁，州议员落选。24岁，生意再败。26岁，爱侣去世。27岁，一度精神崩溃。36岁，众议员落选。45岁，参议员落选。47岁，提名副总统落选。49岁时，参议员落选。52岁，当选美国第十六任总统。他叫林肯，坚信上帝的延迟，并不是上帝的拒绝，最终成就不凡。</p>

<p> 45、善良的苏格兰农夫从粪池救出一个小男孩，男孩的绅士父亲酬谢，农夫拒。绅士说：让我们签个协议，我带走你的孩子，给他最好的教育，农夫允。农夫的孩子后来发明了青霉素，获得诺奖。数年后，绅士的儿子得了肺炎，青霉素治好了他。这两个孩子分别是弗莱明和丘吉尔。 《冥冥之中，自有天意》</p>

<p><strong>PS:</strong>
文中的故事不一定属实，也可能会看起来有些娇揉造作，不过这些都不重要。取其精华，踏下心来看，多少有些收获！</p>

<p>还是那句话，路漫漫其修远兮，吾将上下而求索。行胜于言，当言则言！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[诫子书]]></title>
    <link href="http://hustcalm.me/blog/2012/12/23/jie-zi-shu/"/>
    <updated>2012-12-23T23:25:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/12/23/jie-zi-shu</id>
    <content type="html"><![CDATA[<p>夫君子之行，静以修身，俭以养德。</p>

<p>非淡泊无以明志，非宁静无以致远。夫学须静也，才须学也，非学无以广才，非志无以成学。慆慢则不能研精，险躁则不能理性。</p>

<p>年与时驰，意与岁去，遂成枯落，多不接世。悲叹穷庐，将复何及！</p>

<p><strong>自勉！</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享一些有用的机器学习方面的链接]]></title>
    <link href="http://hustcalm.me/blog/2012/11/30/fen-xiang-yi-xie-you-yong-de-ji-qi-xue-xi-fang-mian-de-lian-jie/"/>
    <updated>2012-11-30T19:37:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/11/30/fen-xiang-yi-xie-you-yong-de-ji-qi-xue-xi-fang-mian-de-lian-jie</id>
    <content type="html"><![CDATA[<p>被机器学习上了不要紧，要紧的是你都不知道上你的是机器学习。发现学了机器学习之后，自残情绪剧增，分享几个优秀的机器学习方面的链接了以慰藉。</p>

<ul>
<li><a href="http://blog.csdn.net/shfkuang/article/details/7772935">机器学习与计算机视觉大牛族谱</a></li>
<li><a href="http://doctorimage.cn/2012/11/19/maching-learning-computer-vison-family-sites/">机器学习与计算机视觉大牛族谱和链接</a></li>
<li><a href="http://blog.csdn.net/j_study/article/details/7903302">人工智能、机器学习、计算机视觉（整理）</a></li>
<li><a href="http://blog.csdn.net/j_study/article/details/7903823">计算机视觉方面的会议、期刊</a></li>
<li><a href="http://blog.csdn.net/j_study/article/details/7938982">《SCI》、《EI》、《ISTP》简介</a></li>
<li><a href="http://shijuanfeng.blogbus.com/logs/216968430.html">计算机视觉与图像处理、模式识别、机器学习学科之间的关系</a></li>
<li><a href="http://wenku.baidu.com/course/view/49e8b8f67c1cfad6195fa705">机器学习Machine Learning百度课程-龙星计划</a></li>
<li><a href="http://cs229.stanford.edu/">CS229 Machine Learning Stanford</a></li>
<li><a href="http://mldemos.epfl.ch/">MLDemos可视化机器学习资源</a></li>
</ul>


<p>学。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[纪念一下刚刚过去的BLUG 2012]]></title>
    <link href="http://hustcalm.me/blog/2012/11/25/ji-nian-yi-xia-gang-gang-guo-qu-de-blug-2012/"/>
    <updated>2012-11-25T01:30:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/11/25/ji-nian-yi-xia-gang-gang-guo-qu-de-blug-2012</id>
    <content type="html"><![CDATA[<p>挺high的一个party，nice game， nice food， nice guys!!!</p>

<p>嗯，北理工的xy大哥，北邮的ysr兄弟，清华的fxt师兄，澳大利亚的richard，SUSE的Shawn，幽默的ABC，给力的<a href="http://blug.chinalug.org">BLUG</a>!</p>

<p>加入了OpenDrone小组，希望能在这里找到乐趣:)</p>

<p>Safe and sound, finally I got what I want.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress From Ubuntu 12.04]]></title>
    <link href="http://hustcalm.me/blog/2012/11/24/hello-octopress-from-ubuntu-12-dot-04/"/>
    <updated>2012-11-24T01:00:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/11/24/hello-octopress-from-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>今天又把Octopress博客安了一个新家，Windows XP下虚拟出来的Ubuntu 12.04.想想从Cygwin上开始建立博客，后来到Ubuntu 11.04上维护，现在又搭一个新窝，自己都佩服自己的折腾能力了:)</p>

<p>遇到的主要问题，除了<code>posix-spawn</code>，竟然还有<code>openssl</code>，随之而来的依赖缺失，mkmf，编译的时候又输给了路径问题，Ubuntu本身带着1.8.7的<code>ruby</code>，而现在我的Octopress使用<code>1.9.3-p194</code>，并且用了<code>rbenv</code>和<code>ruby-build</code>进行版本管理，这给编译<code>openssl</code>的时候带来一个困扰，直接在<code>ext/openssl</code>下运行<code>ruby
extconf.rb</code>的话生成的Makefile是依赖系统的1.8.7的，因为直接执行<code>ruby</code>，由于路径设置问题，运行的是系统的Ruby，而不是我们自己安装的，所以这里需要小心，通过<code>~/.rbenv/versions/1.9.3-p194/bin/ruby extconf.rb</code>解决问题。</p>

<p>参考的链接有以下，感谢他们：</p>

<!--more-->


<ul>
<li><a href="http://www.360doc.com/content/12/0216/16/1016783_187128091.shtml">为已经存在的github Octopress配置本地环境</a></li>
<li><a href="http://madeye.me/2011/12/17/setup-octopress-on-windows">在Cygwin中搭建Octopress环境</a></li>
<li><a href="http://ns2.beta4better.org/2012/01/octopress-no-such-file-to-load-zlib-or-openssl.html">Octopress:no such file to load:zlib,openssl</a></li>
<li><a href="http://blog.csdn.net/dqatsh/article/details/2125089">ubuntu下安装ruby后openssl找不到的问题</a></li>
<li><a href="http://www.myexception.cn/ruby-rails/665543.html">in &#8216;require&#8217;:no such file to load -openssl (LoadError)</a></li>
<li><a href="http://www.linuxdiyf.com/viewarticle.php?id=68545">安装ruby-debug-base是mkmf(LoadError)问题的解决办法</a></li>
</ul>


<p>暂时就这么多了，发现有问题才比较有意思。</p>

<p>如果你在设置Octopress的时候有任何疑问，欢迎和我讨论:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科苑有感]]></title>
    <link href="http://hustcalm.me/blog/2012/11/21/ke-yuan-you-gan/"/>
    <updated>2012-11-21T17:58:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/11/21/ke-yuan-you-gan</id>
    <content type="html"><![CDATA[<p>想想也好久不更新博客了，一是没啥写的，另外就是没时间！</p>

<p>那么我去做什么了呢？想想自己来到科苑已经有三个月了快，回顾下自己的生活，谈谈自己的感受。</p>

<h2>考试</h2>

<p>最近的话题是考试。没完没了的考试，《随机过程》，《模式识别》，《数值分析》还有刚刚考完的《机器学习》，而为了这些考试，已经几个周末没有放松过了。时间回退到一年前，我会想到自己会考这些吗？来到科苑三个月，我再一次知道自己有多菜，科研的路有多长，<!--more-->任何一门课想要学好，都要投入大量的时间，实实在在的，因为这不是为了高考做题目，也不是为本科搞GPA而学（我不得不承认，我好像不怎么考虑GPA），那么这是为什么呢？通俗地说是本事，学名点叫做技能，不做，想在科苑混，几门课都学不好，那还有什么好谈的？因此，现在一听到科学泰斗，一听到学术牛人，我必须是十分佩服的。耐得住寂寞又能在学术上有所发挥，这本身就是一件很了不起的事情。</p>

<h2>考试之外</h2>

<p>说完考试，说说考试以外的东西，成然，我不是为了考试而考试，我对同学们也总是这么说。不怕考试，就怕学不会啊。拿机器学习来说，可能很多同学认为会挂，甚至埋怨老师的题库就是个谎言，仔细想想这有什么呢？就算考试自我感觉很理想，那么开课两个月的机器学习，我们究竟学到了哪些东西呢？线性回归，支持向量机等等，考试之外，我们能拿来做什么？？？</p>

<h2>我还在忙什么？</h2>

<p>占据了很多时间应该属于VLC播放器开发团队的事情吧，作为一个网络协作开发的团队，前期的代价很高，目前整个仍在磨合期，不过相信一定会越走越好。</p>

<h3>关于Linux</h3>

<p>大一的时候就开始接触了Linux，在Dian也有很多的Linux高手，最近发现自己的Linux技能马马虎虎，需要加强实践能力。个人感觉centos作为服务器，对用户很有好，至少从我知道的Unix的哲学来看，比较符合Unix的传统，Ubuntu的Server没有怎么用过，但是Canonical的过多改进反而会让系统管理员无所适从。Red Hat在全球服务器市场的地位真不是盖的。之后还是要从APUE什么的出发，以不变应万变。</p>

<h3>VLC中文社区</h3>

<p>在centos上花了半天时间搭建的<a href="http://vlcchina.org">VLC中文社区</a>是VLC中国开发团队走出的社区化的第一步，现在还很不成熟，典型的LAMP架构，由drupal驱动，相关的服务器端支持，用的最省事的yum安装，今后准备加上Nginx跟Apache协同做Server，Profile必须尽快做下，访问速度现在不堪忍受。作为一个出发点，向<a href="http://videolan.org">VideoLAN</a>看齐！</p>

<h3>VLC中文WIKI</h3>

<p>基于mediawiki，花了三个小时搭建，最后的short_URLS问题竟然没有配置好，姑且先这样。今后陆续的VLC WIKI的中文化会展开，希望感兴趣的朋友联系我，一起为开源社区做贡献。</p>

<h3>VLC开发工作</h3>

<p>开发团队处于初期，壮大的过程中也在走向成熟，目前的不乐观终將经过大家的努力变得乐观起来。为自己加油！</p>

<h2>关于以后</h2>

<p>路是自己走出来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A stupid tutorial on starting contribution to Opensource software]]></title>
    <link href="http://hustcalm.me/blog/2012/11/02/a-stupid-tutorial-on-starting-contribution-to-opensource-software/"/>
    <updated>2012-11-02T16:32:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/11/02/a-stupid-tutorial-on-starting-contribution-to-opensource-software</id>
    <content type="html"><![CDATA[<p><strong>Anyone</strong> who&#8217;s not a nerd can get on boat after this stupid tutorial, I guess.     <br/>
<strong>All</strong> you need is passion before contributing to An Open Source Project and some learning about their workflow maybe.   <br/>
<strong>Open Source</strong> projects need help and every project owner does know this. Besides writing code, they got lots of to do, finding and reporting bugs, do documentation, answer questions on forums or IRC channels, some translation, etc.</p>

<p>And today I want to simply talk about how to get startted on Open Source Community.</p>

<h2>Knowing about Workflow</h2>

<p>Right, we should start here.You want to get involed, you got to know the game rules and how the work is done. Basically,most open source projects have their version control system, their bug trackers, their mailing lists, their IRC channels and their wiki of courese, maybe they also have a forum.</p>

<!--more-->


<p>Do read about the wiki pages and I think you should get on feet after that.</p>

<h2>Get familiar</h2>

<p>As soon as you know how is everyting being done, you may start to think about to do something. So how to start? Suscribe their mailing lists, go around the forums, to introduce yourself on IRC and just show up to let people know you:)If you are a coder, then go to the bug tracker system, doing some easy hacks to get to know the whole world.</p>

<p>What? Don&#8217;t know any code or sth? Don&#8217;t worry, try to do some translation if possible or just use the software and see if everyting is going ok. If
not, of course, search the bug tracker, if you confirm this is a new bug ,report it and describe it as the way other people do.</p>

<p>Maybe several days later, people will know you and appreciate your contribution. If not, don&#8217;t get depressed, just hang on and your efforts will pay.</p>

<p>Of course get no happy? Switch to a new project as you like:)</p>

<h2>Do Thins Right</h2>

<p>Let&#8217;s say you have been enjoying involed in the project and maybe it&#8217;s time to do something more. But remember everything must be obey the game rules:)</p>

<p>Make patches and submit it to the developers(of course via emails) and be caution don&#8217;t make any unnecessary minor changes.</p>

<h2>New ideas</h2>

<p>As you are doing more and more contribution, maybe you got some good ideas to enhence the project。Don&#8217;t hesitate to write the maintainer of the project and get feedback about your thoughts, let other people know it and discuss if it is worth it.</p>

<h2>Help others</h2>

<p>You know what? You have earned much knowledge about the project after some strugellings though. Sure you would be happy to help the newbies to get on track. So don&#8217;t be mean to ask questions and reply emails if you can.</p>

<h2>What&#8217;s Next</h2>

<p>As you have completely got knowledge about contributing to Open Source Project, you are free to broaden your horizon now. Choose some other projects that interest you or even get your own project open sourced and enjoy the cooperation with people from every corner in the world:)</p>

<h2>Referencs</h2>

<ul>
<li><a href="http://www.kegel.com/academy/opensource.html">Contributing to Open Source Projects HOWTO</a></li>
<li><a href="http://reinh.com/blog/2009/03/02/a-git-workflow-for-agile-teams.html">A Git Workflow for Agile Teams</a></li>
</ul>


<p><strong>Hope you enjoy the life with the Opensource Community:)</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用ifttt和Openshift搭建用于知识共享的Wordpress博客]]></title>
    <link href="http://hustcalm.me/blog/2012/10/30/yong-ifttthe-openshiftda-jian-yong-yu-zhi-shi-gong-xiang-de-wordpressbo-ke/"/>
    <updated>2012-10-30T10:18:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/10/30/yong-ifttthe-openshiftda-jian-yong-yu-zhi-shi-gong-xiang-de-wordpressbo-ke</id>
    <content type="html"><![CDATA[<p>笔者一直通过RSS订阅了解一些行业信息并且看一些比较好玩的东西，比如<a href="http://www.iplaysoft.com/">异次元软件世界</a>什么的:)用了很长一段时间的QQ邮箱的阅读空间，整理了很多的收藏和分享以及自己的Tag Cloud，无奈，QQ邮箱的阅读空间除了对<a href="http://weibo.com/u/1236738912">Weibo</a>比较友好以外，跟其它产品的交互比较弱，给QQ团队发建议希望他们能够提供导出Tag的功能，没人搭理:(</p>

<p>Anyway，现在转到Google Reader下了，把QQ邮箱的阅读空间的RSS导出到OPML文件，之后导入到GReader。</p>

<p>分享是学习的一大乐趣，之前一直是把好文分享到微博或者Delicious，现在萌生了把自己的订阅再挑选一些值得玩味的文章自动更新到blog的想法。互联网的神奇使得我的这个想法很快就实现了，主要用到的服务如下：</p>

<!--more-->


<ul>
<li><p><a href="http://www.ifttt.com">ifttt</a>
实现GReader星标文章自动post到WordPress站点。</p></li>
<li><p><a href="http://openshift.redhat.com">Openshift</a>
提供Wordpress站点的托管。</p></li>
<li><p><a href="http://wordpress.org">WordPress</a>
不解释。用到了一些插件：</p></li>
</ul>


<p><strong>Akismet</strong> 用于处理垃圾评论。</p>

<p><strong>Auto Describe Taxonomies</strong> 自动生成文章的tag和category。</p>

<p><strong>Efficient Related Posts</strong> 显示相关文章。</p>

<p><strong>WP Limit Posts Automatically</strong> 显示文章摘要而不是全文。</p>

<p><strong>WTI Like Post</strong> 实现文章的“thumbs up“和”thumbs down“功能。</p>

<p>效果请看<a href="http://wordpress-hustcalm.rhcloud.com">笔者的知识分享站点</a>.</p>

<p>Enjoy auto blogging and knowledge sharring；）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用PortableApps.com制作自己的U3盘，实现PC Anywhere]]></title>
    <link href="http://hustcalm.me/blog/2012/10/24/shi-yong-portableapps-dot-comzhi-zuo-zi-ji-de-u3pan-%2Cshi-xian-pc-anywhere/"/>
    <updated>2012-10-24T23:55:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/10/24/shi-yong-portableapps-dot-comzhi-zuo-zi-ji-de-u3pan-,shi-xian-pc-anywhere</id>
    <content type="html"><![CDATA[<p>现在绿化软件的方法层出不穷，主流的云端软件平台以及ThinAPP基本都是在一个SandBox中运行软件，实现所谓的绿色化。今天向大家推荐一款绿色软件平台<a href="http://portableapps.com">PortableApps.com</a>，具体实现机理没有研究，不过使用起来觉得较好，关于是可以安装到U盘中随身携带，碰到了脾气不好的电脑，很有可能就派上用场了，呵呵:)</p>

<!--more-->


<p>具体如何安装什么的，就不罗嗦了，标准的Windows软件的安装和使用方法，目前<a href="http://portableapps.com">PortableApps.com</a>支持所有的Windows系列系统以及Linux下的Wine，下面只给出链接，想用的朋友自行下载安装折腾吧:)</p>

<ul>
<li><a href="http://portableapps.com">PortableApps.com的官方主页</a>     <br/>
其下载链接是在<a href="http://sourceforge.net">SourceForge</a>上的，有可能需要梯子，如果有困难，可以移步别处下载。</li>
<li><a href="http://portableapps.com/development">PortableApps.Development</a>       <br/>
教你怎么制作自己的绿色软件，当然是符合一定规范的，这里有可以折腾的地方。</li>
<li><a href="http://www.portableappc.com">PortableApps.com的中文站点</a>     <br/>
这里有一些比较大型软件的绿化，比如QQ，迅雷，WPS等等，有需要的朋友就有福啦:)而官方站点通常是一些国外的软件，而且基本上都是比较轻量级的。</li>
<li><a href="http://www.portableappc.com/guide">PortableApps.com的中文开发指引</a>   <br/>
个人认为这个开发指引还是比较赞的，可以给没有多少软件开发功底的同学一个制作软件的机会，有开发基础的也可以学习下PortableApps.com的软件格式约定。</li>
<li><a href="http://portableappz.blogspot.com">PortableAppZ</a>      <br/>
这是一个山寨版，相比于官方的只提供开源软件，PortableAppZ提供很多常用的软件，不过访问blogspot比较困难，希望的朋友自己想办法吧&#8230;</li>
</ul>


<p>除了这个，我特别喜欢微软收购的一个公司开发的一个工具套件<a href="http://www.systeminternals.com">SystemInternals</a>，把它作为系统system32目录下系统工具的一个补充，没有用的朋友可以试试。</p>

<p><strong>有更好的办法或者很酷的绿化软件的方法，请留言分享:)</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[盘点我知道的代码托管站点：Code Hosting Website]]></title>
    <link href="http://hustcalm.me/blog/2012/10/24/pan-dian-wo-zhi-dao-de-dai-ma-tuo-guan-zhan-dian-%3Acode-hosting-website/"/>
    <updated>2012-10-24T23:13:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/10/24/pan-dian-wo-zhi-dao-de-dai-ma-tuo-guan-zhan-dian-:code-hosting-website</id>
    <content type="html"><![CDATA[<p>伴随着开源运动的发展，源码托管站点越来越流行了，提供托管服务的同时，大大促进了开源社区的交流并且加速了源码的共享和更新，下面罗列下我所知道的提供源码托管服务的站点，供大家参考。</p>

<ul>
<li><p><a href="http://sourceforge.net">SourceForge</a>     <br/>
我最早知道的源码托管站点，上面托管了很多有名的项目和软件，现在很多开源软件的下载链接来自于<a href="http://sourceforge.net">SourceForge</a>，比如Python的一些扩展依赖包，编译VLC所需的很多contrib，vim插件需要的ctags以及cscope等等。GFW曾对其不友好，前段时间由于国内用户在其上托管了过多垃圾站点而遭到了<a href="http://sourceforge.net">SourceForge</a>的反封锁。由于其比较有历史，很多协同开发用SVN甚至CVS多一些。</p></li>
<li><p><a href="http://code.google.com">GoogleCode</a>       <!--more-->
大名鼎鼎的Google出品，界面简洁，并结合了<a href="http://developers.google.com">Google Developers</a>，上面也有不少的知名项目，我最近用的PMTK3（机器学习的工具包）就是托管在其上的，但好像一直以来<a href="http://code.google.com">GoogleCode</a>都不是特别火，我也不知道原因。版本控制方面，全面支持SVN,Git,Mercurial等等，我个人比较信赖Google的服务。</p></li>
<li><p><a href="https://bitbucket.org">BitBucket</a>    <br/>
这个貌似在国外用户比较多，知道这个站点是因为PT的缘故，当时追溯PT源码的历史，了解到了TBSource，知道是托管在<a href="https://bitbucket.org">BitBucket</a>上的。后来研究播放器的开发，知道了优秀的射手播放器（SPlayer）的源码是托管在其上的，这个站点比较偏好使用Mercurial和git貌似。</p></li>
<li><p><a href="http://www.codeproject.com">CodeProject</a>     <br/>
知道这个站点是因为自己在学习Windows编程的时候，这上面有很多的小例子的源码，是一个非常好的学习的地方。与其说是源码托管站点，更确切的是一个交流代码，相互学习的地方。有点像StackOverflow，不过这里更多是用代码交流。</p></li>
<li><p><a href="https://github.com">GitHub</a>      <br/>
好吧，最后才说这个大腕，只是因为最近<a href="https://github.com">GitHub</a>太火太火了，压轴出场。相比于其它的源码托管站点，其在功能方面未必见长，不过其Social Coding的理念以及和git的完美结合，吸引了不少coder和project来此安家。比如说ruby，很多vim的插件等等，具体的无需多说，谁用谁知道:)</p></li>
</ul>


<p>欢迎大家访问<a href="https://github.com/hustcalm">我的Github</a>。我的这个<a href="http://hustcalm.me">Octopress博客</a>也是托管在GitHub Pages之上的，使用了<a href="http://jekyllbootstrap.com">Jekyll</a>静态网站生成引擎。</p>

<p><strong>我就知道这么多了，有知道更多的朋友，欢迎留言补充:)</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git的global config和repo config]]></title>
    <link href="http://hustcalm.me/blog/2012/10/23/gitde-globle-confighe-repo-config/"/>
    <updated>2012-10-23T18:26:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/10/23/gitde-globle-confighe-repo-config</id>
    <content type="html"><![CDATA[<p>相比于CVS，SVN，现在越来越喜欢Git了，下面说说Git的全局配置，即global config以及代码库级别的配置，即repo config。</p>

<h2>Global Config</h2>

<p>git的全局配置，存储在$HOME/.gitconfig这个文件里面，对当前用户的所有git repo有效。</p>

<h3>基本配置</h3>

<pre><code>git config --global user.name yourname
git config --global user.email youremail
</code></pre>

<h3>默认编辑器</h3>

<pre><code>git config --global core.editor vim
</code></pre>

<h3>默认merge/diff工具</h3>

<p>设置后需要通过difftool和mergetool启动。</p>

<pre><code>git config --global diff.tool vimdiff
git config --global difftool.prompt false
</code></pre>

<h3>Alias设置别名</h3>

<p>通过别名设置，提高操作效率。</p>

<!--more-->


<p>分支切换</p>

<pre><code>git config --global alias.br branch
git br
</code></pre>

<p>查看日志</p>

<pre><code>git config --global alias.last log --pretty=oneline -1 HEAD
git last
</code></pre>

<p>设置difftool</p>

<pre><code>git config --global alias.df difftool
git df
</code></pre>

<p>提交代码</p>

<pre><code>git config --global alias.cm commit
</code></pre>

<p>查看版本库状态</p>

<pre><code>git config --global alias.st status
</code></pre>

<p>查看远程版本库</p>

<pre><code>git config --global alias.re remote
</code></pre>

<h2>Repo Config</h2>

<p>repo级别的配置，存储在仓库目录的.git/config文件中，可以覆盖全局信息。如果用不同的用户名和邮箱参加不同的项目，这里设置即可，还包括
不同项目git使用习惯的一些不同。
配置命令如下：</p>

<pre><code>git config user.name yournewname
git config user.email yournewemail
</code></pre>

<p>git本身也会存储远程仓库以及分支列表等信息：</p>

<pre><code>cat .git/config
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://f2e.us/wiki/git-config.html#!/">Frank Xu</a></li>
<li><a href="http://www.kernel.org/pub/software/scm/git/docs/git-config.html">git-config</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年亚太大学生机器人大赛CCTV视频汇总]]></title>
    <link href="http://hustcalm.me/blog/2012/10/23/2012nian-ya-tai-da-xue-sheng-ji-qi-ren-da-sai-cctvshi-pin-hui-zong/"/>
    <updated>2012-10-23T17:55:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/10/23/2012nian-ya-tai-da-xue-sheng-ji-qi-ren-da-sai-cctvshi-pin-hui-zong</id>
    <content type="html"><![CDATA[<p>央视终于在CCTV7播出了2012年亚太大学生机器人大赛的国内选拔赛的视频以及国际赛视频，现在把视频链接整理如下，方便各位Roboconer以及热爱机器人的朋友查看。</p>

<ul>
<li><a href="http://tv.cntv.cn/videoset/C39764">央视比赛视频列表链接</a></li>
<li><a href="http://tv.cntv.cn/video/C39764/20121015100904">《2012年亚太大学生机器人大赛国内选拔活动 初试锋芒》</a></li>
<li><a href="http://tv.cntv.cn/video/C39764/20121016100798">《2012年亚太大学生机器人大赛国内选拔活动 独门秘笈》</a></li>
<li><a href="http://tv.cntv.cn/video/C39764/20121017101086">《2012年亚太大学生机器人大赛国内选拔活动 侠路相逢》</a></li>
<li><a href="http://tv.cntv.cn/video/C39764/20121018100886">《2012年亚太大学生机器人大赛国内选拔活动 出奇制胜》</a></li>
<li><a href="http://tv.cntv.cn/video/C39764/20121019100811">《2012年亚太大学生机器人大赛国内选拔活动 巅峰对决》</a></li>
<li><a href="http://tv.cntv.cn/video/C39764/20121020100533">《2012年亚太大学生机器人大赛国内选拔活动 智者无敌（香港总决赛）》</a></li>
</ul>


<p>Anyway,thx to CCTV!   <br/>
<strong>Hust Go and China Go!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu桌面管理器Unity快捷键大全]]></title>
    <link href="http://hustcalm.me/blog/2012/10/21/ubuntuzhuo-mian-guan-li-qi-unitykuai-jie-jian-da-quan/"/>
    <updated>2012-10-21T10:24:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/10/21/ubuntuzhuo-mian-guan-li-qi-unitykuai-jie-jian-da-quan</id>
    <content type="html"><![CDATA[<p>在Windows下用惯了TotalCommander了，结合Windows本身的资源管理器，会使工作的效率有质的飞跃，如果要投个票，这个软件必须是Life Changing的:) 在Linux下的桌面管理器很多，重量级的经典的Gnome和KDE，以及很多轻量级的桌面管理器，Ubuntu开发团队为用户提供了他们自家的Unity，个人觉得还是非常好用的:) <br/>
下面这篇文章来自<a href="http://www.askubuntu.com/questions/28086/what-are-unitys-keyboard-and-mouse-shortcuts">askubuntu</a>，这里除了一个比较全面的回答外，还有不少的cheatsheet提供下载，有png的，pdf的，还有源文件SVG的，如果喜欢，大家可以移步到<a href="http://www.askubuntu.com/questions/28086/what-are-unitys-keyboard-and-mouse-shortcuts">原文</a>。也可以通过本文下面部分的链接查看或者下载。    <!--more-->
首先请阅读一下两个post，熟悉Unity的界面元素以及键盘上特殊快捷键的分布：</p>

<ul>
<li><ol>
<li><a href="http://www.askubuntu.com/questions/10228/whats-the-right-terminology-for-unitys-ui-elements">Unity Terminology</a></li>
</ol>
</li>
<li><ol>
<li><a href="http://www.askubuntu.com/questions/19558/what-are-the-meta-super-and-hyper-keys">什么是meta，super，hyper键</a>

<h2>比较官方全面的回答</h2>

<h3>键盘快捷键</h3>

在12.04版本的Unity中，长按<code>Super</code>键，可以得到一个快捷键的列表提示。

<h3>Launcher</h3>

<p>blablabla&#8230;</p></li>
</ol>
</li>
</ul>


<h2>cheatsheet的链接</h2>

<ul>
<li><a href="http://i.stack.imgur.com/pf1y5.png">桌面墙纸上的快捷键列表</a>    <a href="http://ubuntuone.com/p/pBs">源文件</a></li>
<li><a href="http://i.stack.imgur.com/ddQ7n.png">又一个桌面墙纸</a></li>
<li><a href="http://clusterbleep.net/files/Ubuntu_11.04_Unity_Cheat_Sheet.odt">ODT版本的cheatsheet</a></li>
<li><a href="http://clusterbleep.net/files/Ubuntu_11.04_Unity_Cheat_Sheet.pdf">PDF版本的cheatsheet</a></li>
</ul>


<p><strong>Enjoy your Unity:)</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github上的终级vimrc]]></title>
    <link href="http://hustcalm.me/blog/2012/10/20/githubshang-de-zhong-ji-vimrc/"/>
    <updated>2012-10-20T17:07:00+08:00</updated>
    <id>http://hustcalm.me/blog/2012/10/20/githubshang-de-zhong-ji-vimrc</id>
    <content type="html"><![CDATA[<p>相比于上面的<a href="http://hustcalm.me/blog/2012/10/20/shi-yong-githe-githublai-guan-li-vimpei-zhi-he-cha-jian/">文章</a>,这个方案合适懒人，只需要clone作者的repo然后install即可，方便但是减少了DIY的乐趣。作者amix也是.vim_runtime的作者，方便起见，我fork了<a href="https://github.com/amix/vimrc">amix/vimrc</a>，以后就可以在此基础上打造自己的.vim_runtime了～</p>

<p>具体如何使用，请直接访问我的repo<a href="https://github.com/hustcalm/vimrc">hustcalm/vimrc</a>.<br/>
Enjoy your Ultimate vimrc:)</p>
]]></content>
  </entry>
  
</feed>
